
TestFEES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08008ec4  08008ec4  00018ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800909c  0800909c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800909c  0800909c  0001909c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090a4  080090a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090a4  080090a4  000190a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090a8  080090a8  000190a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080090ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f8c  20000010  080090bc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005f9c  080090bc  00025f9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e55  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c44  00000000  00000000  00041e95  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ca8  00000000  00000000  00045ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b28  00000000  00000000  00047788  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00004c44  00000000  00000000  000492b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015a83  00000000  00000000  0004def4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df836  00000000  00000000  00063977  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001431ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b84  00000000  00000000  00143228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008eac 	.word	0x08008eac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08008eac 	.word	0x08008eac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <Hardware_Watchdog_Refresh>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
void Hardware_Watchdog_Refresh(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5, 1);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2120      	movs	r1, #32
 80004e8:	4807      	ldr	r0, [pc, #28]	; (8000508 <Hardware_Watchdog_Refresh+0x28>)
 80004ea:	f002 f83b 	bl	8002564 <HAL_GPIO_WritePin>
    osDelay(100);
 80004ee:	2064      	movs	r0, #100	; 0x64
 80004f0:	f006 f876 	bl	80065e0 <osDelay>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5, 0);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2120      	movs	r1, #32
 80004f8:	4803      	ldr	r0, [pc, #12]	; (8000508 <Hardware_Watchdog_Refresh+0x28>)
 80004fa:	f002 f833 	bl	8002564 <HAL_GPIO_WritePin>
    osDelay(100);
 80004fe:	2064      	movs	r0, #100	; 0x64
 8000500:	f006 f86e 	bl	80065e0 <osDelay>
}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40020400 	.word	0x40020400

0800050c <FEES_print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void FEES_print(int a , uint8_t PrintBuffer[] ){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
  #ifdef WINDOWS
  cout << PrintBuffer;
  #endif // WINDOWS

  #ifdef FREERTOS
	switch(a){
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	3b01      	subs	r3, #1
 800051a:	2b05      	cmp	r3, #5
 800051c:	d845      	bhi.n	80005aa <FEES_print+0x9e>
 800051e:	a201      	add	r2, pc, #4	; (adr r2, 8000524 <FEES_print+0x18>)
 8000520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000524:	0800053d 	.word	0x0800053d
 8000528:	08000553 	.word	0x08000553
 800052c:	08000569 	.word	0x08000569
 8000530:	0800057f 	.word	0x0800057f
 8000534:	080005ab 	.word	0x080005ab
 8000538:	08000595 	.word	0x08000595
        case 1:  HAL_UART_Transmit(&huart1,(uint8_t *) PrintBuffer, strlen(PrintBuffer), 100);
 800053c:	6838      	ldr	r0, [r7, #0]
 800053e:	f7ff fe47 	bl	80001d0 <strlen>
 8000542:	4603      	mov	r3, r0
 8000544:	b29a      	uxth	r2, r3
 8000546:	2364      	movs	r3, #100	; 0x64
 8000548:	6839      	ldr	r1, [r7, #0]
 800054a:	481f      	ldr	r0, [pc, #124]	; (80005c8 <FEES_print+0xbc>)
 800054c:	f004 fc73 	bl	8004e36 <HAL_UART_Transmit>
        break;
 8000550:	e036      	b.n	80005c0 <FEES_print+0xb4>
        case 2:  HAL_UART_Transmit(&huart2,(uint8_t *) PrintBuffer, strlen(PrintBuffer), 100);
 8000552:	6838      	ldr	r0, [r7, #0]
 8000554:	f7ff fe3c 	bl	80001d0 <strlen>
 8000558:	4603      	mov	r3, r0
 800055a:	b29a      	uxth	r2, r3
 800055c:	2364      	movs	r3, #100	; 0x64
 800055e:	6839      	ldr	r1, [r7, #0]
 8000560:	481a      	ldr	r0, [pc, #104]	; (80005cc <FEES_print+0xc0>)
 8000562:	f004 fc68 	bl	8004e36 <HAL_UART_Transmit>
        break;
 8000566:	e02b      	b.n	80005c0 <FEES_print+0xb4>
        case 3:  HAL_UART_Transmit(&huart3,(uint8_t *) PrintBuffer, strlen(PrintBuffer), 100);
 8000568:	6838      	ldr	r0, [r7, #0]
 800056a:	f7ff fe31 	bl	80001d0 <strlen>
 800056e:	4603      	mov	r3, r0
 8000570:	b29a      	uxth	r2, r3
 8000572:	2364      	movs	r3, #100	; 0x64
 8000574:	6839      	ldr	r1, [r7, #0]
 8000576:	4816      	ldr	r0, [pc, #88]	; (80005d0 <FEES_print+0xc4>)
 8000578:	f004 fc5d 	bl	8004e36 <HAL_UART_Transmit>
        break;
 800057c:	e020      	b.n	80005c0 <FEES_print+0xb4>
        case 4:  HAL_UART_Transmit(&huart6,(uint8_t *) PrintBuffer, strlen(PrintBuffer), 100);
 800057e:	6838      	ldr	r0, [r7, #0]
 8000580:	f7ff fe26 	bl	80001d0 <strlen>
 8000584:	4603      	mov	r3, r0
 8000586:	b29a      	uxth	r2, r3
 8000588:	2364      	movs	r3, #100	; 0x64
 800058a:	6839      	ldr	r1, [r7, #0]
 800058c:	4811      	ldr	r0, [pc, #68]	; (80005d4 <FEES_print+0xc8>)
 800058e:	f004 fc52 	bl	8004e36 <HAL_UART_Transmit>
        break;
 8000592:	e015      	b.n	80005c0 <FEES_print+0xb4>
        case 6:  HAL_UART_Transmit(&huart6,(uint8_t *) PrintBuffer, strlen(PrintBuffer), 100);
 8000594:	6838      	ldr	r0, [r7, #0]
 8000596:	f7ff fe1b 	bl	80001d0 <strlen>
 800059a:	4603      	mov	r3, r0
 800059c:	b29a      	uxth	r2, r3
 800059e:	2364      	movs	r3, #100	; 0x64
 80005a0:	6839      	ldr	r1, [r7, #0]
 80005a2:	480c      	ldr	r0, [pc, #48]	; (80005d4 <FEES_print+0xc8>)
 80005a4:	f004 fc47 	bl	8004e36 <HAL_UART_Transmit>
        break;
 80005a8:	e00a      	b.n	80005c0 <FEES_print+0xb4>
      default:   HAL_UART_Transmit(&huart2,(uint8_t *) PrintBuffer, strlen(PrintBuffer), 100);
 80005aa:	6838      	ldr	r0, [r7, #0]
 80005ac:	f7ff fe10 	bl	80001d0 <strlen>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	2364      	movs	r3, #100	; 0x64
 80005b6:	6839      	ldr	r1, [r7, #0]
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <FEES_print+0xc0>)
 80005ba:	f004 fc3c 	bl	8004e36 <HAL_UART_Transmit>
        break;
 80005be:	bf00      	nop
    }
    #endif // FREERTOS
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20005698 	.word	0x20005698
 80005cc:	20005ed8 	.word	0x20005ed8
 80005d0:	20004f9c 	.word	0x20004f9c
 80005d4:	20005b98 	.word	0x20005b98

080005d8 <FEES_scan>:

void FEES_scan(int a, char ScanBuffer[] ){
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]

	switch(a){
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	3b01      	subs	r3, #1
 80005e6:	2b05      	cmp	r3, #5
 80005e8:	d844      	bhi.n	8000674 <FEES_scan+0x9c>
 80005ea:	a201      	add	r2, pc, #4	; (adr r2, 80005f0 <FEES_scan+0x18>)
 80005ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f0:	08000609 	.word	0x08000609
 80005f4:	0800061f 	.word	0x0800061f
 80005f8:	08000635 	.word	0x08000635
 80005fc:	0800064b 	.word	0x0800064b
 8000600:	08000675 	.word	0x08000675
 8000604:	08000661 	.word	0x08000661
        case 1:  HAL_UART_Receive_DMA(&huart1, ScanBuffer, strlen(ScanBuffer));
 8000608:	6838      	ldr	r0, [r7, #0]
 800060a:	f7ff fde1 	bl	80001d0 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29b      	uxth	r3, r3
 8000612:	461a      	mov	r2, r3
 8000614:	6839      	ldr	r1, [r7, #0]
 8000616:	481f      	ldr	r0, [pc, #124]	; (8000694 <FEES_scan+0xbc>)
 8000618:	f004 fca6 	bl	8004f68 <HAL_UART_Receive_DMA>
        break;
 800061c:	e035      	b.n	800068a <FEES_scan+0xb2>
        case 2:  HAL_UART_Receive_DMA(&huart2, ScanBuffer, strlen(ScanBuffer));
 800061e:	6838      	ldr	r0, [r7, #0]
 8000620:	f7ff fdd6 	bl	80001d0 <strlen>
 8000624:	4603      	mov	r3, r0
 8000626:	b29b      	uxth	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	6839      	ldr	r1, [r7, #0]
 800062c:	481a      	ldr	r0, [pc, #104]	; (8000698 <FEES_scan+0xc0>)
 800062e:	f004 fc9b 	bl	8004f68 <HAL_UART_Receive_DMA>
        break;
 8000632:	e02a      	b.n	800068a <FEES_scan+0xb2>
        case 3:  HAL_UART_Receive_DMA(&huart3, ScanBuffer, strlen(ScanBuffer));
 8000634:	6838      	ldr	r0, [r7, #0]
 8000636:	f7ff fdcb 	bl	80001d0 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	b29b      	uxth	r3, r3
 800063e:	461a      	mov	r2, r3
 8000640:	6839      	ldr	r1, [r7, #0]
 8000642:	4816      	ldr	r0, [pc, #88]	; (800069c <FEES_scan+0xc4>)
 8000644:	f004 fc90 	bl	8004f68 <HAL_UART_Receive_DMA>
        break;
 8000648:	e01f      	b.n	800068a <FEES_scan+0xb2>
        case 4:  HAL_UART_Receive_DMA(&huart6, ScanBuffer, strlen(ScanBuffer));
 800064a:	6838      	ldr	r0, [r7, #0]
 800064c:	f7ff fdc0 	bl	80001d0 <strlen>
 8000650:	4603      	mov	r3, r0
 8000652:	b29b      	uxth	r3, r3
 8000654:	461a      	mov	r2, r3
 8000656:	6839      	ldr	r1, [r7, #0]
 8000658:	4811      	ldr	r0, [pc, #68]	; (80006a0 <FEES_scan+0xc8>)
 800065a:	f004 fc85 	bl	8004f68 <HAL_UART_Receive_DMA>
        break;
 800065e:	e014      	b.n	800068a <FEES_scan+0xb2>
        case 6:  HAL_UART_Receive_DMA(&huart6, ScanBuffer, strlen(ScanBuffer));
 8000660:	6838      	ldr	r0, [r7, #0]
 8000662:	f7ff fdb5 	bl	80001d0 <strlen>
 8000666:	4603      	mov	r3, r0
 8000668:	b29b      	uxth	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	6839      	ldr	r1, [r7, #0]
 800066e:	480c      	ldr	r0, [pc, #48]	; (80006a0 <FEES_scan+0xc8>)
 8000670:	f004 fc7a 	bl	8004f68 <HAL_UART_Receive_DMA>

      default:   HAL_UART_Receive_DMA(&huart2, ScanBuffer, strlen(ScanBuffer));
 8000674:	6838      	ldr	r0, [r7, #0]
 8000676:	f7ff fdab 	bl	80001d0 <strlen>
 800067a:	4603      	mov	r3, r0
 800067c:	b29b      	uxth	r3, r3
 800067e:	461a      	mov	r2, r3
 8000680:	6839      	ldr	r1, [r7, #0]
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <FEES_scan+0xc0>)
 8000684:	f004 fc70 	bl	8004f68 <HAL_UART_Receive_DMA>
        break;
 8000688:	bf00      	nop
    }
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20005698 	.word	0x20005698
 8000698:	20005ed8 	.word	0x20005ed8
 800069c:	20004f9c 	.word	0x20004f9c
 80006a0:	20005b98 	.word	0x20005b98

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f001 f994 	bl	80019d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f884 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f000 fbf6 	bl	8000ea0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006b4:	f000 f93a 	bl	800092c <MX_I2C1_Init>
  MX_I2C2_Init();
 80006b8:	f000 f966 	bl	8000988 <MX_I2C2_Init>
  MX_SPI1_Init();
 80006bc:	f000 f992 	bl	80009e4 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006c0:	f000 f9c6 	bl	8000a50 <MX_SPI2_Init>
  MX_SPI3_Init();
 80006c4:	f000 f9fa 	bl	8000abc <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80006c8:	f000 fb14 	bl	8000cf4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80006cc:	f000 fb66 	bl	8000d9c <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80006d0:	f000 fb8e 	bl	8000df0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80006d4:	f000 f8d8 	bl	8000888 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80006d8:	f000 fb36 	bl	8000d48 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006dc:	f000 fbb2 	bl	8000e44 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80006e0:	f000 fa22 	bl	8000b28 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006e4:	f000 faae 	bl	8000c44 <MX_TIM3_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006e8:	f005 fe6a 	bl	80063c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006ec:	4a1d      	ldr	r2, [pc, #116]	; (8000764 <main+0xc0>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	481d      	ldr	r0, [pc, #116]	; (8000768 <main+0xc4>)
 80006f2:	f005 fecf 	bl	8006494 <osThreadNew>
 80006f6:	4602      	mov	r2, r0
 80006f8:	4b1c      	ldr	r3, [pc, #112]	; (800076c <main+0xc8>)
 80006fa:	601a      	str	r2, [r3, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(Task01, NULL, &Task1_attributes);
 80006fc:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <main+0xcc>)
 80006fe:	2100      	movs	r1, #0
 8000700:	481c      	ldr	r0, [pc, #112]	; (8000774 <main+0xd0>)
 8000702:	f005 fec7 	bl	8006494 <osThreadNew>
 8000706:	4602      	mov	r2, r0
 8000708:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <main+0xd4>)
 800070a:	601a      	str	r2, [r3, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task02, NULL, &Task2_attributes);
 800070c:	4a1b      	ldr	r2, [pc, #108]	; (800077c <main+0xd8>)
 800070e:	2100      	movs	r1, #0
 8000710:	481b      	ldr	r0, [pc, #108]	; (8000780 <main+0xdc>)
 8000712:	f005 febf 	bl	8006494 <osThreadNew>
 8000716:	4602      	mov	r2, r0
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <main+0xe0>)
 800071a:	601a      	str	r2, [r3, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(Task03, NULL, &Task3_attributes);
 800071c:	4a1a      	ldr	r2, [pc, #104]	; (8000788 <main+0xe4>)
 800071e:	2100      	movs	r1, #0
 8000720:	481a      	ldr	r0, [pc, #104]	; (800078c <main+0xe8>)
 8000722:	f005 feb7 	bl	8006494 <osThreadNew>
 8000726:	4602      	mov	r2, r0
 8000728:	4b19      	ldr	r3, [pc, #100]	; (8000790 <main+0xec>)
 800072a:	601a      	str	r2, [r3, #0]

  /* creation of Task4 */
  Task4Handle = osThreadNew(Task04, NULL, &Task4_attributes);
 800072c:	4a19      	ldr	r2, [pc, #100]	; (8000794 <main+0xf0>)
 800072e:	2100      	movs	r1, #0
 8000730:	4819      	ldr	r0, [pc, #100]	; (8000798 <main+0xf4>)
 8000732:	f005 feaf 	bl	8006494 <osThreadNew>
 8000736:	4602      	mov	r2, r0
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <main+0xf8>)
 800073a:	601a      	str	r2, [r3, #0]

  /* creation of Task5 */
  Task5Handle = osThreadNew(Task05, NULL, &Task5_attributes);
 800073c:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <main+0xfc>)
 800073e:	2100      	movs	r1, #0
 8000740:	4818      	ldr	r0, [pc, #96]	; (80007a4 <main+0x100>)
 8000742:	f005 fea7 	bl	8006494 <osThreadNew>
 8000746:	4602      	mov	r2, r0
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <main+0x104>)
 800074a:	601a      	str	r2, [r3, #0]

  /* creation of Task6 */
  Task6Handle = osThreadNew(Task06, NULL, &Task6_attributes);
 800074c:	4a17      	ldr	r2, [pc, #92]	; (80007ac <main+0x108>)
 800074e:	2100      	movs	r1, #0
 8000750:	4817      	ldr	r0, [pc, #92]	; (80007b0 <main+0x10c>)
 8000752:	f005 fe9f 	bl	8006494 <osThreadNew>
 8000756:	4602      	mov	r2, r0
 8000758:	4b16      	ldr	r3, [pc, #88]	; (80007b4 <main+0x110>)
 800075a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800075c:	f005 fe64 	bl	8006428 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000760:	e7fe      	b.n	8000760 <main+0xbc>
 8000762:	bf00      	nop
 8000764:	08008f88 	.word	0x08008f88
 8000768:	0800108d 	.word	0x0800108d
 800076c:	20004940 	.word	0x20004940
 8000770:	08008fac 	.word	0x08008fac
 8000774:	080010a1 	.word	0x080010a1
 8000778:	200055e8 	.word	0x200055e8
 800077c:	08008fd0 	.word	0x08008fd0
 8000780:	080010f1 	.word	0x080010f1
 8000784:	20005bdc 	.word	0x20005bdc
 8000788:	08008ff4 	.word	0x08008ff4
 800078c:	08001101 	.word	0x08001101
 8000790:	20005bd8 	.word	0x20005bd8
 8000794:	08009018 	.word	0x08009018
 8000798:	08001111 	.word	0x08001111
 800079c:	20005694 	.word	0x20005694
 80007a0:	0800903c 	.word	0x0800903c
 80007a4:	08001121 	.word	0x08001121
 80007a8:	2000493c 	.word	0x2000493c
 80007ac:	08009060 	.word	0x08009060
 80007b0:	08001131 	.word	0x08001131
 80007b4:	200055e4 	.word	0x200055e4

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b094      	sub	sp, #80	; 0x50
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0320 	add.w	r3, r7, #32
 80007c2:	2230      	movs	r2, #48	; 0x30
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f008 fb67 	bl	8008e9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	4b27      	ldr	r3, [pc, #156]	; (8000880 <SystemClock_Config+0xc8>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a26      	ldr	r2, [pc, #152]	; (8000880 <SystemClock_Config+0xc8>)
 80007e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b24      	ldr	r3, [pc, #144]	; (8000880 <SystemClock_Config+0xc8>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	4b21      	ldr	r3, [pc, #132]	; (8000884 <SystemClock_Config+0xcc>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a20      	ldr	r2, [pc, #128]	; (8000884 <SystemClock_Config+0xcc>)
 8000802:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <SystemClock_Config+0xcc>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000814:	2301      	movs	r3, #1
 8000816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000818:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000822:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000828:	2304      	movs	r3, #4
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800082c:	2360      	movs	r3, #96	; 0x60
 800082e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000830:	2306      	movs	r3, #6
 8000832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000834:	2304      	movs	r3, #4
 8000836:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	4618      	mov	r0, r3
 800083e:	f002 ff13 	bl	8003668 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000848:	f000 fc8c 	bl	8001164 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	230f      	movs	r3, #15
 800084e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000850:	2302      	movs	r3, #2
 8000852:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f003 f96e 	bl	8003b48 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000872:	f000 fc77 	bl	8001164 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	; 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800089a:	4b21      	ldr	r3, [pc, #132]	; (8000920 <MX_ADC1_Init+0x98>)
 800089c:	4a21      	ldr	r2, [pc, #132]	; (8000924 <MX_ADC1_Init+0x9c>)
 800089e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008a0:	4b1f      	ldr	r3, [pc, #124]	; (8000920 <MX_ADC1_Init+0x98>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a6:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_ADC1_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008ac:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <MX_ADC1_Init+0x98>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008b2:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_ADC1_Init+0x98>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008b8:	4b19      	ldr	r3, [pc, #100]	; (8000920 <MX_ADC1_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_ADC1_Init+0x98>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_ADC1_Init+0x98>)
 80008c8:	4a17      	ldr	r2, [pc, #92]	; (8000928 <MX_ADC1_Init+0xa0>)
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_ADC1_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_ADC1_Init+0x98>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_ADC1_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_ADC1_Init+0x98>)
 80008e2:	2201      	movs	r2, #1
 80008e4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008e6:	480e      	ldr	r0, [pc, #56]	; (8000920 <MX_ADC1_Init+0x98>)
 80008e8:	f001 f8d8 	bl	8001a9c <HAL_ADC_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008f2:	f000 fc37 	bl	8001164 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008f6:	2310      	movs	r3, #16
 80008f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008fa:	2301      	movs	r3, #1
 80008fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008fe:	2300      	movs	r3, #0
 8000900:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	4619      	mov	r1, r3
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <MX_ADC1_Init+0x98>)
 8000908:	f001 f90c 	bl	8001b24 <HAL_ADC_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000912:	f000 fc27 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200055ec 	.word	0x200055ec
 8000924:	40012000 	.word	0x40012000
 8000928:	0f000001 	.word	0x0f000001

0800092c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_I2C1_Init+0x50>)
 8000932:	4a13      	ldr	r2, [pc, #76]	; (8000980 <MX_I2C1_Init+0x54>)
 8000934:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_I2C1_Init+0x50>)
 8000938:	4a12      	ldr	r2, [pc, #72]	; (8000984 <MX_I2C1_Init+0x58>)
 800093a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_I2C1_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_I2C1_Init+0x50>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_I2C1_Init+0x50>)
 800094a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800094e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <MX_I2C1_Init+0x50>)
 8000952:	2200      	movs	r2, #0
 8000954:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_I2C1_Init+0x50>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <MX_I2C1_Init+0x50>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_I2C1_Init+0x50>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	; (800097c <MX_I2C1_Init+0x50>)
 800096a:	f001 fe15 	bl	8002598 <HAL_I2C_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000974:	f000 fbf6 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20004fdc 	.word	0x20004fdc
 8000980:	40005400 	.word	0x40005400
 8000984:	000186a0 	.word	0x000186a0

08000988 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <MX_I2C2_Init+0x50>)
 800098e:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_I2C2_Init+0x54>)
 8000990:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_I2C2_Init+0x50>)
 8000994:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <MX_I2C2_Init+0x58>)
 8000996:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_I2C2_Init+0x50>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_I2C2_Init+0x50>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_I2C2_Init+0x50>)
 80009a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <MX_I2C2_Init+0x50>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_I2C2_Init+0x50>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <MX_I2C2_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_I2C2_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_I2C2_Init+0x50>)
 80009c6:	f001 fde7 	bl	8002598 <HAL_I2C_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009d0:	f000 fbc8 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009d4:	bf00      	nop
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20005498 	.word	0x20005498
 80009dc:	40005800 	.word	0x40005800
 80009e0:	000186a0 	.word	0x000186a0

080009e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_SPI1_Init+0x64>)
 80009ea:	4a18      	ldr	r2, [pc, #96]	; (8000a4c <MX_SPI1_Init+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_SPI1_Init+0x64>)
 80009f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_SPI1_Init+0x64>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_SPI1_Init+0x64>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_SPI1_Init+0x64>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_SPI1_Init+0x64>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_SPI1_Init+0x64>)
 8000a10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_SPI1_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <MX_SPI1_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_SPI1_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a28:	4b07      	ldr	r3, [pc, #28]	; (8000a48 <MX_SPI1_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_SPI1_Init+0x64>)
 8000a30:	220a      	movs	r2, #10
 8000a32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_SPI1_Init+0x64>)
 8000a36:	f003 faab 	bl	8003f90 <HAL_SPI_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a40:	f000 fb90 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20005e40 	.word	0x20005e40
 8000a4c:	40013000 	.word	0x40013000

08000a50 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a56:	4a18      	ldr	r2, [pc, #96]	; (8000ab8 <MX_SPI2_Init+0x68>)
 8000a58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a62:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000a9c:	220a      	movs	r2, #10
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_SPI2_Init+0x64>)
 8000aa2:	f003 fa75 	bl	8003f90 <HAL_SPI_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000aac:	f000 fb5a 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20004944 	.word	0x20004944
 8000ab8:	40003800 	.word	0x40003800

08000abc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <MX_SPI3_Init+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000ac8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	; (8000b20 <MX_SPI3_Init+0x64>)
 8000b0e:	f003 fa3f 	bl	8003f90 <HAL_SPI_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b18:	f000 fb24 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000552c 	.word	0x2000552c
 8000b24:	40003c00 	.word	0x40003c00

08000b28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08e      	sub	sp, #56	; 0x38
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3c:	f107 0320 	add.w	r3, r7, #32
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	615a      	str	r2, [r3, #20]
 8000b56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b58:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <MX_TIM2_Init+0x118>)
 8000b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 8000b60:	4b37      	ldr	r3, [pc, #220]	; (8000c40 <MX_TIM2_Init+0x118>)
 8000b62:	229f      	movs	r2, #159	; 0x9f
 8000b64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b66:	4b36      	ldr	r3, [pc, #216]	; (8000c40 <MX_TIM2_Init+0x118>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000b6c:	4b34      	ldr	r3, [pc, #208]	; (8000c40 <MX_TIM2_Init+0x118>)
 8000b6e:	2263      	movs	r2, #99	; 0x63
 8000b70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b72:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <MX_TIM2_Init+0x118>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b78:	4b31      	ldr	r3, [pc, #196]	; (8000c40 <MX_TIM2_Init+0x118>)
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b7e:	4830      	ldr	r0, [pc, #192]	; (8000c40 <MX_TIM2_Init+0x118>)
 8000b80:	f003 fa6a 	bl	8004058 <HAL_TIM_Base_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b8a:	f000 faeb 	bl	8001164 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4829      	ldr	r0, [pc, #164]	; (8000c40 <MX_TIM2_Init+0x118>)
 8000b9c:	f003 fca4 	bl	80044e8 <HAL_TIM_ConfigClockSource>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000ba6:	f000 fadd 	bl	8001164 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000baa:	4825      	ldr	r0, [pc, #148]	; (8000c40 <MX_TIM2_Init+0x118>)
 8000bac:	f003 faa3 	bl	80040f6 <HAL_TIM_PWM_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000bb6:	f000 fad5 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bc2:	f107 0320 	add.w	r3, r7, #32
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	481d      	ldr	r0, [pc, #116]	; (8000c40 <MX_TIM2_Init+0x118>)
 8000bca:	f004 f857 	bl	8004c7c <HAL_TIMEx_MasterConfigSynchronization>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000bd4:	f000 fac6 	bl	8001164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd8:	2360      	movs	r3, #96	; 0x60
 8000bda:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8000bdc:	2318      	movs	r3, #24
 8000bde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2200      	movs	r2, #0
 8000bec:	4619      	mov	r1, r3
 8000bee:	4814      	ldr	r0, [pc, #80]	; (8000c40 <MX_TIM2_Init+0x118>)
 8000bf0:	f003 fbb4 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000bfa:	f000 fab3 	bl	8001164 <Error_Handler>
  }
  sConfigOC.Pulse = 50-1;
 8000bfe:	2331      	movs	r3, #49	; 0x31
 8000c00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	2204      	movs	r2, #4
 8000c06:	4619      	mov	r1, r3
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <MX_TIM2_Init+0x118>)
 8000c0a:	f003 fba7 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000c14:	f000 faa6 	bl	8001164 <Error_Handler>
  }
  sConfigOC.Pulse = 75-1;
 8000c18:	234a      	movs	r3, #74	; 0x4a
 8000c1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2208      	movs	r2, #8
 8000c20:	4619      	mov	r1, r3
 8000c22:	4807      	ldr	r0, [pc, #28]	; (8000c40 <MX_TIM2_Init+0x118>)
 8000c24:	f003 fb9a 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8000c2e:	f000 fa99 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c32:	4803      	ldr	r0, [pc, #12]	; (8000c40 <MX_TIM2_Init+0x118>)
 8000c34:	f000 fc5e 	bl	80014f4 <HAL_TIM_MspPostInit>

}
 8000c38:	bf00      	nop
 8000c3a:	3738      	adds	r7, #56	; 0x38
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20005e98 	.word	0x20005e98

08000c44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4a:	f107 0320 	add.w	r3, r7, #32
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
 8000c62:	615a      	str	r2, [r3, #20]
 8000c64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <MX_TIM3_Init+0xa8>)
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <MX_TIM3_Init+0xac>)
 8000c6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <MX_TIM3_Init+0xa8>)
 8000c6e:	229f      	movs	r2, #159	; 0x9f
 8000c70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_TIM3_Init+0xa8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM3_Init+0xa8>)
 8000c7a:	2263      	movs	r2, #99	; 0x63
 8000c7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7e:	4b1b      	ldr	r3, [pc, #108]	; (8000cec <MX_TIM3_Init+0xa8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_TIM3_Init+0xa8>)
 8000c86:	2280      	movs	r2, #128	; 0x80
 8000c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c8a:	4818      	ldr	r0, [pc, #96]	; (8000cec <MX_TIM3_Init+0xa8>)
 8000c8c:	f003 fa33 	bl	80040f6 <HAL_TIM_PWM_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000c96:	f000 fa65 	bl	8001164 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ca2:	f107 0320 	add.w	r3, r7, #32
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4810      	ldr	r0, [pc, #64]	; (8000cec <MX_TIM3_Init+0xa8>)
 8000caa:	f003 ffe7 	bl	8004c7c <HAL_TIMEx_MasterConfigSynchronization>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000cb4:	f000 fa56 	bl	8001164 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb8:	2360      	movs	r3, #96	; 0x60
 8000cba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 8000cbc:	2331      	movs	r3, #49	; 0x31
 8000cbe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	2208      	movs	r2, #8
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4807      	ldr	r0, [pc, #28]	; (8000cec <MX_TIM3_Init+0xa8>)
 8000cd0:	f003 fb44 	bl	800435c <HAL_TIM_PWM_ConfigChannel>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000cda:	f000 fa43 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cde:	4803      	ldr	r0, [pc, #12]	; (8000cec <MX_TIM3_Init+0xa8>)
 8000ce0:	f000 fc08 	bl	80014f4 <HAL_TIM_MspPostInit>

}
 8000ce4:	bf00      	nop
 8000ce6:	3728      	adds	r7, #40	; 0x28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	200054ec 	.word	0x200054ec
 8000cf0:	40000400 	.word	0x40000400

08000cf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	; (8000d44 <MX_USART1_UART_Init+0x50>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cfe:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USART1_UART_Init+0x4c>)
 8000d2c:	f004 f836 	bl	8004d9c <HAL_UART_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d36:	f000 fa15 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20005698 	.word	0x20005698
 8000d44:	40011000 	.word	0x40011000

08000d48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d4c:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d4e:	4a12      	ldr	r2, [pc, #72]	; (8000d98 <MX_USART2_UART_Init+0x50>)
 8000d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d66:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d6e:	220c      	movs	r2, #12
 8000d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d7e:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_USART2_UART_Init+0x4c>)
 8000d80:	f004 f80c 	bl	8004d9c <HAL_UART_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d8a:	f000 f9eb 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d8e:	bf00      	nop
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	20005ed8 	.word	0x20005ed8
 8000d98:	40004400 	.word	0x40004400

08000d9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_USART3_UART_Init+0x4c>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <MX_USART3_UART_Init+0x50>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <MX_USART3_UART_Init+0x4c>)
 8000da8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <MX_USART3_UART_Init+0x4c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <MX_USART3_UART_Init+0x4c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <MX_USART3_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <MX_USART3_UART_Init+0x4c>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <MX_USART3_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <MX_USART3_UART_Init+0x4c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <MX_USART3_UART_Init+0x4c>)
 8000dd4:	f003 ffe2 	bl	8004d9c <HAL_UART_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000dde:	f000 f9c1 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20004f9c 	.word	0x20004f9c
 8000dec:	40004800 	.word	0x40004800

08000df0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_USART6_UART_Init+0x4c>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <MX_USART6_UART_Init+0x50>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <MX_USART6_UART_Init+0x4c>)
 8000dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e00:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_USART6_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_USART6_UART_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <MX_USART6_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_USART6_UART_Init+0x4c>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <MX_USART6_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_USART6_UART_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e26:	4805      	ldr	r0, [pc, #20]	; (8000e3c <MX_USART6_UART_Init+0x4c>)
 8000e28:	f003 ffb8 	bl	8004d9c <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000e32:	f000 f997 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20005b98 	.word	0x20005b98
 8000e40:	40011400 	.word	0x40011400

08000e44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e48:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e4e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e74:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e86:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e88:	f001 fcbe 	bl	8002808 <HAL_PCD_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e92:	f000 f967 	bl	8001164 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20005030 	.word	0x20005030

08000ea0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	; 0x30
 8000ea4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 031c 	add.w	r3, r7, #28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	4b6e      	ldr	r3, [pc, #440]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a6d      	ldr	r2, [pc, #436]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000ec0:	f043 0310 	orr.w	r3, r3, #16
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b6b      	ldr	r3, [pc, #428]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0310 	and.w	r3, r3, #16
 8000ece:	61bb      	str	r3, [r7, #24]
 8000ed0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	4b67      	ldr	r3, [pc, #412]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a66      	ldr	r2, [pc, #408]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b64      	ldr	r3, [pc, #400]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	4b60      	ldr	r3, [pc, #384]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a5f      	ldr	r2, [pc, #380]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b5d      	ldr	r3, [pc, #372]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b59      	ldr	r3, [pc, #356]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a58      	ldr	r2, [pc, #352]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b56      	ldr	r3, [pc, #344]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b52      	ldr	r3, [pc, #328]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a51      	ldr	r2, [pc, #324]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b4f      	ldr	r3, [pc, #316]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4b4b      	ldr	r3, [pc, #300]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a4a      	ldr	r2, [pc, #296]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b48      	ldr	r3, [pc, #288]	; (8001074 <MX_GPIO_Init+0x1d4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPS_PWR_ON_Pin|SBD_PWR_ON_Pin|CS_NAND_Pin|CS_LORA_Pin
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000f64:	4844      	ldr	r0, [pc, #272]	; (8001078 <MX_GPIO_Init+0x1d8>)
 8000f66:	f001 fafd 	bl	8002564 <HAL_GPIO_WritePin>
                          |RSBY_ON_Pin|DIR_COIL_X_Pin|DIR_COIL_Y_Pin|DIR_COIL_Z_Pin
                          |CS_GYRO_Pin|EN_ADC1_Pin|EN_ADC3_Pin|EN_ADC2_Pin
                          |SBD_SER_RI_Pin|SBD_SER_NET_Pin|ANA_PWR_ON_Pin|RAD_PWR_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UHF_RESET_Pin|RADFET_OWB_Pin|RAD_RESET_Pin|PSD1_SEL0_Pin
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f24e 213e 	movw	r1, #57918	; 0xe23e
 8000f70:	4842      	ldr	r0, [pc, #264]	; (800107c <MX_GPIO_Init+0x1dc>)
 8000f72:	f001 faf7 	bl	8002564 <HAL_GPIO_WritePin>
                          |PSD2_SEL1_Pin|PSD2_SEL0_Pin|PSD1_AMP_CS_Pin|PSD2_AMP_CS_Pin
                          |EX_SPI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PSD1_SEL1_GPIO_Port, PSD1_SEL1_Pin, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2101      	movs	r1, #1
 8000f7a:	4840      	ldr	r0, [pc, #256]	; (800107c <MX_GPIO_Init+0x1dc>)
 8000f7c:	f001 faf2 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EX_GPIO3_Pin|CS_RADFET_Pin|EX_GPIO4_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8000f86:	483e      	ldr	r0, [pc, #248]	; (8001080 <MX_GPIO_Init+0x1e0>)
 8000f88:	f001 faec 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RSBY_KEEP_EN_Pin|EX_GPIO1_Pin|EX_GPIO2_Pin|WATCHDOG_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f241 0123 	movw	r1, #4131	; 0x1023
 8000f92:	483c      	ldr	r0, [pc, #240]	; (8001084 <MX_GPIO_Init+0x1e4>)
 8000f94:	f001 fae6 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_EEPROM_Pin|CS_FRAM_Pin|CS_GYROD12_Pin|INT_GYRO_Pin
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f64f 419f 	movw	r1, #64671	; 0xfc9f
 8000f9e:	483a      	ldr	r0, [pc, #232]	; (8001088 <MX_GPIO_Init+0x1e8>)
 8000fa0:	f001 fae0 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPS_PWR_ON_Pin SBD_PWR_ON_Pin CS_NAND_Pin CS_LORA_Pin
                           RSBY_ON_Pin DIR_COIL_X_Pin DIR_COIL_Y_Pin DIR_COIL_Z_Pin
                           CS_GYRO_Pin EN_ADC1_Pin EN_ADC3_Pin EN_ADC2_Pin
                           SBD_SER_RI_Pin SBD_SER_NET_Pin ANA_PWR_ON_Pin RAD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = GPS_PWR_ON_Pin|SBD_PWR_ON_Pin|CS_NAND_Pin|CS_LORA_Pin
 8000fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fa8:	61fb      	str	r3, [r7, #28]
                          |RSBY_ON_Pin|DIR_COIL_X_Pin|DIR_COIL_Y_Pin|DIR_COIL_Z_Pin
                          |CS_GYRO_Pin|EN_ADC1_Pin|EN_ADC3_Pin|EN_ADC2_Pin
                          |SBD_SER_RI_Pin|SBD_SER_NET_Pin|ANA_PWR_ON_Pin|RAD_PWR_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000faa:	2301      	movs	r3, #1
 8000fac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	482e      	ldr	r0, [pc, #184]	; (8001078 <MX_GPIO_Init+0x1d8>)
 8000fbe:	f001 f937 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : UHF_RESET_Pin RADFET_OWB_Pin RAD_RESET_Pin PSD1_SEL1_Pin
                           PSD1_SEL0_Pin PSD2_SEL1_Pin PSD2_SEL0_Pin PSD1_AMP_CS_Pin
                           PSD2_AMP_CS_Pin EX_SPI_EN_Pin */
  GPIO_InitStruct.Pin = UHF_RESET_Pin|RADFET_OWB_Pin|RAD_RESET_Pin|PSD1_SEL1_Pin
 8000fc2:	f24e 233f 	movw	r3, #57919	; 0xe23f
 8000fc6:	61fb      	str	r3, [r7, #28]
                          |PSD1_SEL0_Pin|PSD2_SEL1_Pin|PSD2_SEL0_Pin|PSD1_AMP_CS_Pin
                          |PSD2_AMP_CS_Pin|EX_SPI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fd4:	f107 031c 	add.w	r3, r7, #28
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4828      	ldr	r0, [pc, #160]	; (800107c <MX_GPIO_Init+0x1dc>)
 8000fdc:	f001 f928 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_GPIO3_Pin CS_RADFET_Pin EX_GPIO4_Pin */
  GPIO_InitStruct.Pin = EX_GPIO3_Pin|CS_RADFET_Pin|EX_GPIO4_Pin;
 8000fe0:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8000fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4821      	ldr	r0, [pc, #132]	; (8001080 <MX_GPIO_Init+0x1e0>)
 8000ffa:	f001 f919 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : RSBY_KEEP_EN_Pin EX_GPIO1_Pin EX_GPIO2_Pin WATCHDOG_Pin */
  GPIO_InitStruct.Pin = RSBY_KEEP_EN_Pin|EX_GPIO1_Pin|EX_GPIO2_Pin|WATCHDOG_Pin;
 8000ffe:	f241 0323 	movw	r3, #4131	; 0x1023
 8001002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 031c 	add.w	r3, r7, #28
 8001014:	4619      	mov	r1, r3
 8001016:	481b      	ldr	r0, [pc, #108]	; (8001084 <MX_GPIO_Init+0x1e4>)
 8001018:	f001 f90a 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800101c:	2304      	movs	r3, #4
 800101e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	4619      	mov	r1, r3
 800102e:	4815      	ldr	r0, [pc, #84]	; (8001084 <MX_GPIO_Init+0x1e4>)
 8001030:	f001 f8fe 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_EEPROM_Pin CS_FRAM_Pin CS_GYROD12_Pin INT_GYRO_Pin
                           CS_GYRO2_Pin INT_GYRO2_Pin SBD_SER_DCD_Pin SBD_SER_DSR_Pin
                           SBD_SER_DTR_Pin SBD_SER_CTS_Pin SBD_SER_RTS_Pin SBD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = CS_EEPROM_Pin|CS_FRAM_Pin|CS_GYROD12_Pin|INT_GYRO_Pin
 8001034:	f64f 439f 	movw	r3, #64671	; 0xfc9f
 8001038:	61fb      	str	r3, [r7, #28]
                          |CS_GYRO2_Pin|INT_GYRO2_Pin|SBD_SER_DCD_Pin|SBD_SER_DSR_Pin
                          |SBD_SER_DTR_Pin|SBD_SER_CTS_Pin|SBD_SER_RTS_Pin|SBD_ON_OFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103a:	2301      	movs	r3, #1
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	4619      	mov	r1, r3
 800104c:	480e      	ldr	r0, [pc, #56]	; (8001088 <MX_GPIO_Init+0x1e8>)
 800104e:	f001 f8ef 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : PGOOD_Pin */
  GPIO_InitStruct.Pin = PGOOD_Pin;
 8001052:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PGOOD_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 031c 	add.w	r3, r7, #28
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_GPIO_Init+0x1e0>)
 8001068:	f001 f8e2 	bl	8002230 <HAL_GPIO_Init>

}
 800106c:	bf00      	nop
 800106e:	3730      	adds	r7, #48	; 0x30
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40023800 	.word	0x40023800
 8001078:	40021000 	.word	0x40021000
 800107c:	40020800 	.word	0x40020800
 8001080:	40020000 	.word	0x40020000
 8001084:	40020400 	.word	0x40020400
 8001088:	40020c00 	.word	0x40020c00

0800108c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  Hardware_Watchdog_Refresh();
 8001094:	f7ff fa24 	bl	80004e0 <Hardware_Watchdog_Refresh>
	  // TestPins();
	  // pintoggle('d',15);  	// CS_NAND - Led BLU
	  //PWM_STARTERS_T2_3_VariablePWM();

	  osDelay(1);
 8001098:	2001      	movs	r0, #1
 800109a:	f005 faa1 	bl	80065e0 <osDelay>
	  Hardware_Watchdog_Refresh();
 800109e:	e7f9      	b.n	8001094 <StartDefaultTask+0x8>

080010a0 <Task01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task01 */
void Task01(void *argument)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  //Main_FEES();


	  FEES_print(1 , "CIAO , che dici? si o no? \n " );
 80010a8:	490e      	ldr	r1, [pc, #56]	; (80010e4 <Task01+0x44>)
 80010aa:	2001      	movs	r0, #1
 80010ac:	f7ff fa2e 	bl	800050c <FEES_print>
	  char scanbuffer[5];

	  FEES_scan( 1, scanbuffer);
 80010b0:	f107 0308 	add.w	r3, r7, #8
 80010b4:	4619      	mov	r1, r3
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff fa8e 	bl	80005d8 <FEES_scan>

	  if(scanbuffer[0]=='y'){
 80010bc:	7a3b      	ldrb	r3, [r7, #8]
 80010be:	2b79      	cmp	r3, #121	; 0x79
 80010c0:	d103      	bne.n	80010ca <Task01+0x2a>
		  FEES_print(1 , "you said yes! \n" );
 80010c2:	4909      	ldr	r1, [pc, #36]	; (80010e8 <Task01+0x48>)
 80010c4:	2001      	movs	r0, #1
 80010c6:	f7ff fa21 	bl	800050c <FEES_print>
	  }
	  if(scanbuffer[0]=='n'){
 80010ca:	7a3b      	ldrb	r3, [r7, #8]
 80010cc:	2b6e      	cmp	r3, #110	; 0x6e
 80010ce:	d103      	bne.n	80010d8 <Task01+0x38>
		  FEES_print(1 , "you said no! \n" );
 80010d0:	4906      	ldr	r1, [pc, #24]	; (80010ec <Task01+0x4c>)
 80010d2:	2001      	movs	r0, #1
 80010d4:	f7ff fa1a 	bl	800050c <FEES_print>
	  FEES_print(3 , "3 \n" );
	  FEES_print(6 , "6 \n" );

*/

	  osDelay(1000);
 80010d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010dc:	f005 fa80 	bl	80065e0 <osDelay>
  {
 80010e0:	e7e2      	b.n	80010a8 <Task01+0x8>
 80010e2:	bf00      	nop
 80010e4:	08008f30 	.word	0x08008f30
 80010e8:	08008f50 	.word	0x08008f50
 80010ec:	08008f60 	.word	0x08008f60

080010f0 <Task02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02 */
void Task02(void *argument)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02 */
	/* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80010f8:	2001      	movs	r0, #1
 80010fa:	f005 fa71 	bl	80065e0 <osDelay>
 80010fe:	e7fb      	b.n	80010f8 <Task02+0x8>

08001100 <Task03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task03 */
void Task03(void *argument)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task03 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8001108:	2001      	movs	r0, #1
 800110a:	f005 fa69 	bl	80065e0 <osDelay>
 800110e:	e7fb      	b.n	8001108 <Task03+0x8>

08001110 <Task04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task04 */
void Task04(void *argument)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task04 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8001118:	2001      	movs	r0, #1
 800111a:	f005 fa61 	bl	80065e0 <osDelay>
 800111e:	e7fb      	b.n	8001118 <Task04+0x8>

08001120 <Task05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task05 */
void Task05(void *argument)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task05 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 8001128:	2001      	movs	r0, #1
 800112a:	f005 fa59 	bl	80065e0 <osDelay>
 800112e:	e7fb      	b.n	8001128 <Task05+0x8>

08001130 <Task06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task06 */
void Task06(void *argument)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task06 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f005 fa51 	bl	80065e0 <osDelay>
 800113e:	e7fb      	b.n	8001138 <Task06+0x8>

08001140 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d101      	bne.n	8001156 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001152:	f000 fc61 	bl	8001a18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40001000 	.word	0x40001000

08001164 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_MspInit+0x4c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <HAL_MspInit+0x4c>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001188:	6453      	str	r3, [r2, #68]	; 0x44
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_MspInit+0x4c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_MspInit+0x4c>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	; 0x40
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <HAL_ADC_MspInit+0x3c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d10d      	bne.n	80011f2 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b0a      	ldr	r3, [pc, #40]	; (8001204 <HAL_ADC_MspInit+0x40>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a09      	ldr	r2, [pc, #36]	; (8001204 <HAL_ADC_MspInit+0x40>)
 80011e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b07      	ldr	r3, [pc, #28]	; (8001204 <HAL_ADC_MspInit+0x40>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3714      	adds	r7, #20
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40012000 	.word	0x40012000
 8001204:	40023800 	.word	0x40023800

08001208 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	; 0x30
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a33      	ldr	r2, [pc, #204]	; (80012f4 <HAL_I2C_MspInit+0xec>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d12d      	bne.n	8001286 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <HAL_I2C_MspInit+0xf0>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a31      	ldr	r2, [pc, #196]	; (80012f8 <HAL_I2C_MspInit+0xf0>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <HAL_I2C_MspInit+0xf0>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	61bb      	str	r3, [r7, #24]
 8001244:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001246:	f44f 7340 	mov.w	r3, #768	; 0x300
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124c:	2312      	movs	r3, #18
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001250:	2301      	movs	r3, #1
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001254:	2303      	movs	r3, #3
 8001256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001258:	2304      	movs	r3, #4
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	4826      	ldr	r0, [pc, #152]	; (80012fc <HAL_I2C_MspInit+0xf4>)
 8001264:	f000 ffe4 	bl	8002230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_I2C_MspInit+0xf0>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <HAL_I2C_MspInit+0xf0>)
 8001272:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001276:	6413      	str	r3, [r2, #64]	; 0x40
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <HAL_I2C_MspInit+0xf0>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001280:	617b      	str	r3, [r7, #20]
 8001282:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001284:	e031      	b.n	80012ea <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <HAL_I2C_MspInit+0xf8>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d12c      	bne.n	80012ea <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	4b18      	ldr	r3, [pc, #96]	; (80012f8 <HAL_I2C_MspInit+0xf0>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <HAL_I2C_MspInit+0xf0>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	6313      	str	r3, [r2, #48]	; 0x30
 80012a0:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_I2C_MspInit+0xf0>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b2:	2312      	movs	r3, #18
 80012b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012be:	2304      	movs	r3, #4
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	4619      	mov	r1, r3
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <HAL_I2C_MspInit+0xf4>)
 80012ca:	f000 ffb1 	bl	8002230 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_I2C_MspInit+0xf0>)
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <HAL_I2C_MspInit+0xf0>)
 80012d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012dc:	6413      	str	r3, [r2, #64]	; 0x40
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_I2C_MspInit+0xf0>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
}
 80012ea:	bf00      	nop
 80012ec:	3730      	adds	r7, #48	; 0x30
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40005400 	.word	0x40005400
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020400 	.word	0x40020400
 8001300:	40005800 	.word	0x40005800

08001304 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08e      	sub	sp, #56	; 0x38
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]
 800131a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a4c      	ldr	r2, [pc, #304]	; (8001454 <HAL_SPI_MspInit+0x150>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d12c      	bne.n	8001380 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
 800132a:	4b4b      	ldr	r3, [pc, #300]	; (8001458 <HAL_SPI_MspInit+0x154>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	4a4a      	ldr	r2, [pc, #296]	; (8001458 <HAL_SPI_MspInit+0x154>)
 8001330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001334:	6453      	str	r3, [r2, #68]	; 0x44
 8001336:	4b48      	ldr	r3, [pc, #288]	; (8001458 <HAL_SPI_MspInit+0x154>)
 8001338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800133e:	623b      	str	r3, [r7, #32]
 8001340:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
 8001346:	4b44      	ldr	r3, [pc, #272]	; (8001458 <HAL_SPI_MspInit+0x154>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a43      	ldr	r2, [pc, #268]	; (8001458 <HAL_SPI_MspInit+0x154>)
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b41      	ldr	r3, [pc, #260]	; (8001458 <HAL_SPI_MspInit+0x154>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800135e:	23e0      	movs	r3, #224	; 0xe0
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800136e:	2305      	movs	r3, #5
 8001370:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001376:	4619      	mov	r1, r3
 8001378:	4838      	ldr	r0, [pc, #224]	; (800145c <HAL_SPI_MspInit+0x158>)
 800137a:	f000 ff59 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800137e:	e064      	b.n	800144a <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a36      	ldr	r2, [pc, #216]	; (8001460 <HAL_SPI_MspInit+0x15c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d12d      	bne.n	80013e6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
 800138e:	4b32      	ldr	r3, [pc, #200]	; (8001458 <HAL_SPI_MspInit+0x154>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a31      	ldr	r2, [pc, #196]	; (8001458 <HAL_SPI_MspInit+0x154>)
 8001394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <HAL_SPI_MspInit+0x154>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_SPI_MspInit+0x154>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a2a      	ldr	r2, [pc, #168]	; (8001458 <HAL_SPI_MspInit+0x154>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b28      	ldr	r3, [pc, #160]	; (8001458 <HAL_SPI_MspInit+0x154>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013c2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	2302      	movs	r3, #2
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d0:	2303      	movs	r3, #3
 80013d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013d4:	2305      	movs	r3, #5
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	4619      	mov	r1, r3
 80013de:	4821      	ldr	r0, [pc, #132]	; (8001464 <HAL_SPI_MspInit+0x160>)
 80013e0:	f000 ff26 	bl	8002230 <HAL_GPIO_Init>
}
 80013e4:	e031      	b.n	800144a <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a1f      	ldr	r2, [pc, #124]	; (8001468 <HAL_SPI_MspInit+0x164>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d12c      	bne.n	800144a <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <HAL_SPI_MspInit+0x154>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_SPI_MspInit+0x154>)
 80013fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_SPI_MspInit+0x154>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <HAL_SPI_MspInit+0x154>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	4a10      	ldr	r2, [pc, #64]	; (8001458 <HAL_SPI_MspInit+0x154>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	6313      	str	r3, [r2, #48]	; 0x30
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <HAL_SPI_MspInit+0x154>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001428:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800143a:	2306      	movs	r3, #6
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	4809      	ldr	r0, [pc, #36]	; (800146c <HAL_SPI_MspInit+0x168>)
 8001446:	f000 fef3 	bl	8002230 <HAL_GPIO_Init>
}
 800144a:	bf00      	nop
 800144c:	3738      	adds	r7, #56	; 0x38
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40013000 	.word	0x40013000
 8001458:	40023800 	.word	0x40023800
 800145c:	40020000 	.word	0x40020000
 8001460:	40003800 	.word	0x40003800
 8001464:	40020400 	.word	0x40020400
 8001468:	40003c00 	.word	0x40003c00
 800146c:	40020800 	.word	0x40020800

08001470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001480:	d10d      	bne.n	800149e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b09      	ldr	r3, [pc, #36]	; (80014ac <HAL_TIM_Base_MspInit+0x3c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_TIM_Base_MspInit+0x3c>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_TIM_Base_MspInit+0x3c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800

080014b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <HAL_TIM_PWM_MspInit+0x3c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d10d      	bne.n	80014de <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_TIM_PWM_MspInit+0x40>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <HAL_TIM_PWM_MspInit+0x40>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_TIM_PWM_MspInit+0x40>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40000400 	.word	0x40000400
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001514:	d11e      	bne.n	8001554 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <HAL_TIM_MspPostInit+0xb0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a21      	ldr	r2, [pc, #132]	; (80015a4 <HAL_TIM_MspPostInit+0xb0>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b1f      	ldr	r3, [pc, #124]	; (80015a4 <HAL_TIM_MspPostInit+0xb0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_X_COIL_Pin|PWM_Y_COIL_Pin|PWM_Z_COIL_Pin;
 8001532:	2307      	movs	r3, #7
 8001534:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001542:	2301      	movs	r3, #1
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	4816      	ldr	r0, [pc, #88]	; (80015a8 <HAL_TIM_MspPostInit+0xb4>)
 800154e:	f000 fe6f 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001552:	e023      	b.n	800159c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_TIM_MspPostInit+0xb8>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d11e      	bne.n	800159c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_TIM_MspPostInit+0xb0>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a0f      	ldr	r2, [pc, #60]	; (80015a4 <HAL_TIM_MspPostInit+0xb0>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b0d      	ldr	r3, [pc, #52]	; (80015a4 <HAL_TIM_MspPostInit+0xb0>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_HEATER_Pin;
 800157a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800158c:	2302      	movs	r3, #2
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_HEATER_GPIO_Port, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	4806      	ldr	r0, [pc, #24]	; (80015b0 <HAL_TIM_MspPostInit+0xbc>)
 8001598:	f000 fe4a 	bl	8002230 <HAL_GPIO_Init>
}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40000400 	.word	0x40000400
 80015b0:	40020800 	.word	0x40020800

080015b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b090      	sub	sp, #64	; 0x40
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a64      	ldr	r2, [pc, #400]	; (8001764 <HAL_UART_MspInit+0x1b0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d12c      	bne.n	8001630 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80015da:	4b63      	ldr	r3, [pc, #396]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	4a62      	ldr	r2, [pc, #392]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	6453      	str	r3, [r2, #68]	; 0x44
 80015e6:	4b60      	ldr	r3, [pc, #384]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80015f0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
 80015f6:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a5b      	ldr	r2, [pc, #364]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b59      	ldr	r3, [pc, #356]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800160e:	23c0      	movs	r3, #192	; 0xc0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800161e:	2307      	movs	r3, #7
 8001620:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001626:	4619      	mov	r1, r3
 8001628:	4850      	ldr	r0, [pc, #320]	; (800176c <HAL_UART_MspInit+0x1b8>)
 800162a:	f000 fe01 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800162e:	e095      	b.n	800175c <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a4e      	ldr	r2, [pc, #312]	; (8001770 <HAL_UART_MspInit+0x1bc>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12c      	bne.n	8001694 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
 800163e:	4b4a      	ldr	r3, [pc, #296]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a49      	ldr	r2, [pc, #292]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b47      	ldr	r3, [pc, #284]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	623b      	str	r3, [r7, #32]
 8001654:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	4b43      	ldr	r3, [pc, #268]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a42      	ldr	r2, [pc, #264]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 8001660:	f043 0308 	orr.w	r3, r3, #8
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b40      	ldr	r3, [pc, #256]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001672:	2360      	movs	r3, #96	; 0x60
 8001674:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167e:	2303      	movs	r3, #3
 8001680:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001682:	2307      	movs	r3, #7
 8001684:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800168a:	4619      	mov	r1, r3
 800168c:	4839      	ldr	r0, [pc, #228]	; (8001774 <HAL_UART_MspInit+0x1c0>)
 800168e:	f000 fdcf 	bl	8002230 <HAL_GPIO_Init>
}
 8001692:	e063      	b.n	800175c <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a37      	ldr	r2, [pc, #220]	; (8001778 <HAL_UART_MspInit+0x1c4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d12d      	bne.n	80016fa <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	4b31      	ldr	r3, [pc, #196]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a30      	ldr	r2, [pc, #192]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 80016a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b2e      	ldr	r3, [pc, #184]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a29      	ldr	r2, [pc, #164]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016dc:	2302      	movs	r3, #2
 80016de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e4:	2303      	movs	r3, #3
 80016e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016e8:	2307      	movs	r3, #7
 80016ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f0:	4619      	mov	r1, r3
 80016f2:	4820      	ldr	r0, [pc, #128]	; (8001774 <HAL_UART_MspInit+0x1c0>)
 80016f4:	f000 fd9c 	bl	8002230 <HAL_GPIO_Init>
}
 80016f8:	e030      	b.n	800175c <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART6)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1f      	ldr	r2, [pc, #124]	; (800177c <HAL_UART_MspInit+0x1c8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d12b      	bne.n	800175c <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	4b17      	ldr	r3, [pc, #92]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 800170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170c:	4a16      	ldr	r2, [pc, #88]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 800170e:	f043 0320 	orr.w	r3, r3, #32
 8001712:	6453      	str	r3, [r2, #68]	; 0x44
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	f003 0320 	and.w	r3, r3, #32
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 8001726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001728:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	6313      	str	r3, [r2, #48]	; 0x30
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_UART_MspInit+0x1b4>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800173c:	23c0      	movs	r3, #192	; 0xc0
 800173e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800174c:	2308      	movs	r3, #8
 800174e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001750:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001754:	4619      	mov	r1, r3
 8001756:	480a      	ldr	r0, [pc, #40]	; (8001780 <HAL_UART_MspInit+0x1cc>)
 8001758:	f000 fd6a 	bl	8002230 <HAL_GPIO_Init>
}
 800175c:	bf00      	nop
 800175e:	3740      	adds	r7, #64	; 0x40
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40011000 	.word	0x40011000
 8001768:	40023800 	.word	0x40023800
 800176c:	40020400 	.word	0x40020400
 8001770:	40004400 	.word	0x40004400
 8001774:	40020c00 	.word	0x40020c00
 8001778:	40004800 	.word	0x40004800
 800177c:	40011400 	.word	0x40011400
 8001780:	40020800 	.word	0x40020800

08001784 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017a4:	d147      	bne.n	8001836 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <HAL_PCD_MspInit+0xbc>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a24      	ldr	r2, [pc, #144]	; (8001840 <HAL_PCD_MspInit+0xbc>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b22      	ldr	r3, [pc, #136]	; (8001840 <HAL_PCD_MspInit+0xbc>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	481b      	ldr	r0, [pc, #108]	; (8001844 <HAL_PCD_MspInit+0xc0>)
 80017d8:	f000 fd2a 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80017dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017ee:	230a      	movs	r3, #10
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4812      	ldr	r0, [pc, #72]	; (8001844 <HAL_PCD_MspInit+0xc0>)
 80017fa:	f000 fd19 	bl	8002230 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_PCD_MspInit+0xbc>)
 8001800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001802:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <HAL_PCD_MspInit+0xbc>)
 8001804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001808:	6353      	str	r3, [r2, #52]	; 0x34
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_PCD_MspInit+0xbc>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <HAL_PCD_MspInit+0xbc>)
 8001814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_PCD_MspInit+0xbc>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2043      	movs	r0, #67	; 0x43
 800182c:	f000 fc50 	bl	80020d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001830:	2043      	movs	r0, #67	; 0x43
 8001832:	f000 fc69 	bl	8002108 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40020000 	.word	0x40020000

08001848 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	2036      	movs	r0, #54	; 0x36
 800185e:	f000 fc37 	bl	80020d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001862:	2036      	movs	r0, #54	; 0x36
 8001864:	f000 fc50 	bl	8002108 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <HAL_InitTick+0xa0>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	4a1d      	ldr	r2, [pc, #116]	; (80018e8 <HAL_InitTick+0xa0>)
 8001872:	f043 0310 	orr.w	r3, r3, #16
 8001876:	6413      	str	r3, [r2, #64]	; 0x40
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_InitTick+0xa0>)
 800187a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001884:	f107 0210 	add.w	r2, r7, #16
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f002 fb4c 	bl	8003f2c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001894:	f002 fb22 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 8001898:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800189a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800189c:	4a13      	ldr	r2, [pc, #76]	; (80018ec <HAL_InitTick+0xa4>)
 800189e:	fba2 2303 	umull	r2, r3, r2, r3
 80018a2:	0c9b      	lsrs	r3, r3, #18
 80018a4:	3b01      	subs	r3, #1
 80018a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_InitTick+0xa8>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <HAL_InitTick+0xac>)
 80018ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <HAL_InitTick+0xa8>)
 80018b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018b4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018b6:	4a0e      	ldr	r2, [pc, #56]	; (80018f0 <HAL_InitTick+0xa8>)
 80018b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018ba:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_InitTick+0xa8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_InitTick+0xa8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018c8:	4809      	ldr	r0, [pc, #36]	; (80018f0 <HAL_InitTick+0xa8>)
 80018ca:	f002 fbc5 	bl	8004058 <HAL_TIM_Base_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d104      	bne.n	80018de <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018d4:	4806      	ldr	r0, [pc, #24]	; (80018f0 <HAL_InitTick+0xa8>)
 80018d6:	f002 fbea 	bl	80040ae <HAL_TIM_Base_Start_IT>
 80018da:	4603      	mov	r3, r0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3730      	adds	r7, #48	; 0x30
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40023800 	.word	0x40023800
 80018ec:	431bde83 	.word	0x431bde83
 80018f0:	20005f18 	.word	0x20005f18
 80018f4:	40001000 	.word	0x40001000

080018f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800190a:	e7fe      	b.n	800190a <HardFault_Handler+0x4>

0800190c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <MemManage_Handler+0x4>

08001912 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <BusFault_Handler+0x4>

08001918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>

0800191e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <TIM6_DAC_IRQHandler+0x10>)
 8001932:	f002 fc0b 	bl	800414c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20005f18 	.word	0x20005f18

08001940 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <OTG_FS_IRQHandler+0x10>)
 8001946:	f001 f87c 	bl	8002a42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20005030 	.word	0x20005030

08001954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <SystemInit+0x28>)
 800195a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195e:	4a07      	ldr	r2, [pc, #28]	; (800197c <SystemInit+0x28>)
 8001960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <SystemInit+0x28>)
 800196a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800196e:	609a      	str	r2, [r3, #8]
#endif
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001984:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001986:	e003      	b.n	8001990 <LoopCopyDataInit>

08001988 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800198a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800198c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800198e:	3104      	adds	r1, #4

08001990 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001994:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001996:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001998:	d3f6      	bcc.n	8001988 <CopyDataInit>
  ldr  r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800199c:	e002      	b.n	80019a4 <LoopFillZerobss>

0800199e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800199e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019a0:	f842 3b04 	str.w	r3, [r2], #4

080019a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019a8:	d3f9      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019aa:	f7ff ffd3 	bl	8001954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f007 fa45 	bl	8008e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7fe fe77 	bl	80006a4 <main>
  bx  lr    
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019bc:	080090ac 	.word	0x080090ac
  ldr  r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019c4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80019c8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80019cc:	20005f9c 	.word	0x20005f9c

080019d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_Init+0x40>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_Init+0x40>)
 80019ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_Init+0x40>)
 80019f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 fb5c 	bl	80020ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f7ff ff20 	bl	8001848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a08:	f7ff fbb4 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00

08001a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x20>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_IncTick+0x24>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	20005f58 	.word	0x20005f58

08001a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_GetTick+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	20005f58 	.word	0x20005f58

08001a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff ffee 	bl	8001a40 <HAL_GetTick>
 8001a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d005      	beq.n	8001a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_Delay+0x40>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a7e:	bf00      	nop
 8001a80:	f7ff ffde 	bl	8001a40 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d8f7      	bhi.n	8001a80 <HAL_Delay+0x28>
  {
  }
}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000008 	.word	0x20000008

08001a9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e033      	b.n	8001b1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fb82 	bl	80011c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 0310 	and.w	r3, r3, #16
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d118      	bne.n	8001b0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ae2:	f023 0302 	bic.w	r3, r3, #2
 8001ae6:	f043 0202 	orr.w	r2, r3, #2
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f93a 	bl	8001d68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f023 0303 	bic.w	r3, r3, #3
 8001b02:	f043 0201 	orr.w	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40
 8001b0a:	e001      	b.n	8001b10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_ADC_ConfigChannel+0x1c>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e105      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x228>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b09      	cmp	r3, #9
 8001b4e:	d925      	bls.n	8001b9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68d9      	ldr	r1, [r3, #12]
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4613      	mov	r3, r2
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	4413      	add	r3, r2
 8001b64:	3b1e      	subs	r3, #30
 8001b66:	2207      	movs	r2, #7
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43da      	mvns	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	400a      	ands	r2, r1
 8001b74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68d9      	ldr	r1, [r3, #12]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	4603      	mov	r3, r0
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	4403      	add	r3, r0
 8001b8e:	3b1e      	subs	r3, #30
 8001b90:	409a      	lsls	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	430a      	orrs	r2, r1
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	e022      	b.n	8001be2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6919      	ldr	r1, [r3, #16]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4613      	mov	r3, r2
 8001bac:	005b      	lsls	r3, r3, #1
 8001bae:	4413      	add	r3, r2
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6919      	ldr	r1, [r3, #16]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4403      	add	r3, r0
 8001bd8:	409a      	lsls	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b06      	cmp	r3, #6
 8001be8:	d824      	bhi.n	8001c34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	3b05      	subs	r3, #5
 8001bfc:	221f      	movs	r2, #31
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	400a      	ands	r2, r1
 8001c0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	4618      	mov	r0, r3
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	3b05      	subs	r3, #5
 8001c26:	fa00 f203 	lsl.w	r2, r0, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34
 8001c32:	e04c      	b.n	8001cce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b0c      	cmp	r3, #12
 8001c3a:	d824      	bhi.n	8001c86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3b23      	subs	r3, #35	; 0x23
 8001c4e:	221f      	movs	r2, #31
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	43da      	mvns	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	400a      	ands	r2, r1
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	3b23      	subs	r3, #35	; 0x23
 8001c78:	fa00 f203 	lsl.w	r2, r0, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	631a      	str	r2, [r3, #48]	; 0x30
 8001c84:	e023      	b.n	8001cce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	4413      	add	r3, r2
 8001c96:	3b41      	subs	r3, #65	; 0x41
 8001c98:	221f      	movs	r2, #31
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	400a      	ands	r2, r1
 8001ca6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3b41      	subs	r3, #65	; 0x41
 8001cc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cce:	4b22      	ldr	r3, [pc, #136]	; (8001d58 <HAL_ADC_ConfigChannel+0x234>)
 8001cd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a21      	ldr	r2, [pc, #132]	; (8001d5c <HAL_ADC_ConfigChannel+0x238>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d109      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x1cc>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b12      	cmp	r3, #18
 8001ce2:	d105      	bne.n	8001cf0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <HAL_ADC_ConfigChannel+0x238>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d123      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x21e>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2b10      	cmp	r3, #16
 8001d00:	d003      	beq.n	8001d0a <HAL_ADC_ConfigChannel+0x1e6>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b11      	cmp	r3, #17
 8001d08:	d11b      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b10      	cmp	r3, #16
 8001d1c:	d111      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_ADC_ConfigChannel+0x23c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <HAL_ADC_ConfigChannel+0x240>)
 8001d24:	fba2 2303 	umull	r2, r3, r2, r3
 8001d28:	0c9a      	lsrs	r2, r3, #18
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d34:	e002      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f9      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	40012300 	.word	0x40012300
 8001d5c:	40012000 	.word	0x40012000
 8001d60:	20000000 	.word	0x20000000
 8001d64:	431bde83 	.word	0x431bde83

08001d68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d70:	4b79      	ldr	r3, [pc, #484]	; (8001f58 <ADC_Init+0x1f0>)
 8001d72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	685a      	ldr	r2, [r3, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6859      	ldr	r1, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	021a      	lsls	r2, r3, #8
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6859      	ldr	r1, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6899      	ldr	r1, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	4a58      	ldr	r2, [pc, #352]	; (8001f5c <ADC_Init+0x1f4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d022      	beq.n	8001e46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6899      	ldr	r1, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6899      	ldr	r1, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	e00f      	b.n	8001e66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0202 	bic.w	r2, r2, #2
 8001e74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6899      	ldr	r1, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7e1b      	ldrb	r3, [r3, #24]
 8001e80:	005a      	lsls	r2, r3, #1
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	430a      	orrs	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01b      	beq.n	8001ecc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ea2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001eb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6859      	ldr	r1, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	035a      	lsls	r2, r3, #13
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	e007      	b.n	8001edc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	051a      	lsls	r2, r3, #20
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6899      	ldr	r1, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f1e:	025a      	lsls	r2, r3, #9
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689a      	ldr	r2, [r3, #8]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6899      	ldr	r1, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	029a      	lsls	r2, r3, #10
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	609a      	str	r2, [r3, #8]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	40012300 	.word	0x40012300
 8001f5c:	0f000001 	.word	0x0f000001

08001f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f92:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	60d3      	str	r3, [r2, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	f003 0307 	and.w	r3, r3, #7
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	db0b      	blt.n	8001fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	4907      	ldr	r1, [pc, #28]	; (8001ffc <__NVIC_EnableIRQ+0x38>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000e100 	.word	0xe000e100

08002000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	2b00      	cmp	r3, #0
 8002012:	db0a      	blt.n	800202a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	490c      	ldr	r1, [pc, #48]	; (800204c <__NVIC_SetPriority+0x4c>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	0112      	lsls	r2, r2, #4
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	440b      	add	r3, r1
 8002024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002028:	e00a      	b.n	8002040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	b2da      	uxtb	r2, r3
 800202e:	4908      	ldr	r1, [pc, #32]	; (8002050 <__NVIC_SetPriority+0x50>)
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	3b04      	subs	r3, #4
 8002038:	0112      	lsls	r2, r2, #4
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	440b      	add	r3, r1
 800203e:	761a      	strb	r2, [r3, #24]
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000e100 	.word	0xe000e100
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f1c3 0307 	rsb	r3, r3, #7
 800206e:	2b04      	cmp	r3, #4
 8002070:	bf28      	it	cs
 8002072:	2304      	movcs	r3, #4
 8002074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3304      	adds	r3, #4
 800207a:	2b06      	cmp	r3, #6
 800207c:	d902      	bls.n	8002084 <NVIC_EncodePriority+0x30>
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3b03      	subs	r3, #3
 8002082:	e000      	b.n	8002086 <NVIC_EncodePriority+0x32>
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	43da      	mvns	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	401a      	ands	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800209c:	f04f 31ff 	mov.w	r1, #4294967295
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	fa01 f303 	lsl.w	r3, r1, r3
 80020a6:	43d9      	mvns	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	4313      	orrs	r3, r2
         );
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3724      	adds	r7, #36	; 0x24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b082      	sub	sp, #8
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ff4c 	bl	8001f60 <__NVIC_SetPriorityGrouping>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e2:	f7ff ff61 	bl	8001fa8 <__NVIC_GetPriorityGrouping>
 80020e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	6978      	ldr	r0, [r7, #20]
 80020ee:	f7ff ffb1 	bl	8002054 <NVIC_EncodePriority>
 80020f2:	4602      	mov	r2, r0
 80020f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f8:	4611      	mov	r1, r2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff80 	bl	8002000 <__NVIC_SetPriority>
}
 8002100:	bf00      	nop
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff54 	bl	8001fc4 <__NVIC_EnableIRQ>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002142:	2b01      	cmp	r3, #1
 8002144:	d101      	bne.n	800214a <HAL_DMA_Start_IT+0x26>
 8002146:	2302      	movs	r3, #2
 8002148:	e040      	b.n	80021cc <HAL_DMA_Start_IT+0xa8>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d12f      	bne.n	80021be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2202      	movs	r2, #2
 8002162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	68b9      	ldr	r1, [r7, #8]
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 f82e 	bl	80021d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	223f      	movs	r2, #63	; 0x3f
 800217e:	409a      	lsls	r2, r3
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 0216 	orr.w	r2, r2, #22
 8002192:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0208 	orr.w	r2, r2, #8
 80021aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e005      	b.n	80021ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80021c6:	2302      	movs	r3, #2
 80021c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80021ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
 80021e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b40      	cmp	r3, #64	; 0x40
 8002200:	d108      	bne.n	8002214 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002212:	e007      	b.n	8002224 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	60da      	str	r2, [r3, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b089      	sub	sp, #36	; 0x24
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800223e:	2300      	movs	r3, #0
 8002240:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	e16b      	b.n	8002524 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800224c:	2201      	movs	r2, #1
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	4013      	ands	r3, r2
 800225e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	f040 815a 	bne.w	800251e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d00b      	beq.n	800228a <HAL_GPIO_Init+0x5a>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d007      	beq.n	800228a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800227e:	2b11      	cmp	r3, #17
 8002280:	d003      	beq.n	800228a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b12      	cmp	r3, #18
 8002288:	d130      	bne.n	80022ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4013      	ands	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68da      	ldr	r2, [r3, #12]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022c0:	2201      	movs	r2, #1
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 0201 	and.w	r2, r3, #1
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	2203      	movs	r2, #3
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b02      	cmp	r3, #2
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0xfc>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b12      	cmp	r3, #18
 800232a:	d123      	bne.n	8002374 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	08da      	lsrs	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3208      	adds	r2, #8
 8002334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	220f      	movs	r2, #15
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	08da      	lsrs	r2, r3, #3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3208      	adds	r2, #8
 800236e:	69b9      	ldr	r1, [r7, #24]
 8002370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	2203      	movs	r2, #3
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	43db      	mvns	r3, r3
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4013      	ands	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0203 	and.w	r2, r3, #3
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 80b4 	beq.w	800251e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	4b5f      	ldr	r3, [pc, #380]	; (8002538 <HAL_GPIO_Init+0x308>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023be:	4a5e      	ldr	r2, [pc, #376]	; (8002538 <HAL_GPIO_Init+0x308>)
 80023c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c4:	6453      	str	r3, [r2, #68]	; 0x44
 80023c6:	4b5c      	ldr	r3, [pc, #368]	; (8002538 <HAL_GPIO_Init+0x308>)
 80023c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023d2:	4a5a      	ldr	r2, [pc, #360]	; (800253c <HAL_GPIO_Init+0x30c>)
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	089b      	lsrs	r3, r3, #2
 80023d8:	3302      	adds	r3, #2
 80023da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	220f      	movs	r2, #15
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a51      	ldr	r2, [pc, #324]	; (8002540 <HAL_GPIO_Init+0x310>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d02b      	beq.n	8002456 <HAL_GPIO_Init+0x226>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a50      	ldr	r2, [pc, #320]	; (8002544 <HAL_GPIO_Init+0x314>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d025      	beq.n	8002452 <HAL_GPIO_Init+0x222>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4f      	ldr	r2, [pc, #316]	; (8002548 <HAL_GPIO_Init+0x318>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d01f      	beq.n	800244e <HAL_GPIO_Init+0x21e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a4e      	ldr	r2, [pc, #312]	; (800254c <HAL_GPIO_Init+0x31c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d019      	beq.n	800244a <HAL_GPIO_Init+0x21a>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a4d      	ldr	r2, [pc, #308]	; (8002550 <HAL_GPIO_Init+0x320>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d013      	beq.n	8002446 <HAL_GPIO_Init+0x216>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a4c      	ldr	r2, [pc, #304]	; (8002554 <HAL_GPIO_Init+0x324>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d00d      	beq.n	8002442 <HAL_GPIO_Init+0x212>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a4b      	ldr	r2, [pc, #300]	; (8002558 <HAL_GPIO_Init+0x328>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d007      	beq.n	800243e <HAL_GPIO_Init+0x20e>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a4a      	ldr	r2, [pc, #296]	; (800255c <HAL_GPIO_Init+0x32c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d101      	bne.n	800243a <HAL_GPIO_Init+0x20a>
 8002436:	2307      	movs	r3, #7
 8002438:	e00e      	b.n	8002458 <HAL_GPIO_Init+0x228>
 800243a:	2308      	movs	r3, #8
 800243c:	e00c      	b.n	8002458 <HAL_GPIO_Init+0x228>
 800243e:	2306      	movs	r3, #6
 8002440:	e00a      	b.n	8002458 <HAL_GPIO_Init+0x228>
 8002442:	2305      	movs	r3, #5
 8002444:	e008      	b.n	8002458 <HAL_GPIO_Init+0x228>
 8002446:	2304      	movs	r3, #4
 8002448:	e006      	b.n	8002458 <HAL_GPIO_Init+0x228>
 800244a:	2303      	movs	r3, #3
 800244c:	e004      	b.n	8002458 <HAL_GPIO_Init+0x228>
 800244e:	2302      	movs	r3, #2
 8002450:	e002      	b.n	8002458 <HAL_GPIO_Init+0x228>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_GPIO_Init+0x228>
 8002456:	2300      	movs	r3, #0
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	f002 0203 	and.w	r2, r2, #3
 800245e:	0092      	lsls	r2, r2, #2
 8002460:	4093      	lsls	r3, r2
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002468:	4934      	ldr	r1, [pc, #208]	; (800253c <HAL_GPIO_Init+0x30c>)
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002476:	4b3a      	ldr	r3, [pc, #232]	; (8002560 <HAL_GPIO_Init+0x330>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800249a:	4a31      	ldr	r2, [pc, #196]	; (8002560 <HAL_GPIO_Init+0x330>)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024a0:	4b2f      	ldr	r3, [pc, #188]	; (8002560 <HAL_GPIO_Init+0x330>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c4:	4a26      	ldr	r2, [pc, #152]	; (8002560 <HAL_GPIO_Init+0x330>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ca:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_GPIO_Init+0x330>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4013      	ands	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ee:	4a1c      	ldr	r2, [pc, #112]	; (8002560 <HAL_GPIO_Init+0x330>)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <HAL_GPIO_Init+0x330>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002518:	4a11      	ldr	r2, [pc, #68]	; (8002560 <HAL_GPIO_Init+0x330>)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3301      	adds	r3, #1
 8002522:	61fb      	str	r3, [r7, #28]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b0f      	cmp	r3, #15
 8002528:	f67f ae90 	bls.w	800224c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800252c:	bf00      	nop
 800252e:	3724      	adds	r7, #36	; 0x24
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	40023800 	.word	0x40023800
 800253c:	40013800 	.word	0x40013800
 8002540:	40020000 	.word	0x40020000
 8002544:	40020400 	.word	0x40020400
 8002548:	40020800 	.word	0x40020800
 800254c:	40020c00 	.word	0x40020c00
 8002550:	40021000 	.word	0x40021000
 8002554:	40021400 	.word	0x40021400
 8002558:	40021800 	.word	0x40021800
 800255c:	40021c00 	.word	0x40021c00
 8002560:	40013c00 	.word	0x40013c00

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002580:	e003      	b.n	800258a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	041a      	lsls	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	619a      	str	r2, [r3, #24]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e11f      	b.n	80027ea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d106      	bne.n	80025c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7fe fe22 	bl	8001208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2224      	movs	r2, #36	; 0x24
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025fc:	f001 fc6e 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 8002600:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4a7b      	ldr	r2, [pc, #492]	; (80027f4 <HAL_I2C_Init+0x25c>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d807      	bhi.n	800261c <HAL_I2C_Init+0x84>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4a7a      	ldr	r2, [pc, #488]	; (80027f8 <HAL_I2C_Init+0x260>)
 8002610:	4293      	cmp	r3, r2
 8002612:	bf94      	ite	ls
 8002614:	2301      	movls	r3, #1
 8002616:	2300      	movhi	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	e006      	b.n	800262a <HAL_I2C_Init+0x92>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4a77      	ldr	r2, [pc, #476]	; (80027fc <HAL_I2C_Init+0x264>)
 8002620:	4293      	cmp	r3, r2
 8002622:	bf94      	ite	ls
 8002624:	2301      	movls	r3, #1
 8002626:	2300      	movhi	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e0db      	b.n	80027ea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4a72      	ldr	r2, [pc, #456]	; (8002800 <HAL_I2C_Init+0x268>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	0c9b      	lsrs	r3, r3, #18
 800263c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	430a      	orrs	r2, r1
 8002650:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a64      	ldr	r2, [pc, #400]	; (80027f4 <HAL_I2C_Init+0x25c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d802      	bhi.n	800266c <HAL_I2C_Init+0xd4>
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	3301      	adds	r3, #1
 800266a:	e009      	b.n	8002680 <HAL_I2C_Init+0xe8>
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	4a63      	ldr	r2, [pc, #396]	; (8002804 <HAL_I2C_Init+0x26c>)
 8002678:	fba2 2303 	umull	r2, r3, r2, r3
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	3301      	adds	r3, #1
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	430b      	orrs	r3, r1
 8002686:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002692:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4956      	ldr	r1, [pc, #344]	; (80027f4 <HAL_I2C_Init+0x25c>)
 800269c:	428b      	cmp	r3, r1
 800269e:	d80d      	bhi.n	80026bc <HAL_I2C_Init+0x124>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	1e59      	subs	r1, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ae:	3301      	adds	r3, #1
 80026b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	bf38      	it	cc
 80026b8:	2304      	movcc	r3, #4
 80026ba:	e04f      	b.n	800275c <HAL_I2C_Init+0x1c4>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d111      	bne.n	80026e8 <HAL_I2C_Init+0x150>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1e58      	subs	r0, r3, #1
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6859      	ldr	r1, [r3, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	440b      	add	r3, r1
 80026d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d6:	3301      	adds	r3, #1
 80026d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e012      	b.n	800270e <HAL_I2C_Init+0x176>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1e58      	subs	r0, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	0099      	lsls	r1, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fe:	3301      	adds	r3, #1
 8002700:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_I2C_Init+0x17e>
 8002712:	2301      	movs	r3, #1
 8002714:	e022      	b.n	800275c <HAL_I2C_Init+0x1c4>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10e      	bne.n	800273c <HAL_I2C_Init+0x1a4>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1e58      	subs	r0, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	440b      	add	r3, r1
 800272c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002730:	3301      	adds	r3, #1
 8002732:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800273a:	e00f      	b.n	800275c <HAL_I2C_Init+0x1c4>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1e58      	subs	r0, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	0099      	lsls	r1, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002752:	3301      	adds	r3, #1
 8002754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002758:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	6809      	ldr	r1, [r1, #0]
 8002760:	4313      	orrs	r3, r2
 8002762:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800278a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6911      	ldr	r1, [r2, #16]
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68d2      	ldr	r2, [r2, #12]
 8002796:	4311      	orrs	r1, r2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	430b      	orrs	r3, r1
 800279e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	430a      	orrs	r2, r1
 80027ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 0201 	orr.w	r2, r2, #1
 80027ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2220      	movs	r2, #32
 80027d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	000186a0 	.word	0x000186a0
 80027f8:	001e847f 	.word	0x001e847f
 80027fc:	003d08ff 	.word	0x003d08ff
 8002800:	431bde83 	.word	0x431bde83
 8002804:	10624dd3 	.word	0x10624dd3

08002808 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800280a:	b08f      	sub	sp, #60	; 0x3c
 800280c:	af0a      	add	r7, sp, #40	; 0x28
 800280e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e10f      	b.n	8002a3a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d106      	bne.n	800283a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fe ffa5 	bl	8001784 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2203      	movs	r2, #3
 800283e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f003 f9ad 	bl	8005bb8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	687e      	ldr	r6, [r7, #4]
 8002866:	466d      	mov	r5, sp
 8002868:	f106 0410 	add.w	r4, r6, #16
 800286c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800286e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002874:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002878:	e885 0003 	stmia.w	r5, {r0, r1}
 800287c:	1d33      	adds	r3, r6, #4
 800287e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002880:	6838      	ldr	r0, [r7, #0]
 8002882:	f003 f895 	bl	80059b0 <USB_CoreInit>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0d0      	b.n	8002a3a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 f99b 	bl	8005bda <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e04a      	b.n	8002940 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	333d      	adds	r3, #61	; 0x3d
 80028ba:	2201      	movs	r2, #1
 80028bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	333c      	adds	r3, #60	; 0x3c
 80028ce:	7bfa      	ldrb	r2, [r7, #15]
 80028d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	7bfb      	ldrb	r3, [r7, #15]
 80028d6:	b298      	uxth	r0, r3
 80028d8:	6879      	ldr	r1, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	1a9b      	subs	r3, r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	440b      	add	r3, r1
 80028e4:	3342      	adds	r3, #66	; 0x42
 80028e6:	4602      	mov	r2, r0
 80028e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028ea:	7bfa      	ldrb	r2, [r7, #15]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	333f      	adds	r3, #63	; 0x3f
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028fe:	7bfa      	ldrb	r2, [r7, #15]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	3344      	adds	r3, #68	; 0x44
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002912:	7bfa      	ldrb	r2, [r7, #15]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	3348      	adds	r3, #72	; 0x48
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002926:	7bfa      	ldrb	r2, [r7, #15]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	3350      	adds	r3, #80	; 0x50
 8002936:	2200      	movs	r2, #0
 8002938:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	3301      	adds	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	429a      	cmp	r2, r3
 8002948:	d3af      	bcc.n	80028aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800294a:	2300      	movs	r3, #0
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	e044      	b.n	80029da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002950:	7bfa      	ldrb	r2, [r7, #15]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002962:	2200      	movs	r2, #0
 8002964:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002966:	7bfa      	ldrb	r2, [r7, #15]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002978:	7bfa      	ldrb	r2, [r7, #15]
 800297a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800297c:	7bfa      	ldrb	r2, [r7, #15]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800298e:	2200      	movs	r2, #0
 8002990:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	3301      	adds	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d3b5      	bcc.n	8002950 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	687e      	ldr	r6, [r7, #4]
 80029ec:	466d      	mov	r5, sp
 80029ee:	f106 0410 	add.w	r4, r6, #16
 80029f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a02:	1d33      	adds	r3, r6, #4
 8002a04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a06:	6838      	ldr	r0, [r7, #0]
 8002a08:	f003 f912 	bl	8005c30 <USB_DevInit>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2202      	movs	r2, #2
 8002a16:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00d      	b.n	8002a3a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f003 fb44 	bl	80060c0 <USB_DevDisconnect>

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a42 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a42:	b590      	push	{r4, r7, lr}
 8002a44:	b08d      	sub	sp, #52	; 0x34
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f003 fbe5 	bl	8006228 <USB_GetMode>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f040 839d 	bne.w	80031a0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f003 fb49 	bl	8006102 <USB_ReadInterrupts>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8393 	beq.w	800319e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f003 fb40 	bl	8006102 <USB_ReadInterrupts>
 8002a82:	4603      	mov	r3, r0
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d107      	bne.n	8002a9c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f002 0202 	and.w	r2, r2, #2
 8002a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f003 fb2e 	bl	8006102 <USB_ReadInterrupts>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f003 0310 	and.w	r3, r3, #16
 8002aac:	2b10      	cmp	r3, #16
 8002aae:	d161      	bne.n	8002b74 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699a      	ldr	r2, [r3, #24]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 0210 	bic.w	r2, r2, #16
 8002abe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	f003 020f 	and.w	r2, r3, #15
 8002acc:	4613      	mov	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	4413      	add	r3, r2
 8002adc:	3304      	adds	r3, #4
 8002ade:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	0c5b      	lsrs	r3, r3, #17
 8002ae4:	f003 030f 	and.w	r3, r3, #15
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d124      	bne.n	8002b36 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d035      	beq.n	8002b64 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	461a      	mov	r2, r3
 8002b0a:	6a38      	ldr	r0, [r7, #32]
 8002b0c:	f003 faaf 	bl	800606e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b1c:	441a      	add	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	091b      	lsrs	r3, r3, #4
 8002b2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b2e:	441a      	add	r2, r3
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	619a      	str	r2, [r3, #24]
 8002b34:	e016      	b.n	8002b64 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	0c5b      	lsrs	r3, r3, #17
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	2b06      	cmp	r3, #6
 8002b40:	d110      	bne.n	8002b64 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002b48:	2208      	movs	r2, #8
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6a38      	ldr	r0, [r7, #32]
 8002b4e:	f003 fa8e 	bl	800606e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b5e:	441a      	add	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	699a      	ldr	r2, [r3, #24]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f042 0210 	orr.w	r2, r2, #16
 8002b72:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f003 fac2 	bl	8006102 <USB_ReadInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b88:	d16e      	bne.n	8002c68 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f003 fac8 	bl	8006128 <USB_ReadDevAllOutEpInterrupt>
 8002b98:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b9a:	e062      	b.n	8002c62 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d057      	beq.n	8002c56 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f003 faed 	bl	8006190 <USB_ReadDevOutEPInterrupt>
 8002bb6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00c      	beq.n	8002bdc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002bd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fbe8 	bl	80033ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00c      	beq.n	8002c00 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fce2 	bl	80035c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f003 0310 	and.w	r3, r3, #16
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c16:	461a      	mov	r2, r3
 8002c18:	2310      	movs	r3, #16
 8002c1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	015a      	lsls	r2, r3, #5
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c32:	461a      	mov	r2, r3
 8002c34:	2320      	movs	r3, #32
 8002c36:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c4e:	461a      	mov	r2, r3
 8002c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c54:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	3301      	adds	r3, #1
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	085b      	lsrs	r3, r3, #1
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d199      	bne.n	8002b9c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f003 fa48 	bl	8006102 <USB_ReadInterrupts>
 8002c72:	4603      	mov	r3, r0
 8002c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c7c:	f040 80c0 	bne.w	8002e00 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 fa69 	bl	800615c <USB_ReadDevAllInEpInterrupt>
 8002c8a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c90:	e0b2      	b.n	8002df8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 80a7 	beq.w	8002dec <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f003 fa8f 	bl	80061cc <USB_ReadDevInEPInterrupt>
 8002cae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d057      	beq.n	8002d6a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69f9      	ldr	r1, [r7, #28]
 8002cd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cda:	4013      	ands	r3, r2
 8002cdc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cea:	461a      	mov	r2, r3
 8002cec:	2301      	movs	r3, #1
 8002cee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d132      	bne.n	8002d5e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	3348      	adds	r3, #72	; 0x48
 8002d08:	6819      	ldr	r1, [r3, #0]
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4403      	add	r3, r0
 8002d18:	3344      	adds	r3, #68	; 0x44
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4419      	add	r1, r3
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d22:	4613      	mov	r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4403      	add	r3, r0
 8002d2c:	3348      	adds	r3, #72	; 0x48
 8002d2e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d113      	bne.n	8002d5e <HAL_PCD_IRQHandler+0x31c>
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	00db      	lsls	r3, r3, #3
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	3350      	adds	r3, #80	; 0x50
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d108      	bne.n	8002d5e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d56:	461a      	mov	r2, r3
 8002d58:	2101      	movs	r1, #1
 8002d5a:	f003 fa97 	bl	800628c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	4619      	mov	r1, r3
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fa2a 	bl	80031be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d008      	beq.n	8002d86 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d80:	461a      	mov	r2, r3
 8002d82:	2308      	movs	r3, #8
 8002d84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	2310      	movs	r3, #16
 8002da0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db8:	461a      	mov	r2, r3
 8002dba:	2340      	movs	r3, #64	; 0x40
 8002dbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002de4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 fa53 	bl	8003292 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	3301      	adds	r3, #1
 8002df0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	085b      	lsrs	r3, r3, #1
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f47f af49 	bne.w	8002c92 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f003 f97c 	bl	8006102 <USB_ReadInterrupts>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e14:	d122      	bne.n	8002e5c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	69fa      	ldr	r2, [r7, #28]
 8002e20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e24:	f023 0301 	bic.w	r3, r3, #1
 8002e28:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d108      	bne.n	8002e46 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fc06 	bl	8003650 <HAL_PCDEx_LPM_Callback>
 8002e44:	e002      	b.n	8002e4c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f9ed 	bl	8003226 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695a      	ldr	r2, [r3, #20]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f003 f94e 	bl	8006102 <USB_ReadInterrupts>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e70:	d112      	bne.n	8002e98 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d102      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f9c5 	bl	8003212 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002e96:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 f930 	bl	8006102 <USB_ReadInterrupts>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eac:	f040 80c7 	bne.w	800303e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	69fa      	ldr	r2, [r7, #28]
 8002eba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ebe:	f023 0301 	bic.w	r3, r3, #1
 8002ec2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2110      	movs	r1, #16
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f003 f814 	bl	8005ef8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed4:	e056      	b.n	8002f84 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ee8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eec:	015a      	lsls	r2, r3, #5
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002efa:	0151      	lsls	r1, r2, #5
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	440a      	add	r2, r1
 8002f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f08:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f1a:	0151      	lsls	r1, r2, #5
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	440a      	add	r2, r1
 8002f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f28:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2c:	015a      	lsls	r2, r3, #5
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	4413      	add	r3, r2
 8002f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f36:	461a      	mov	r2, r3
 8002f38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f3c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	015a      	lsls	r2, r3, #5
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	4413      	add	r3, r2
 8002f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f4e:	0151      	lsls	r1, r2, #5
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	440a      	add	r2, r1
 8002f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f5c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f6e:	0151      	lsls	r1, r2, #5
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	440a      	add	r2, r1
 8002f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f7c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	3301      	adds	r3, #1
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d3a3      	bcc.n	8002ed6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f9c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002fa0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d016      	beq.n	8002fd8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fb4:	69fa      	ldr	r2, [r7, #28]
 8002fb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fba:	f043 030b 	orr.w	r3, r3, #11
 8002fbe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fd0:	f043 030b 	orr.w	r3, r3, #11
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	e015      	b.n	8003004 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	69fa      	ldr	r2, [r7, #28]
 8002fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fe6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002fee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ffe:	f043 030b 	orr.w	r3, r3, #11
 8003002:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69fa      	ldr	r2, [r7, #28]
 800300e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003012:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003016:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6818      	ldr	r0, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003028:	461a      	mov	r2, r3
 800302a:	f003 f92f 	bl	800628c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800303c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f003 f85d 	bl	8006102 <USB_ReadInterrupts>
 8003048:	4603      	mov	r3, r0
 800304a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800304e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003052:	d124      	bne.n	800309e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f003 f8f3 	bl	8006244 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f002 ffa9 	bl	8005fba <USB_GetDevSpeed>
 8003068:	4603      	mov	r3, r0
 800306a:	461a      	mov	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681c      	ldr	r4, [r3, #0]
 8003074:	f000 ff26 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 8003078:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800307e:	b2db      	uxtb	r3, r3
 8003080:	461a      	mov	r2, r3
 8003082:	4620      	mov	r0, r4
 8003084:	f002 fcf6 	bl	8005a74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f8b8 	bl	80031fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800309c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f003 f82d 	bl	8006102 <USB_ReadInterrupts>
 80030a8:	4603      	mov	r3, r0
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d10a      	bne.n	80030c8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f899 	bl	80031ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695a      	ldr	r2, [r3, #20]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f002 0208 	and.w	r2, r2, #8
 80030c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f003 f818 	bl	8006102 <USB_ReadInterrupts>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030dc:	d10f      	bne.n	80030fe <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	4619      	mov	r1, r3
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f8b2 	bl	8003252 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f002 fffd 	bl	8006102 <USB_ReadInterrupts>
 8003108:	4603      	mov	r3, r0
 800310a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800310e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003112:	d10f      	bne.n	8003134 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003114:	2300      	movs	r3, #0
 8003116:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	b2db      	uxtb	r3, r3
 800311c:	4619      	mov	r1, r3
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f88b 	bl	800323a <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003132:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f002 ffe2 	bl	8006102 <USB_ReadInterrupts>
 800313e:	4603      	mov	r3, r0
 8003140:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003148:	d10a      	bne.n	8003160 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f88d 	bl	800326a <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800315e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f002 ffcc 	bl	8006102 <USB_ReadInterrupts>
 800316a:	4603      	mov	r3, r0
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b04      	cmp	r3, #4
 8003172:	d115      	bne.n	80031a0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	f003 0304 	and.w	r3, r3, #4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f879 	bl	800327e <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69ba      	ldr	r2, [r7, #24]
 8003198:	430a      	orrs	r2, r1
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	e000      	b.n	80031a0 <HAL_PCD_IRQHandler+0x75e>
      return;
 800319e:	bf00      	nop
    }
  }
}
 80031a0:	3734      	adds	r7, #52	; 0x34
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd90      	pop	{r4, r7, pc}

080031a6 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	460b      	mov	r3, r1
 80031b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 80031ca:	bf00      	nop
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr

080031ea <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800323a:	b480      	push	{r7}
 800323c:	b083      	sub	sp, #12
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
 8003242:	460b      	mov	r3, r1
 8003244:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	460b      	mov	r3, r1
 800325c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b08a      	sub	sp, #40	; 0x28
 8003296:	af02      	add	r7, sp, #8
 8003298:	6078      	str	r0, [r7, #4]
 800329a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	3338      	adds	r3, #56	; 0x38
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	3304      	adds	r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	699a      	ldr	r2, [r3, #24]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d901      	bls.n	80032ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e06c      	b.n	80033a4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	69fa      	ldr	r2, [r7, #28]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d902      	bls.n	80032e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3303      	adds	r3, #3
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032ee:	e02b      	b.n	8003348 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	695a      	ldr	r2, [r3, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	429a      	cmp	r2, r3
 8003304:	d902      	bls.n	800330c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	3303      	adds	r3, #3
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	68d9      	ldr	r1, [r3, #12]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	b2da      	uxtb	r2, r3
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003324:	b2db      	uxtb	r3, r3
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	4603      	mov	r3, r0
 800332a:	6978      	ldr	r0, [r7, #20]
 800332c:	f002 fe6a 	bl	8006004 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	441a      	add	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	699a      	ldr	r2, [r3, #24]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	441a      	add	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	b29b      	uxth	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	429a      	cmp	r2, r3
 800335c:	d809      	bhi.n	8003372 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003366:	429a      	cmp	r2, r3
 8003368:	d203      	bcs.n	8003372 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1be      	bne.n	80032f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	429a      	cmp	r2, r3
 800337c:	d811      	bhi.n	80033a2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	f003 030f 	and.w	r3, r3, #15
 8003384:	2201      	movs	r2, #1
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003392:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	43db      	mvns	r3, r3
 8003398:	6939      	ldr	r1, [r7, #16]
 800339a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800339e:	4013      	ands	r3, r2
 80033a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3720      	adds	r7, #32
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	333c      	adds	r3, #60	; 0x3c
 80033c4:	3304      	adds	r3, #4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	f040 80a0 	bne.w	8003524 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d015      	beq.n	800341a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	4a72      	ldr	r2, [pc, #456]	; (80035bc <PCD_EP_OutXfrComplete_int+0x210>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	f240 80dd 	bls.w	80035b2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80d7 	beq.w	80035b2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4413      	add	r3, r2
 800340c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003410:	461a      	mov	r2, r3
 8003412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003416:	6093      	str	r3, [r2, #8]
 8003418:	e0cb      	b.n	80035b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	2b00      	cmp	r3, #0
 8003422:	d009      	beq.n	8003438 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003430:	461a      	mov	r2, r3
 8003432:	2320      	movs	r3, #32
 8003434:	6093      	str	r3, [r2, #8]
 8003436:	e0bc      	b.n	80035b2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800343e:	2b00      	cmp	r3, #0
 8003440:	f040 80b7 	bne.w	80035b2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4a5d      	ldr	r2, [pc, #372]	; (80035bc <PCD_EP_OutXfrComplete_int+0x210>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d90f      	bls.n	800346c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	461a      	mov	r2, r3
 8003464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003468:	6093      	str	r3, [r2, #8]
 800346a:	e0a2      	b.n	80035b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	4613      	mov	r3, r2
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	1a9b      	subs	r3, r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800347e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	0159      	lsls	r1, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	440b      	add	r3, r1
 8003488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003492:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4403      	add	r3, r0
 80034a2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80034a6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034ba:	6819      	ldr	r1, [r3, #0]
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4403      	add	r3, r0
 80034ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4419      	add	r1, r3
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4403      	add	r3, r0
 80034e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80034e4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d114      	bne.n	8003516 <PCD_EP_OutXfrComplete_int+0x16a>
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	4613      	mov	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	1a9b      	subs	r3, r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d108      	bne.n	8003516 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800350e:	461a      	mov	r2, r3
 8003510:	2101      	movs	r1, #1
 8003512:	f002 febb 	bl	800628c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	4619      	mov	r1, r3
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff fe42 	bl	80031a6 <HAL_PCD_DataOutStageCallback>
 8003522:	e046      	b.n	80035b2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a26      	ldr	r2, [pc, #152]	; (80035c0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d124      	bne.n	8003576 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	015a      	lsls	r2, r3, #5
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	4413      	add	r3, r2
 800353e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003542:	461a      	mov	r2, r3
 8003544:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003548:	6093      	str	r3, [r2, #8]
 800354a:	e032      	b.n	80035b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003562:	461a      	mov	r2, r3
 8003564:	2320      	movs	r3, #32
 8003566:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff fe19 	bl	80031a6 <HAL_PCD_DataOutStageCallback>
 8003574:	e01d      	b.n	80035b2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d114      	bne.n	80035a6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d108      	bne.n	80035a6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800359e:	461a      	mov	r2, r3
 80035a0:	2100      	movs	r1, #0
 80035a2:	f002 fe73 	bl	800628c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	4619      	mov	r1, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7ff fdfa 	bl	80031a6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	4f54300a 	.word	0x4f54300a
 80035c0:	4f54310a 	.word	0x4f54310a

080035c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	333c      	adds	r3, #60	; 0x3c
 80035dc:	3304      	adds	r3, #4
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4a15      	ldr	r2, [pc, #84]	; (800364c <PCD_EP_OutSetupPacket_int+0x88>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d90e      	bls.n	8003618 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003600:	2b00      	cmp	r3, #0
 8003602:	d009      	beq.n	8003618 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003610:	461a      	mov	r2, r3
 8003612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003616:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff fddc 	bl	80031d6 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4a0a      	ldr	r2, [pc, #40]	; (800364c <PCD_EP_OutSetupPacket_int+0x88>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d90c      	bls.n	8003640 <PCD_EP_OutSetupPacket_int+0x7c>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d108      	bne.n	8003640 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003638:	461a      	mov	r2, r3
 800363a:	2101      	movs	r1, #1
 800363c:	f002 fe26 	bl	800628c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	4f54300a 	.word	0x4f54300a

08003650 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	460b      	mov	r3, r1
 800365a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e25b      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d075      	beq.n	8003772 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003686:	4ba3      	ldr	r3, [pc, #652]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f003 030c 	and.w	r3, r3, #12
 800368e:	2b04      	cmp	r3, #4
 8003690:	d00c      	beq.n	80036ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003692:	4ba0      	ldr	r3, [pc, #640]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800369a:	2b08      	cmp	r3, #8
 800369c:	d112      	bne.n	80036c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369e:	4b9d      	ldr	r3, [pc, #628]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036aa:	d10b      	bne.n	80036c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ac:	4b99      	ldr	r3, [pc, #612]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d05b      	beq.n	8003770 <HAL_RCC_OscConfig+0x108>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d157      	bne.n	8003770 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e236      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036cc:	d106      	bne.n	80036dc <HAL_RCC_OscConfig+0x74>
 80036ce:	4b91      	ldr	r3, [pc, #580]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a90      	ldr	r2, [pc, #576]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80036d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	e01d      	b.n	8003718 <HAL_RCC_OscConfig+0xb0>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036e4:	d10c      	bne.n	8003700 <HAL_RCC_OscConfig+0x98>
 80036e6:	4b8b      	ldr	r3, [pc, #556]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a8a      	ldr	r2, [pc, #552]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80036ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	4b88      	ldr	r3, [pc, #544]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a87      	ldr	r2, [pc, #540]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	e00b      	b.n	8003718 <HAL_RCC_OscConfig+0xb0>
 8003700:	4b84      	ldr	r3, [pc, #528]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a83      	ldr	r2, [pc, #524]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 8003706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370a:	6013      	str	r3, [r2, #0]
 800370c:	4b81      	ldr	r3, [pc, #516]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a80      	ldr	r2, [pc, #512]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 8003712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d013      	beq.n	8003748 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003720:	f7fe f98e 	bl	8001a40 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003728:	f7fe f98a 	bl	8001a40 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b64      	cmp	r3, #100	; 0x64
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e1fb      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4b76      	ldr	r3, [pc, #472]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0xc0>
 8003746:	e014      	b.n	8003772 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7fe f97a 	bl	8001a40 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003750:	f7fe f976 	bl	8001a40 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b64      	cmp	r3, #100	; 0x64
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e1e7      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	4b6c      	ldr	r3, [pc, #432]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0xe8>
 800376e:	e000      	b.n	8003772 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d063      	beq.n	8003846 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800377e:	4b65      	ldr	r3, [pc, #404]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800378a:	4b62      	ldr	r3, [pc, #392]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003792:	2b08      	cmp	r3, #8
 8003794:	d11c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003796:	4b5f      	ldr	r3, [pc, #380]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d116      	bne.n	80037d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a2:	4b5c      	ldr	r3, [pc, #368]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <HAL_RCC_OscConfig+0x152>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d001      	beq.n	80037ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e1bb      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ba:	4b56      	ldr	r3, [pc, #344]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4952      	ldr	r1, [pc, #328]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ce:	e03a      	b.n	8003846 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d8:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <HAL_RCC_OscConfig+0x2b0>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037de:	f7fe f92f 	bl	8001a40 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037e6:	f7fe f92b 	bl	8001a40 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e19c      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	4b46      	ldr	r3, [pc, #280]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003804:	4b43      	ldr	r3, [pc, #268]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4940      	ldr	r1, [pc, #256]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
 8003818:	e015      	b.n	8003846 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800381a:	4b3f      	ldr	r3, [pc, #252]	; (8003918 <HAL_RCC_OscConfig+0x2b0>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7fe f90e 	bl	8001a40 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003828:	f7fe f90a 	bl	8001a40 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e17b      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	4b36      	ldr	r3, [pc, #216]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d030      	beq.n	80038b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d016      	beq.n	8003888 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385a:	4b30      	ldr	r3, [pc, #192]	; (800391c <HAL_RCC_OscConfig+0x2b4>)
 800385c:	2201      	movs	r2, #1
 800385e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003860:	f7fe f8ee 	bl	8001a40 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003868:	f7fe f8ea 	bl	8001a40 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e15b      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	4b26      	ldr	r3, [pc, #152]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 800387c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x200>
 8003886:	e015      	b.n	80038b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003888:	4b24      	ldr	r3, [pc, #144]	; (800391c <HAL_RCC_OscConfig+0x2b4>)
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800388e:	f7fe f8d7 	bl	8001a40 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003896:	f7fe f8d3 	bl	8001a40 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e144      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a8:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80038aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1f0      	bne.n	8003896 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f000 80a0 	beq.w	8003a02 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038c2:	2300      	movs	r3, #0
 80038c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038c6:	4b13      	ldr	r3, [pc, #76]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10f      	bne.n	80038f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	4a0e      	ldr	r2, [pc, #56]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80038dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e0:	6413      	str	r3, [r2, #64]	; 0x40
 80038e2:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <HAL_RCC_OscConfig+0x2ac>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ea:	60bb      	str	r3, [r7, #8]
 80038ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ee:	2301      	movs	r3, #1
 80038f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f2:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_RCC_OscConfig+0x2b8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d121      	bne.n	8003942 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038fe:	4b08      	ldr	r3, [pc, #32]	; (8003920 <HAL_RCC_OscConfig+0x2b8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a07      	ldr	r2, [pc, #28]	; (8003920 <HAL_RCC_OscConfig+0x2b8>)
 8003904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003908:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800390a:	f7fe f899 	bl	8001a40 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003910:	e011      	b.n	8003936 <HAL_RCC_OscConfig+0x2ce>
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800
 8003918:	42470000 	.word	0x42470000
 800391c:	42470e80 	.word	0x42470e80
 8003920:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003924:	f7fe f88c 	bl	8001a40 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e0fd      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003936:	4b81      	ldr	r3, [pc, #516]	; (8003b3c <HAL_RCC_OscConfig+0x4d4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d106      	bne.n	8003958 <HAL_RCC_OscConfig+0x2f0>
 800394a:	4b7d      	ldr	r3, [pc, #500]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a7c      	ldr	r2, [pc, #496]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6713      	str	r3, [r2, #112]	; 0x70
 8003956:	e01c      	b.n	8003992 <HAL_RCC_OscConfig+0x32a>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b05      	cmp	r3, #5
 800395e:	d10c      	bne.n	800397a <HAL_RCC_OscConfig+0x312>
 8003960:	4b77      	ldr	r3, [pc, #476]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	4a76      	ldr	r2, [pc, #472]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 8003966:	f043 0304 	orr.w	r3, r3, #4
 800396a:	6713      	str	r3, [r2, #112]	; 0x70
 800396c:	4b74      	ldr	r3, [pc, #464]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	4a73      	ldr	r2, [pc, #460]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6713      	str	r3, [r2, #112]	; 0x70
 8003978:	e00b      	b.n	8003992 <HAL_RCC_OscConfig+0x32a>
 800397a:	4b71      	ldr	r3, [pc, #452]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	4a70      	ldr	r2, [pc, #448]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 8003980:	f023 0301 	bic.w	r3, r3, #1
 8003984:	6713      	str	r3, [r2, #112]	; 0x70
 8003986:	4b6e      	ldr	r3, [pc, #440]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	4a6d      	ldr	r2, [pc, #436]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 800398c:	f023 0304 	bic.w	r3, r3, #4
 8003990:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d015      	beq.n	80039c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800399a:	f7fe f851 	bl	8001a40 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a0:	e00a      	b.n	80039b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a2:	f7fe f84d 	bl	8001a40 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e0bc      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b8:	4b61      	ldr	r3, [pc, #388]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 80039ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d0ee      	beq.n	80039a2 <HAL_RCC_OscConfig+0x33a>
 80039c4:	e014      	b.n	80039f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c6:	f7fe f83b 	bl	8001a40 <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039cc:	e00a      	b.n	80039e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ce:	f7fe f837 	bl	8001a40 <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039dc:	4293      	cmp	r3, r2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e0a6      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e4:	4b56      	ldr	r3, [pc, #344]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 80039e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d1ee      	bne.n	80039ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d105      	bne.n	8003a02 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f6:	4b52      	ldr	r3, [pc, #328]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	4a51      	ldr	r2, [pc, #324]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 80039fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8092 	beq.w	8003b30 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a0c:	4b4c      	ldr	r3, [pc, #304]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d05c      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d141      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a20:	4b48      	ldr	r3, [pc, #288]	; (8003b44 <HAL_RCC_OscConfig+0x4dc>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a26:	f7fe f80b 	bl	8001a40 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2e:	f7fe f807 	bl	8001a40 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e078      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a40:	4b3f      	ldr	r3, [pc, #252]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f0      	bne.n	8003a2e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	431a      	orrs	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	019b      	lsls	r3, r3, #6
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	3b01      	subs	r3, #1
 8003a66:	041b      	lsls	r3, r3, #16
 8003a68:	431a      	orrs	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	061b      	lsls	r3, r3, #24
 8003a70:	4933      	ldr	r1, [pc, #204]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a76:	4b33      	ldr	r3, [pc, #204]	; (8003b44 <HAL_RCC_OscConfig+0x4dc>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fd ffe0 	bl	8001a40 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fd ffdc 	bl	8001a40 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e04d      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a96:	4b2a      	ldr	r3, [pc, #168]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d0f0      	beq.n	8003a84 <HAL_RCC_OscConfig+0x41c>
 8003aa2:	e045      	b.n	8003b30 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aa4:	4b27      	ldr	r3, [pc, #156]	; (8003b44 <HAL_RCC_OscConfig+0x4dc>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aaa:	f7fd ffc9 	bl	8001a40 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab2:	f7fd ffc5 	bl	8001a40 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e036      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac4:	4b1e      	ldr	r3, [pc, #120]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1f0      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x44a>
 8003ad0:	e02e      	b.n	8003b30 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e029      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ade:	4b18      	ldr	r3, [pc, #96]	; (8003b40 <HAL_RCC_OscConfig+0x4d8>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d11c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d115      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b06:	4013      	ands	r3, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d10d      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d106      	bne.n	8003b2c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40007000 	.word	0x40007000
 8003b40:	40023800 	.word	0x40023800
 8003b44:	42470060 	.word	0x42470060

08003b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e0cc      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b5c:	4b68      	ldr	r3, [pc, #416]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d90c      	bls.n	8003b84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6a:	4b65      	ldr	r3, [pc, #404]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b72:	4b63      	ldr	r3, [pc, #396]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	683a      	ldr	r2, [r7, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0b8      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d020      	beq.n	8003bd2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b9c:	4b59      	ldr	r3, [pc, #356]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	4a58      	ldr	r2, [pc, #352]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ba6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0308 	and.w	r3, r3, #8
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bb4:	4b53      	ldr	r3, [pc, #332]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	4a52      	ldr	r2, [pc, #328]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bbe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bc0:	4b50      	ldr	r3, [pc, #320]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	494d      	ldr	r1, [pc, #308]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d044      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d107      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d119      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e07f      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c02:	2b03      	cmp	r3, #3
 8003c04:	d107      	bne.n	8003c16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c06:	4b3f      	ldr	r3, [pc, #252]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e06f      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c16:	4b3b      	ldr	r3, [pc, #236]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e067      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c26:	4b37      	ldr	r3, [pc, #220]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f023 0203 	bic.w	r2, r3, #3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	4934      	ldr	r1, [pc, #208]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c38:	f7fd ff02 	bl	8001a40 <HAL_GetTick>
 8003c3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c40:	f7fd fefe 	bl	8001a40 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e04f      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c56:	4b2b      	ldr	r3, [pc, #172]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 020c 	and.w	r2, r3, #12
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d1eb      	bne.n	8003c40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c68:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d20c      	bcs.n	8003c90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c76:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c7e:	4b20      	ldr	r3, [pc, #128]	; (8003d00 <HAL_RCC_ClockConfig+0x1b8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e032      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c9c:	4b19      	ldr	r3, [pc, #100]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4916      	ldr	r1, [pc, #88]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cba:	4b12      	ldr	r3, [pc, #72]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	490e      	ldr	r1, [pc, #56]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cce:	f000 f821 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003cd2:	4601      	mov	r1, r0
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	; (8003d04 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	4a0a      	ldr	r2, [pc, #40]	; (8003d08 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce0:	5cd3      	ldrb	r3, [r2, r3]
 8003ce2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ce6:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <HAL_RCC_ClockConfig+0x1c4>)
 8003ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003cea:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_RCC_ClockConfig+0x1c8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fd fdaa 	bl	8001848 <HAL_InitTick>

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	40023c00 	.word	0x40023c00
 8003d04:	40023800 	.word	0x40023800
 8003d08:	08009084 	.word	0x08009084
 8003d0c:	20000000 	.word	0x20000000
 8003d10:	20000004 	.word	0x20000004

08003d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	607b      	str	r3, [r7, #4]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	2300      	movs	r3, #0
 8003d24:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d2a:	4b63      	ldr	r3, [pc, #396]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d007      	beq.n	8003d46 <HAL_RCC_GetSysClockFreq+0x32>
 8003d36:	2b08      	cmp	r3, #8
 8003d38:	d008      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0x38>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f040 80b4 	bne.w	8003ea8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b5e      	ldr	r3, [pc, #376]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d42:	60bb      	str	r3, [r7, #8]
       break;
 8003d44:	e0b3      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d46:	4b5e      	ldr	r3, [pc, #376]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003d48:	60bb      	str	r3, [r7, #8]
      break;
 8003d4a:	e0b0      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d4c:	4b5a      	ldr	r3, [pc, #360]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d56:	4b58      	ldr	r3, [pc, #352]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d04a      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d62:	4b55      	ldr	r3, [pc, #340]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	099b      	lsrs	r3, r3, #6
 8003d68:	f04f 0400 	mov.w	r4, #0
 8003d6c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	ea03 0501 	and.w	r5, r3, r1
 8003d78:	ea04 0602 	and.w	r6, r4, r2
 8003d7c:	4629      	mov	r1, r5
 8003d7e:	4632      	mov	r2, r6
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	f04f 0400 	mov.w	r4, #0
 8003d88:	0154      	lsls	r4, r2, #5
 8003d8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d8e:	014b      	lsls	r3, r1, #5
 8003d90:	4619      	mov	r1, r3
 8003d92:	4622      	mov	r2, r4
 8003d94:	1b49      	subs	r1, r1, r5
 8003d96:	eb62 0206 	sbc.w	r2, r2, r6
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	f04f 0400 	mov.w	r4, #0
 8003da2:	0194      	lsls	r4, r2, #6
 8003da4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003da8:	018b      	lsls	r3, r1, #6
 8003daa:	1a5b      	subs	r3, r3, r1
 8003dac:	eb64 0402 	sbc.w	r4, r4, r2
 8003db0:	f04f 0100 	mov.w	r1, #0
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	00e2      	lsls	r2, r4, #3
 8003dba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dbe:	00d9      	lsls	r1, r3, #3
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4614      	mov	r4, r2
 8003dc4:	195b      	adds	r3, r3, r5
 8003dc6:	eb44 0406 	adc.w	r4, r4, r6
 8003dca:	f04f 0100 	mov.w	r1, #0
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	0262      	lsls	r2, r4, #9
 8003dd4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003dd8:	0259      	lsls	r1, r3, #9
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4614      	mov	r4, r2
 8003dde:	4618      	mov	r0, r3
 8003de0:	4621      	mov	r1, r4
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f04f 0400 	mov.w	r4, #0
 8003de8:	461a      	mov	r2, r3
 8003dea:	4623      	mov	r3, r4
 8003dec:	f7fc f9f8 	bl	80001e0 <__aeabi_uldivmod>
 8003df0:	4603      	mov	r3, r0
 8003df2:	460c      	mov	r4, r1
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	e049      	b.n	8003e8c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003df8:	4b2f      	ldr	r3, [pc, #188]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	099b      	lsrs	r3, r3, #6
 8003dfe:	f04f 0400 	mov.w	r4, #0
 8003e02:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e06:	f04f 0200 	mov.w	r2, #0
 8003e0a:	ea03 0501 	and.w	r5, r3, r1
 8003e0e:	ea04 0602 	and.w	r6, r4, r2
 8003e12:	4629      	mov	r1, r5
 8003e14:	4632      	mov	r2, r6
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	f04f 0400 	mov.w	r4, #0
 8003e1e:	0154      	lsls	r4, r2, #5
 8003e20:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e24:	014b      	lsls	r3, r1, #5
 8003e26:	4619      	mov	r1, r3
 8003e28:	4622      	mov	r2, r4
 8003e2a:	1b49      	subs	r1, r1, r5
 8003e2c:	eb62 0206 	sbc.w	r2, r2, r6
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	f04f 0400 	mov.w	r4, #0
 8003e38:	0194      	lsls	r4, r2, #6
 8003e3a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e3e:	018b      	lsls	r3, r1, #6
 8003e40:	1a5b      	subs	r3, r3, r1
 8003e42:	eb64 0402 	sbc.w	r4, r4, r2
 8003e46:	f04f 0100 	mov.w	r1, #0
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	00e2      	lsls	r2, r4, #3
 8003e50:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e54:	00d9      	lsls	r1, r3, #3
 8003e56:	460b      	mov	r3, r1
 8003e58:	4614      	mov	r4, r2
 8003e5a:	195b      	adds	r3, r3, r5
 8003e5c:	eb44 0406 	adc.w	r4, r4, r6
 8003e60:	f04f 0100 	mov.w	r1, #0
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	02a2      	lsls	r2, r4, #10
 8003e6a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e6e:	0299      	lsls	r1, r3, #10
 8003e70:	460b      	mov	r3, r1
 8003e72:	4614      	mov	r4, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	4621      	mov	r1, r4
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f04f 0400 	mov.w	r4, #0
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4623      	mov	r3, r4
 8003e82:	f7fc f9ad 	bl	80001e0 <__aeabi_uldivmod>
 8003e86:	4603      	mov	r3, r0
 8003e88:	460c      	mov	r4, r1
 8003e8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e8c:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	3301      	adds	r3, #1
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea4:	60bb      	str	r3, [r7, #8]
      break;
 8003ea6:	e002      	b.n	8003eae <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea8:	4b04      	ldr	r3, [pc, #16]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003eaa:	60bb      	str	r3, [r7, #8]
      break;
 8003eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eae:	68bb      	ldr	r3, [r7, #8]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	00f42400 	.word	0x00f42400
 8003ec0:	007a1200 	.word	0x007a1200

08003ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec8:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eca:	681b      	ldr	r3, [r3, #0]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000000 	.word	0x20000000

08003edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ee0:	f7ff fff0 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 8003ee4:	4601      	mov	r1, r0
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0a9b      	lsrs	r3, r3, #10
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4a03      	ldr	r2, [pc, #12]	; (8003f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef2:	5cd3      	ldrb	r3, [r2, r3]
 8003ef4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40023800 	.word	0x40023800
 8003f00:	08009094 	.word	0x08009094

08003f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f08:	f7ff ffdc 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4601      	mov	r1, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0b5b      	lsrs	r3, r3, #13
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4a03      	ldr	r2, [pc, #12]	; (8003f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f1a:	5cd3      	ldrb	r3, [r2, r3]
 8003f1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800
 8003f28:	08009094 	.word	0x08009094

08003f2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	220f      	movs	r2, #15
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f3c:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <HAL_RCC_GetClockConfig+0x5c>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 0203 	and.w	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f48:	4b0f      	ldr	r3, [pc, #60]	; (8003f88 <HAL_RCC_GetClockConfig+0x5c>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <HAL_RCC_GetClockConfig+0x5c>)
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <HAL_RCC_GetClockConfig+0x5c>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	08db      	lsrs	r3, r3, #3
 8003f66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <HAL_RCC_GetClockConfig+0x60>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 020f 	and.w	r2, r3, #15
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	601a      	str	r2, [r3, #0]
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	40023c00 	.word	0x40023c00

08003f90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e056      	b.n	8004050 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d106      	bne.n	8003fc2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7fd f9a1 	bl	8001304 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2202      	movs	r2, #2
 8003fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	431a      	orrs	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffe:	431a      	orrs	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	431a      	orrs	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	ea42 0103 	orr.w	r1, r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	0c1b      	lsrs	r3, r3, #16
 8004020:	f003 0104 	and.w	r1, r3, #4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69da      	ldr	r2, [r3, #28]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800403e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e01d      	b.n	80040a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fd f9f6 	bl	8001470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f000 fb06 	bl	80046a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0201 	orr.w	r2, r2, #1
 80040c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b06      	cmp	r3, #6
 80040d6:	d007      	beq.n	80040e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e01d      	b.n	8004144 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d106      	bne.n	8004122 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f7fd f9c7 	bl	80014b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2202      	movs	r2, #2
 8004126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3304      	adds	r3, #4
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f000 fab7 	bl	80046a8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b02      	cmp	r3, #2
 8004160:	d122      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b02      	cmp	r3, #2
 800416e:	d11b      	bne.n	80041a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0202 	mvn.w	r2, #2
 8004178:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fa6b 	bl	800466a <HAL_TIM_IC_CaptureCallback>
 8004194:	e005      	b.n	80041a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa5d 	bl	8004656 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fa6e 	bl	800467e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d122      	bne.n	80041fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d11b      	bne.n	80041fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0204 	mvn.w	r2, #4
 80041cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fa41 	bl	800466a <HAL_TIM_IC_CaptureCallback>
 80041e8:	e005      	b.n	80041f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fa33 	bl	8004656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 fa44 	bl	800467e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b08      	cmp	r3, #8
 8004208:	d122      	bne.n	8004250 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b08      	cmp	r3, #8
 8004216:	d11b      	bne.n	8004250 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0208 	mvn.w	r2, #8
 8004220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2204      	movs	r2, #4
 8004226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fa17 	bl	800466a <HAL_TIM_IC_CaptureCallback>
 800423c:	e005      	b.n	800424a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fa09 	bl	8004656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fa1a 	bl	800467e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0310 	and.w	r3, r3, #16
 800425a:	2b10      	cmp	r3, #16
 800425c:	d122      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b10      	cmp	r3, #16
 800426a:	d11b      	bne.n	80042a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0210 	mvn.w	r2, #16
 8004274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2208      	movs	r2, #8
 800427a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f9ed 	bl	800466a <HAL_TIM_IC_CaptureCallback>
 8004290:	e005      	b.n	800429e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f9df 	bl	8004656 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 f9f0 	bl	800467e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d10e      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d107      	bne.n	80042d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f06f 0201 	mvn.w	r2, #1
 80042c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fc ff38 	bl	8001140 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042da:	2b80      	cmp	r3, #128	; 0x80
 80042dc:	d10e      	bne.n	80042fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e8:	2b80      	cmp	r3, #128	; 0x80
 80042ea:	d107      	bne.n	80042fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fd46 	bl	8004d88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d10e      	bne.n	8004328 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004314:	2b40      	cmp	r3, #64	; 0x40
 8004316:	d107      	bne.n	8004328 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f9b5 	bl	8004692 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b20      	cmp	r3, #32
 8004334:	d10e      	bne.n	8004354 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b20      	cmp	r3, #32
 8004342:	d107      	bne.n	8004354 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f06f 0220 	mvn.w	r2, #32
 800434c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fd10 	bl	8004d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004354:	bf00      	nop
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004372:	2302      	movs	r3, #2
 8004374:	e0b4      	b.n	80044e0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2202      	movs	r2, #2
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b0c      	cmp	r3, #12
 800438a:	f200 809f 	bhi.w	80044cc <HAL_TIM_PWM_ConfigChannel+0x170>
 800438e:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	080043c9 	.word	0x080043c9
 8004398:	080044cd 	.word	0x080044cd
 800439c:	080044cd 	.word	0x080044cd
 80043a0:	080044cd 	.word	0x080044cd
 80043a4:	08004409 	.word	0x08004409
 80043a8:	080044cd 	.word	0x080044cd
 80043ac:	080044cd 	.word	0x080044cd
 80043b0:	080044cd 	.word	0x080044cd
 80043b4:	0800444b 	.word	0x0800444b
 80043b8:	080044cd 	.word	0x080044cd
 80043bc:	080044cd 	.word	0x080044cd
 80043c0:	080044cd 	.word	0x080044cd
 80043c4:	0800448b 	.word	0x0800448b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fa0a 	bl	80047e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0208 	orr.w	r2, r2, #8
 80043e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0204 	bic.w	r2, r2, #4
 80043f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6999      	ldr	r1, [r3, #24]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	691a      	ldr	r2, [r3, #16]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	619a      	str	r2, [r3, #24]
      break;
 8004406:	e062      	b.n	80044ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fa5a 	bl	80048c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6999      	ldr	r1, [r3, #24]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	021a      	lsls	r2, r3, #8
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	619a      	str	r2, [r3, #24]
      break;
 8004448:	e041      	b.n	80044ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	4618      	mov	r0, r3
 8004452:	f000 faaf 	bl	80049b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0208 	orr.w	r2, r2, #8
 8004464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0204 	bic.w	r2, r2, #4
 8004474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69d9      	ldr	r1, [r3, #28]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	61da      	str	r2, [r3, #28]
      break;
 8004488:	e021      	b.n	80044ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fb03 	bl	8004a9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69d9      	ldr	r1, [r3, #28]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	021a      	lsls	r2, r3, #8
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	61da      	str	r2, [r3, #28]
      break;
 80044ca:	e000      	b.n	80044ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80044cc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d101      	bne.n	8004500 <HAL_TIM_ConfigClockSource+0x18>
 80044fc:	2302      	movs	r3, #2
 80044fe:	e0a6      	b.n	800464e <HAL_TIM_ConfigClockSource+0x166>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800451e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004526:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b40      	cmp	r3, #64	; 0x40
 8004536:	d067      	beq.n	8004608 <HAL_TIM_ConfigClockSource+0x120>
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d80b      	bhi.n	8004554 <HAL_TIM_ConfigClockSource+0x6c>
 800453c:	2b10      	cmp	r3, #16
 800453e:	d073      	beq.n	8004628 <HAL_TIM_ConfigClockSource+0x140>
 8004540:	2b10      	cmp	r3, #16
 8004542:	d802      	bhi.n	800454a <HAL_TIM_ConfigClockSource+0x62>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d06f      	beq.n	8004628 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004548:	e078      	b.n	800463c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800454a:	2b20      	cmp	r3, #32
 800454c:	d06c      	beq.n	8004628 <HAL_TIM_ConfigClockSource+0x140>
 800454e:	2b30      	cmp	r3, #48	; 0x30
 8004550:	d06a      	beq.n	8004628 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004552:	e073      	b.n	800463c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004554:	2b70      	cmp	r3, #112	; 0x70
 8004556:	d00d      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0x8c>
 8004558:	2b70      	cmp	r3, #112	; 0x70
 800455a:	d804      	bhi.n	8004566 <HAL_TIM_ConfigClockSource+0x7e>
 800455c:	2b50      	cmp	r3, #80	; 0x50
 800455e:	d033      	beq.n	80045c8 <HAL_TIM_ConfigClockSource+0xe0>
 8004560:	2b60      	cmp	r3, #96	; 0x60
 8004562:	d041      	beq.n	80045e8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004564:	e06a      	b.n	800463c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456a:	d066      	beq.n	800463a <HAL_TIM_ConfigClockSource+0x152>
 800456c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004570:	d017      	beq.n	80045a2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004572:	e063      	b.n	800463c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6899      	ldr	r1, [r3, #8]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f000 fb5a 	bl	8004c3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004596:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	609a      	str	r2, [r3, #8]
      break;
 80045a0:	e04c      	b.n	800463c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6899      	ldr	r1, [r3, #8]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f000 fb43 	bl	8004c3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045c4:	609a      	str	r2, [r3, #8]
      break;
 80045c6:	e039      	b.n	800463c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	6859      	ldr	r1, [r3, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	461a      	mov	r2, r3
 80045d6:	f000 fab7 	bl	8004b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2150      	movs	r1, #80	; 0x50
 80045e0:	4618      	mov	r0, r3
 80045e2:	f000 fb10 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 80045e6:	e029      	b.n	800463c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	6859      	ldr	r1, [r3, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	461a      	mov	r2, r3
 80045f6:	f000 fad6 	bl	8004ba6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2160      	movs	r1, #96	; 0x60
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fb00 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 8004606:	e019      	b.n	800463c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6818      	ldr	r0, [r3, #0]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	6859      	ldr	r1, [r3, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	461a      	mov	r2, r3
 8004616:	f000 fa97 	bl	8004b48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2140      	movs	r1, #64	; 0x40
 8004620:	4618      	mov	r0, r3
 8004622:	f000 faf0 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 8004626:	e009      	b.n	800463c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4619      	mov	r1, r3
 8004632:	4610      	mov	r0, r2
 8004634:	f000 fae7 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 8004638:	e000      	b.n	800463c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800463a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
	...

080046a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a40      	ldr	r2, [pc, #256]	; (80047bc <TIM_Base_SetConfig+0x114>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d013      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c6:	d00f      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a3d      	ldr	r2, [pc, #244]	; (80047c0 <TIM_Base_SetConfig+0x118>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00b      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a3c      	ldr	r2, [pc, #240]	; (80047c4 <TIM_Base_SetConfig+0x11c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d007      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a3b      	ldr	r2, [pc, #236]	; (80047c8 <TIM_Base_SetConfig+0x120>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d003      	beq.n	80046e8 <TIM_Base_SetConfig+0x40>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a3a      	ldr	r2, [pc, #232]	; (80047cc <TIM_Base_SetConfig+0x124>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d108      	bne.n	80046fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a2f      	ldr	r2, [pc, #188]	; (80047bc <TIM_Base_SetConfig+0x114>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d02b      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004708:	d027      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <TIM_Base_SetConfig+0x118>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d023      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a2b      	ldr	r2, [pc, #172]	; (80047c4 <TIM_Base_SetConfig+0x11c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d01f      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a2a      	ldr	r2, [pc, #168]	; (80047c8 <TIM_Base_SetConfig+0x120>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d01b      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a29      	ldr	r2, [pc, #164]	; (80047cc <TIM_Base_SetConfig+0x124>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d017      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a28      	ldr	r2, [pc, #160]	; (80047d0 <TIM_Base_SetConfig+0x128>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a27      	ldr	r2, [pc, #156]	; (80047d4 <TIM_Base_SetConfig+0x12c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d00f      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a26      	ldr	r2, [pc, #152]	; (80047d8 <TIM_Base_SetConfig+0x130>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d00b      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a25      	ldr	r2, [pc, #148]	; (80047dc <TIM_Base_SetConfig+0x134>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d007      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a24      	ldr	r2, [pc, #144]	; (80047e0 <TIM_Base_SetConfig+0x138>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d003      	beq.n	800475a <TIM_Base_SetConfig+0xb2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a23      	ldr	r2, [pc, #140]	; (80047e4 <TIM_Base_SetConfig+0x13c>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d108      	bne.n	800476c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <TIM_Base_SetConfig+0x114>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d003      	beq.n	80047a0 <TIM_Base_SetConfig+0xf8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a0c      	ldr	r2, [pc, #48]	; (80047cc <TIM_Base_SetConfig+0x124>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d103      	bne.n	80047a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	615a      	str	r2, [r3, #20]
}
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	40010000 	.word	0x40010000
 80047c0:	40000400 	.word	0x40000400
 80047c4:	40000800 	.word	0x40000800
 80047c8:	40000c00 	.word	0x40000c00
 80047cc:	40010400 	.word	0x40010400
 80047d0:	40014000 	.word	0x40014000
 80047d4:	40014400 	.word	0x40014400
 80047d8:	40014800 	.word	0x40014800
 80047dc:	40001800 	.word	0x40001800
 80047e0:	40001c00 	.word	0x40001c00
 80047e4:	40002000 	.word	0x40002000

080047e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 0201 	bic.w	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f023 0303 	bic.w	r3, r3, #3
 800481e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f023 0302 	bic.w	r3, r3, #2
 8004830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a20      	ldr	r2, [pc, #128]	; (80048c0 <TIM_OC1_SetConfig+0xd8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <TIM_OC1_SetConfig+0x64>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <TIM_OC1_SetConfig+0xdc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d10c      	bne.n	8004866 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f023 0308 	bic.w	r3, r3, #8
 8004852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f023 0304 	bic.w	r3, r3, #4
 8004864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a15      	ldr	r2, [pc, #84]	; (80048c0 <TIM_OC1_SetConfig+0xd8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_OC1_SetConfig+0x8e>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a14      	ldr	r2, [pc, #80]	; (80048c4 <TIM_OC1_SetConfig+0xdc>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d111      	bne.n	800489a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800487c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004884:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	621a      	str	r2, [r3, #32]
}
 80048b4:	bf00      	nop
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40010400 	.word	0x40010400

080048c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f023 0210 	bic.w	r2, r3, #16
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	021b      	lsls	r3, r3, #8
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	4313      	orrs	r3, r2
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f023 0320 	bic.w	r3, r3, #32
 8004912:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a22      	ldr	r2, [pc, #136]	; (80049ac <TIM_OC2_SetConfig+0xe4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_OC2_SetConfig+0x68>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a21      	ldr	r2, [pc, #132]	; (80049b0 <TIM_OC2_SetConfig+0xe8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d10d      	bne.n	800494c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800494a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a17      	ldr	r2, [pc, #92]	; (80049ac <TIM_OC2_SetConfig+0xe4>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d003      	beq.n	800495c <TIM_OC2_SetConfig+0x94>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <TIM_OC2_SetConfig+0xe8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d113      	bne.n	8004984 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004962:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800496a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40010400 	.word	0x40010400

080049b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a21      	ldr	r2, [pc, #132]	; (8004a94 <TIM_OC3_SetConfig+0xe0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_OC3_SetConfig+0x66>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <TIM_OC3_SetConfig+0xe4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d10d      	bne.n	8004a36 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a16      	ldr	r2, [pc, #88]	; (8004a94 <TIM_OC3_SetConfig+0xe0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d003      	beq.n	8004a46 <TIM_OC3_SetConfig+0x92>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <TIM_OC3_SetConfig+0xe4>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d113      	bne.n	8004a6e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	011b      	lsls	r3, r3, #4
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	621a      	str	r2, [r3, #32]
}
 8004a88:	bf00      	nop
 8004a8a:	371c      	adds	r7, #28
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40010000 	.word	0x40010000
 8004a98:	40010400 	.word	0x40010400

08004a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b087      	sub	sp, #28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	69db      	ldr	r3, [r3, #28]
 8004ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	031b      	lsls	r3, r3, #12
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a12      	ldr	r2, [pc, #72]	; (8004b40 <TIM_OC4_SetConfig+0xa4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d003      	beq.n	8004b04 <TIM_OC4_SetConfig+0x68>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	4a11      	ldr	r2, [pc, #68]	; (8004b44 <TIM_OC4_SetConfig+0xa8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d109      	bne.n	8004b18 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	019b      	lsls	r3, r3, #6
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	693a      	ldr	r2, [r7, #16]
 8004b30:	621a      	str	r2, [r3, #32]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	40010000 	.word	0x40010000
 8004b44:	40010400 	.word	0x40010400

08004b48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b087      	sub	sp, #28
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f023 0201 	bic.w	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	011b      	lsls	r3, r3, #4
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f023 030a 	bic.w	r3, r3, #10
 8004b84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	621a      	str	r2, [r3, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	371c      	adds	r7, #28
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b087      	sub	sp, #28
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f023 0210 	bic.w	r2, r3, #16
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	031b      	lsls	r3, r3, #12
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004be2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	697a      	ldr	r2, [r7, #20]
 8004bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	621a      	str	r2, [r3, #32]
}
 8004bfa:	bf00      	nop
 8004bfc:	371c      	adds	r7, #28
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f043 0307 	orr.w	r3, r3, #7
 8004c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	609a      	str	r2, [r3, #8]
}
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
 8004c48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	021a      	lsls	r2, r3, #8
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	609a      	str	r2, [r3, #8]
}
 8004c70:	bf00      	nop
 8004c72:	371c      	adds	r7, #28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c90:	2302      	movs	r3, #2
 8004c92:	e05a      	b.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a21      	ldr	r2, [pc, #132]	; (8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d022      	beq.n	8004d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce0:	d01d      	beq.n	8004d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1d      	ldr	r2, [pc, #116]	; (8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d018      	beq.n	8004d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1b      	ldr	r2, [pc, #108]	; (8004d60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1a      	ldr	r2, [pc, #104]	; (8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00e      	beq.n	8004d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a18      	ldr	r2, [pc, #96]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d009      	beq.n	8004d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a17      	ldr	r2, [pc, #92]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d10c      	bne.n	8004d38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3714      	adds	r7, #20
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
 8004d56:	bf00      	nop
 8004d58:	40010000 	.word	0x40010000
 8004d5c:	40000400 	.word	0x40000400
 8004d60:	40000800 	.word	0x40000800
 8004d64:	40000c00 	.word	0x40000c00
 8004d68:	40010400 	.word	0x40010400
 8004d6c:	40014000 	.word	0x40014000
 8004d70:	40001800 	.word	0x40001800

08004d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e03f      	b.n	8004e2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fc fbf6 	bl	80015b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2224      	movs	r2, #36	; 0x24
 8004dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fa69 	bl	80052b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004df4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695a      	ldr	r2, [r3, #20]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b088      	sub	sp, #32
 8004e3a:	af02      	add	r7, sp, #8
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	603b      	str	r3, [r7, #0]
 8004e42:	4613      	mov	r3, r2
 8004e44:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004e46:	2300      	movs	r3, #0
 8004e48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	f040 8083 	bne.w	8004f5e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <HAL_UART_Transmit+0x2e>
 8004e5e:	88fb      	ldrh	r3, [r7, #6]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e07b      	b.n	8004f60 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Transmit+0x40>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e074      	b.n	8004f60 <HAL_UART_Transmit+0x12a>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2221      	movs	r2, #33	; 0x21
 8004e88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004e8c:	f7fc fdd8 	bl	8001a40 <HAL_GetTick>
 8004e90:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	88fa      	ldrh	r2, [r7, #6]
 8004e96:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	88fa      	ldrh	r2, [r7, #6]
 8004e9c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004ea6:	e042      	b.n	8004f2e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ebe:	d122      	bne.n	8004f06 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2180      	movs	r1, #128	; 0x80
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f976 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e042      	b.n	8004f60 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d103      	bne.n	8004efe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	3302      	adds	r3, #2
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	e017      	b.n	8004f2e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	3301      	adds	r3, #1
 8004f02:	60bb      	str	r3, [r7, #8]
 8004f04:	e013      	b.n	8004f2e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2180      	movs	r1, #128	; 0x80
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f953 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e01f      	b.n	8004f60 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	60ba      	str	r2, [r7, #8]
 8004f26:	781a      	ldrb	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1b7      	bne.n	8004ea8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2140      	movs	r1, #64	; 0x40
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f93a 	bl	80051bc <UART_WaitOnFlagUntilTimeout>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d001      	beq.n	8004f52 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e006      	b.n	8004f60 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e000      	b.n	8004f60 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004f5e:	2302      	movs	r3, #2
  }
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b20      	cmp	r3, #32
 8004f80:	d166      	bne.n	8005050 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <HAL_UART_Receive_DMA+0x26>
 8004f88:	88fb      	ldrh	r3, [r7, #6]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e05f      	b.n	8005052 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_UART_Receive_DMA+0x38>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e058      	b.n	8005052 <HAL_UART_Receive_DMA+0xea>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	88fa      	ldrh	r2, [r7, #6]
 8004fb2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2222      	movs	r2, #34	; 0x22
 8004fbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc6:	4a25      	ldr	r2, [pc, #148]	; (800505c <HAL_UART_Receive_DMA+0xf4>)
 8004fc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fce:	4a24      	ldr	r2, [pc, #144]	; (8005060 <HAL_UART_Receive_DMA+0xf8>)
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd6:	4a23      	ldr	r2, [pc, #140]	; (8005064 <HAL_UART_Receive_DMA+0xfc>)
 8004fd8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	2200      	movs	r2, #0
 8004fe0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004fe2:	f107 0308 	add.w	r3, r7, #8
 8004fe6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	88fb      	ldrh	r3, [r7, #6]
 8004ffa:	f7fd f893 	bl	8002124 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004ffe:	2300      	movs	r3, #0
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800502a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695a      	ldr	r2, [r3, #20]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800504a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800504c:	2300      	movs	r3, #0
 800504e:	e000      	b.n	8005052 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005050:	2302      	movs	r3, #2
  }
}
 8005052:	4618      	mov	r0, r3
 8005054:	3718      	adds	r7, #24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	080050a5 	.word	0x080050a5
 8005060:	0800510d 	.word	0x0800510d
 8005064:	08005129 	.word	0x08005129

08005068 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d11e      	bne.n	80050fe <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050d4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695a      	ldr	r2, [r3, #20]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695a      	ldr	r2, [r3, #20]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2220      	movs	r2, #32
 80050fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7ff ffb2 	bl	8005068 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005104:	bf00      	nop
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f7ff ffae 	bl	800507c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005120:	bf00      	nop
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005130:	2300      	movs	r3, #0
 8005132:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005138:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005144:	2b80      	cmp	r3, #128	; 0x80
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b21      	cmp	r3, #33	; 0x21
 800515a:	d108      	bne.n	800516e <UART_DMAError+0x46>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d005      	beq.n	800516e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	2200      	movs	r2, #0
 8005166:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005168:	68b8      	ldr	r0, [r7, #8]
 800516a:	f000 f871 	bl	8005250 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005178:	2b40      	cmp	r3, #64	; 0x40
 800517a:	bf0c      	ite	eq
 800517c:	2301      	moveq	r3, #1
 800517e:	2300      	movne	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b22      	cmp	r3, #34	; 0x22
 800518e:	d108      	bne.n	80051a2 <UART_DMAError+0x7a>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2200      	movs	r2, #0
 800519a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800519c:	68b8      	ldr	r0, [r7, #8]
 800519e:	f000 f86d 	bl	800527c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a6:	f043 0210 	orr.w	r2, r3, #16
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ae:	68b8      	ldr	r0, [r7, #8]
 80051b0:	f7ff ff6e 	bl	8005090 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b4:	bf00      	nop
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051cc:	e02c      	b.n	8005228 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d4:	d028      	beq.n	8005228 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d007      	beq.n	80051ec <UART_WaitOnFlagUntilTimeout+0x30>
 80051dc:	f7fc fc30 	bl	8001a40 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d21d      	bcs.n	8005228 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051fa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f022 0201 	bic.w	r2, r2, #1
 800520a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2220      	movs	r2, #32
 8005210:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e00f      	b.n	8005248 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	4013      	ands	r3, r2
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	429a      	cmp	r2, r3
 8005236:	bf0c      	ite	eq
 8005238:	2301      	moveq	r3, #1
 800523a:	2300      	movne	r3, #0
 800523c:	b2db      	uxtb	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	79fb      	ldrb	r3, [r7, #7]
 8005242:	429a      	cmp	r2, r3
 8005244:	d0c3      	beq.n	80051ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68da      	ldr	r2, [r3, #12]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005266:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2220      	movs	r2, #32
 800526c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005292:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695a      	ldr	r2, [r3, #20]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0201 	bic.w	r2, r2, #1
 80052a2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68da      	ldr	r2, [r3, #12]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	430a      	orrs	r2, r1
 80052d6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	691b      	ldr	r3, [r3, #16]
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	431a      	orrs	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052fa:	f023 030c 	bic.w	r3, r3, #12
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6812      	ldr	r2, [r2, #0]
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	430b      	orrs	r3, r1
 8005306:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005326:	f040 818b 	bne.w	8005640 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4ac1      	ldr	r2, [pc, #772]	; (8005634 <UART_SetConfig+0x37c>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d005      	beq.n	8005340 <UART_SetConfig+0x88>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4abf      	ldr	r2, [pc, #764]	; (8005638 <UART_SetConfig+0x380>)
 800533a:	4293      	cmp	r3, r2
 800533c:	f040 80bd 	bne.w	80054ba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005340:	f7fe fde0 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 8005344:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	461d      	mov	r5, r3
 800534a:	f04f 0600 	mov.w	r6, #0
 800534e:	46a8      	mov	r8, r5
 8005350:	46b1      	mov	r9, r6
 8005352:	eb18 0308 	adds.w	r3, r8, r8
 8005356:	eb49 0409 	adc.w	r4, r9, r9
 800535a:	4698      	mov	r8, r3
 800535c:	46a1      	mov	r9, r4
 800535e:	eb18 0805 	adds.w	r8, r8, r5
 8005362:	eb49 0906 	adc.w	r9, r9, r6
 8005366:	f04f 0100 	mov.w	r1, #0
 800536a:	f04f 0200 	mov.w	r2, #0
 800536e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005372:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005376:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800537a:	4688      	mov	r8, r1
 800537c:	4691      	mov	r9, r2
 800537e:	eb18 0005 	adds.w	r0, r8, r5
 8005382:	eb49 0106 	adc.w	r1, r9, r6
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	461d      	mov	r5, r3
 800538c:	f04f 0600 	mov.w	r6, #0
 8005390:	196b      	adds	r3, r5, r5
 8005392:	eb46 0406 	adc.w	r4, r6, r6
 8005396:	461a      	mov	r2, r3
 8005398:	4623      	mov	r3, r4
 800539a:	f7fa ff21 	bl	80001e0 <__aeabi_uldivmod>
 800539e:	4603      	mov	r3, r0
 80053a0:	460c      	mov	r4, r1
 80053a2:	461a      	mov	r2, r3
 80053a4:	4ba5      	ldr	r3, [pc, #660]	; (800563c <UART_SetConfig+0x384>)
 80053a6:	fba3 2302 	umull	r2, r3, r3, r2
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	461d      	mov	r5, r3
 80053b4:	f04f 0600 	mov.w	r6, #0
 80053b8:	46a9      	mov	r9, r5
 80053ba:	46b2      	mov	sl, r6
 80053bc:	eb19 0309 	adds.w	r3, r9, r9
 80053c0:	eb4a 040a 	adc.w	r4, sl, sl
 80053c4:	4699      	mov	r9, r3
 80053c6:	46a2      	mov	sl, r4
 80053c8:	eb19 0905 	adds.w	r9, r9, r5
 80053cc:	eb4a 0a06 	adc.w	sl, sl, r6
 80053d0:	f04f 0100 	mov.w	r1, #0
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053dc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053e0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053e4:	4689      	mov	r9, r1
 80053e6:	4692      	mov	sl, r2
 80053e8:	eb19 0005 	adds.w	r0, r9, r5
 80053ec:	eb4a 0106 	adc.w	r1, sl, r6
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	461d      	mov	r5, r3
 80053f6:	f04f 0600 	mov.w	r6, #0
 80053fa:	196b      	adds	r3, r5, r5
 80053fc:	eb46 0406 	adc.w	r4, r6, r6
 8005400:	461a      	mov	r2, r3
 8005402:	4623      	mov	r3, r4
 8005404:	f7fa feec 	bl	80001e0 <__aeabi_uldivmod>
 8005408:	4603      	mov	r3, r0
 800540a:	460c      	mov	r4, r1
 800540c:	461a      	mov	r2, r3
 800540e:	4b8b      	ldr	r3, [pc, #556]	; (800563c <UART_SetConfig+0x384>)
 8005410:	fba3 1302 	umull	r1, r3, r3, r2
 8005414:	095b      	lsrs	r3, r3, #5
 8005416:	2164      	movs	r1, #100	; 0x64
 8005418:	fb01 f303 	mul.w	r3, r1, r3
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	3332      	adds	r3, #50	; 0x32
 8005422:	4a86      	ldr	r2, [pc, #536]	; (800563c <UART_SetConfig+0x384>)
 8005424:	fba2 2303 	umull	r2, r3, r2, r3
 8005428:	095b      	lsrs	r3, r3, #5
 800542a:	005b      	lsls	r3, r3, #1
 800542c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005430:	4498      	add	r8, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	461d      	mov	r5, r3
 8005436:	f04f 0600 	mov.w	r6, #0
 800543a:	46a9      	mov	r9, r5
 800543c:	46b2      	mov	sl, r6
 800543e:	eb19 0309 	adds.w	r3, r9, r9
 8005442:	eb4a 040a 	adc.w	r4, sl, sl
 8005446:	4699      	mov	r9, r3
 8005448:	46a2      	mov	sl, r4
 800544a:	eb19 0905 	adds.w	r9, r9, r5
 800544e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005452:	f04f 0100 	mov.w	r1, #0
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800545e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005462:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005466:	4689      	mov	r9, r1
 8005468:	4692      	mov	sl, r2
 800546a:	eb19 0005 	adds.w	r0, r9, r5
 800546e:	eb4a 0106 	adc.w	r1, sl, r6
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	461d      	mov	r5, r3
 8005478:	f04f 0600 	mov.w	r6, #0
 800547c:	196b      	adds	r3, r5, r5
 800547e:	eb46 0406 	adc.w	r4, r6, r6
 8005482:	461a      	mov	r2, r3
 8005484:	4623      	mov	r3, r4
 8005486:	f7fa feab 	bl	80001e0 <__aeabi_uldivmod>
 800548a:	4603      	mov	r3, r0
 800548c:	460c      	mov	r4, r1
 800548e:	461a      	mov	r2, r3
 8005490:	4b6a      	ldr	r3, [pc, #424]	; (800563c <UART_SetConfig+0x384>)
 8005492:	fba3 1302 	umull	r1, r3, r3, r2
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	2164      	movs	r1, #100	; 0x64
 800549a:	fb01 f303 	mul.w	r3, r1, r3
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	3332      	adds	r3, #50	; 0x32
 80054a4:	4a65      	ldr	r2, [pc, #404]	; (800563c <UART_SetConfig+0x384>)
 80054a6:	fba2 2303 	umull	r2, r3, r2, r3
 80054aa:	095b      	lsrs	r3, r3, #5
 80054ac:	f003 0207 	and.w	r2, r3, #7
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4442      	add	r2, r8
 80054b6:	609a      	str	r2, [r3, #8]
 80054b8:	e26f      	b.n	800599a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054ba:	f7fe fd0f 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 80054be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	461d      	mov	r5, r3
 80054c4:	f04f 0600 	mov.w	r6, #0
 80054c8:	46a8      	mov	r8, r5
 80054ca:	46b1      	mov	r9, r6
 80054cc:	eb18 0308 	adds.w	r3, r8, r8
 80054d0:	eb49 0409 	adc.w	r4, r9, r9
 80054d4:	4698      	mov	r8, r3
 80054d6:	46a1      	mov	r9, r4
 80054d8:	eb18 0805 	adds.w	r8, r8, r5
 80054dc:	eb49 0906 	adc.w	r9, r9, r6
 80054e0:	f04f 0100 	mov.w	r1, #0
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054f4:	4688      	mov	r8, r1
 80054f6:	4691      	mov	r9, r2
 80054f8:	eb18 0005 	adds.w	r0, r8, r5
 80054fc:	eb49 0106 	adc.w	r1, r9, r6
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	461d      	mov	r5, r3
 8005506:	f04f 0600 	mov.w	r6, #0
 800550a:	196b      	adds	r3, r5, r5
 800550c:	eb46 0406 	adc.w	r4, r6, r6
 8005510:	461a      	mov	r2, r3
 8005512:	4623      	mov	r3, r4
 8005514:	f7fa fe64 	bl	80001e0 <__aeabi_uldivmod>
 8005518:	4603      	mov	r3, r0
 800551a:	460c      	mov	r4, r1
 800551c:	461a      	mov	r2, r3
 800551e:	4b47      	ldr	r3, [pc, #284]	; (800563c <UART_SetConfig+0x384>)
 8005520:	fba3 2302 	umull	r2, r3, r3, r2
 8005524:	095b      	lsrs	r3, r3, #5
 8005526:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	461d      	mov	r5, r3
 800552e:	f04f 0600 	mov.w	r6, #0
 8005532:	46a9      	mov	r9, r5
 8005534:	46b2      	mov	sl, r6
 8005536:	eb19 0309 	adds.w	r3, r9, r9
 800553a:	eb4a 040a 	adc.w	r4, sl, sl
 800553e:	4699      	mov	r9, r3
 8005540:	46a2      	mov	sl, r4
 8005542:	eb19 0905 	adds.w	r9, r9, r5
 8005546:	eb4a 0a06 	adc.w	sl, sl, r6
 800554a:	f04f 0100 	mov.w	r1, #0
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005556:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800555a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800555e:	4689      	mov	r9, r1
 8005560:	4692      	mov	sl, r2
 8005562:	eb19 0005 	adds.w	r0, r9, r5
 8005566:	eb4a 0106 	adc.w	r1, sl, r6
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	461d      	mov	r5, r3
 8005570:	f04f 0600 	mov.w	r6, #0
 8005574:	196b      	adds	r3, r5, r5
 8005576:	eb46 0406 	adc.w	r4, r6, r6
 800557a:	461a      	mov	r2, r3
 800557c:	4623      	mov	r3, r4
 800557e:	f7fa fe2f 	bl	80001e0 <__aeabi_uldivmod>
 8005582:	4603      	mov	r3, r0
 8005584:	460c      	mov	r4, r1
 8005586:	461a      	mov	r2, r3
 8005588:	4b2c      	ldr	r3, [pc, #176]	; (800563c <UART_SetConfig+0x384>)
 800558a:	fba3 1302 	umull	r1, r3, r3, r2
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	2164      	movs	r1, #100	; 0x64
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	3332      	adds	r3, #50	; 0x32
 800559c:	4a27      	ldr	r2, [pc, #156]	; (800563c <UART_SetConfig+0x384>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	005b      	lsls	r3, r3, #1
 80055a6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80055aa:	4498      	add	r8, r3
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	461d      	mov	r5, r3
 80055b0:	f04f 0600 	mov.w	r6, #0
 80055b4:	46a9      	mov	r9, r5
 80055b6:	46b2      	mov	sl, r6
 80055b8:	eb19 0309 	adds.w	r3, r9, r9
 80055bc:	eb4a 040a 	adc.w	r4, sl, sl
 80055c0:	4699      	mov	r9, r3
 80055c2:	46a2      	mov	sl, r4
 80055c4:	eb19 0905 	adds.w	r9, r9, r5
 80055c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80055cc:	f04f 0100 	mov.w	r1, #0
 80055d0:	f04f 0200 	mov.w	r2, #0
 80055d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055e0:	4689      	mov	r9, r1
 80055e2:	4692      	mov	sl, r2
 80055e4:	eb19 0005 	adds.w	r0, r9, r5
 80055e8:	eb4a 0106 	adc.w	r1, sl, r6
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	461d      	mov	r5, r3
 80055f2:	f04f 0600 	mov.w	r6, #0
 80055f6:	196b      	adds	r3, r5, r5
 80055f8:	eb46 0406 	adc.w	r4, r6, r6
 80055fc:	461a      	mov	r2, r3
 80055fe:	4623      	mov	r3, r4
 8005600:	f7fa fdee 	bl	80001e0 <__aeabi_uldivmod>
 8005604:	4603      	mov	r3, r0
 8005606:	460c      	mov	r4, r1
 8005608:	461a      	mov	r2, r3
 800560a:	4b0c      	ldr	r3, [pc, #48]	; (800563c <UART_SetConfig+0x384>)
 800560c:	fba3 1302 	umull	r1, r3, r3, r2
 8005610:	095b      	lsrs	r3, r3, #5
 8005612:	2164      	movs	r1, #100	; 0x64
 8005614:	fb01 f303 	mul.w	r3, r1, r3
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	3332      	adds	r3, #50	; 0x32
 800561e:	4a07      	ldr	r2, [pc, #28]	; (800563c <UART_SetConfig+0x384>)
 8005620:	fba2 2303 	umull	r2, r3, r2, r3
 8005624:	095b      	lsrs	r3, r3, #5
 8005626:	f003 0207 	and.w	r2, r3, #7
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4442      	add	r2, r8
 8005630:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005632:	e1b2      	b.n	800599a <UART_SetConfig+0x6e2>
 8005634:	40011000 	.word	0x40011000
 8005638:	40011400 	.word	0x40011400
 800563c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4ad7      	ldr	r2, [pc, #860]	; (80059a4 <UART_SetConfig+0x6ec>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d005      	beq.n	8005656 <UART_SetConfig+0x39e>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4ad6      	ldr	r2, [pc, #856]	; (80059a8 <UART_SetConfig+0x6f0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	f040 80d1 	bne.w	80057f8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005656:	f7fe fc55 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 800565a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	469a      	mov	sl, r3
 8005660:	f04f 0b00 	mov.w	fp, #0
 8005664:	46d0      	mov	r8, sl
 8005666:	46d9      	mov	r9, fp
 8005668:	eb18 0308 	adds.w	r3, r8, r8
 800566c:	eb49 0409 	adc.w	r4, r9, r9
 8005670:	4698      	mov	r8, r3
 8005672:	46a1      	mov	r9, r4
 8005674:	eb18 080a 	adds.w	r8, r8, sl
 8005678:	eb49 090b 	adc.w	r9, r9, fp
 800567c:	f04f 0100 	mov.w	r1, #0
 8005680:	f04f 0200 	mov.w	r2, #0
 8005684:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005688:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800568c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005690:	4688      	mov	r8, r1
 8005692:	4691      	mov	r9, r2
 8005694:	eb1a 0508 	adds.w	r5, sl, r8
 8005698:	eb4b 0609 	adc.w	r6, fp, r9
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4619      	mov	r1, r3
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	f04f 0300 	mov.w	r3, #0
 80056aa:	f04f 0400 	mov.w	r4, #0
 80056ae:	0094      	lsls	r4, r2, #2
 80056b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056b4:	008b      	lsls	r3, r1, #2
 80056b6:	461a      	mov	r2, r3
 80056b8:	4623      	mov	r3, r4
 80056ba:	4628      	mov	r0, r5
 80056bc:	4631      	mov	r1, r6
 80056be:	f7fa fd8f 	bl	80001e0 <__aeabi_uldivmod>
 80056c2:	4603      	mov	r3, r0
 80056c4:	460c      	mov	r4, r1
 80056c6:	461a      	mov	r2, r3
 80056c8:	4bb8      	ldr	r3, [pc, #736]	; (80059ac <UART_SetConfig+0x6f4>)
 80056ca:	fba3 2302 	umull	r2, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	469b      	mov	fp, r3
 80056d8:	f04f 0c00 	mov.w	ip, #0
 80056dc:	46d9      	mov	r9, fp
 80056de:	46e2      	mov	sl, ip
 80056e0:	eb19 0309 	adds.w	r3, r9, r9
 80056e4:	eb4a 040a 	adc.w	r4, sl, sl
 80056e8:	4699      	mov	r9, r3
 80056ea:	46a2      	mov	sl, r4
 80056ec:	eb19 090b 	adds.w	r9, r9, fp
 80056f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056f4:	f04f 0100 	mov.w	r1, #0
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005700:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005704:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005708:	4689      	mov	r9, r1
 800570a:	4692      	mov	sl, r2
 800570c:	eb1b 0509 	adds.w	r5, fp, r9
 8005710:	eb4c 060a 	adc.w	r6, ip, sl
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	4619      	mov	r1, r3
 800571a:	f04f 0200 	mov.w	r2, #0
 800571e:	f04f 0300 	mov.w	r3, #0
 8005722:	f04f 0400 	mov.w	r4, #0
 8005726:	0094      	lsls	r4, r2, #2
 8005728:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800572c:	008b      	lsls	r3, r1, #2
 800572e:	461a      	mov	r2, r3
 8005730:	4623      	mov	r3, r4
 8005732:	4628      	mov	r0, r5
 8005734:	4631      	mov	r1, r6
 8005736:	f7fa fd53 	bl	80001e0 <__aeabi_uldivmod>
 800573a:	4603      	mov	r3, r0
 800573c:	460c      	mov	r4, r1
 800573e:	461a      	mov	r2, r3
 8005740:	4b9a      	ldr	r3, [pc, #616]	; (80059ac <UART_SetConfig+0x6f4>)
 8005742:	fba3 1302 	umull	r1, r3, r3, r2
 8005746:	095b      	lsrs	r3, r3, #5
 8005748:	2164      	movs	r1, #100	; 0x64
 800574a:	fb01 f303 	mul.w	r3, r1, r3
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	3332      	adds	r3, #50	; 0x32
 8005754:	4a95      	ldr	r2, [pc, #596]	; (80059ac <UART_SetConfig+0x6f4>)
 8005756:	fba2 2303 	umull	r2, r3, r2, r3
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005760:	4498      	add	r8, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	469b      	mov	fp, r3
 8005766:	f04f 0c00 	mov.w	ip, #0
 800576a:	46d9      	mov	r9, fp
 800576c:	46e2      	mov	sl, ip
 800576e:	eb19 0309 	adds.w	r3, r9, r9
 8005772:	eb4a 040a 	adc.w	r4, sl, sl
 8005776:	4699      	mov	r9, r3
 8005778:	46a2      	mov	sl, r4
 800577a:	eb19 090b 	adds.w	r9, r9, fp
 800577e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005782:	f04f 0100 	mov.w	r1, #0
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800578e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005792:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005796:	4689      	mov	r9, r1
 8005798:	4692      	mov	sl, r2
 800579a:	eb1b 0509 	adds.w	r5, fp, r9
 800579e:	eb4c 060a 	adc.w	r6, ip, sl
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	4619      	mov	r1, r3
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	f04f 0400 	mov.w	r4, #0
 80057b4:	0094      	lsls	r4, r2, #2
 80057b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057ba:	008b      	lsls	r3, r1, #2
 80057bc:	461a      	mov	r2, r3
 80057be:	4623      	mov	r3, r4
 80057c0:	4628      	mov	r0, r5
 80057c2:	4631      	mov	r1, r6
 80057c4:	f7fa fd0c 	bl	80001e0 <__aeabi_uldivmod>
 80057c8:	4603      	mov	r3, r0
 80057ca:	460c      	mov	r4, r1
 80057cc:	461a      	mov	r2, r3
 80057ce:	4b77      	ldr	r3, [pc, #476]	; (80059ac <UART_SetConfig+0x6f4>)
 80057d0:	fba3 1302 	umull	r1, r3, r3, r2
 80057d4:	095b      	lsrs	r3, r3, #5
 80057d6:	2164      	movs	r1, #100	; 0x64
 80057d8:	fb01 f303 	mul.w	r3, r1, r3
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	3332      	adds	r3, #50	; 0x32
 80057e2:	4a72      	ldr	r2, [pc, #456]	; (80059ac <UART_SetConfig+0x6f4>)
 80057e4:	fba2 2303 	umull	r2, r3, r2, r3
 80057e8:	095b      	lsrs	r3, r3, #5
 80057ea:	f003 020f 	and.w	r2, r3, #15
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4442      	add	r2, r8
 80057f4:	609a      	str	r2, [r3, #8]
 80057f6:	e0d0      	b.n	800599a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80057f8:	f7fe fb70 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 80057fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	469a      	mov	sl, r3
 8005802:	f04f 0b00 	mov.w	fp, #0
 8005806:	46d0      	mov	r8, sl
 8005808:	46d9      	mov	r9, fp
 800580a:	eb18 0308 	adds.w	r3, r8, r8
 800580e:	eb49 0409 	adc.w	r4, r9, r9
 8005812:	4698      	mov	r8, r3
 8005814:	46a1      	mov	r9, r4
 8005816:	eb18 080a 	adds.w	r8, r8, sl
 800581a:	eb49 090b 	adc.w	r9, r9, fp
 800581e:	f04f 0100 	mov.w	r1, #0
 8005822:	f04f 0200 	mov.w	r2, #0
 8005826:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800582a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800582e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005832:	4688      	mov	r8, r1
 8005834:	4691      	mov	r9, r2
 8005836:	eb1a 0508 	adds.w	r5, sl, r8
 800583a:	eb4b 0609 	adc.w	r6, fp, r9
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	4619      	mov	r1, r3
 8005844:	f04f 0200 	mov.w	r2, #0
 8005848:	f04f 0300 	mov.w	r3, #0
 800584c:	f04f 0400 	mov.w	r4, #0
 8005850:	0094      	lsls	r4, r2, #2
 8005852:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005856:	008b      	lsls	r3, r1, #2
 8005858:	461a      	mov	r2, r3
 800585a:	4623      	mov	r3, r4
 800585c:	4628      	mov	r0, r5
 800585e:	4631      	mov	r1, r6
 8005860:	f7fa fcbe 	bl	80001e0 <__aeabi_uldivmod>
 8005864:	4603      	mov	r3, r0
 8005866:	460c      	mov	r4, r1
 8005868:	461a      	mov	r2, r3
 800586a:	4b50      	ldr	r3, [pc, #320]	; (80059ac <UART_SetConfig+0x6f4>)
 800586c:	fba3 2302 	umull	r2, r3, r3, r2
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	469b      	mov	fp, r3
 800587a:	f04f 0c00 	mov.w	ip, #0
 800587e:	46d9      	mov	r9, fp
 8005880:	46e2      	mov	sl, ip
 8005882:	eb19 0309 	adds.w	r3, r9, r9
 8005886:	eb4a 040a 	adc.w	r4, sl, sl
 800588a:	4699      	mov	r9, r3
 800588c:	46a2      	mov	sl, r4
 800588e:	eb19 090b 	adds.w	r9, r9, fp
 8005892:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005896:	f04f 0100 	mov.w	r1, #0
 800589a:	f04f 0200 	mov.w	r2, #0
 800589e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058aa:	4689      	mov	r9, r1
 80058ac:	4692      	mov	sl, r2
 80058ae:	eb1b 0509 	adds.w	r5, fp, r9
 80058b2:	eb4c 060a 	adc.w	r6, ip, sl
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	4619      	mov	r1, r3
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	f04f 0400 	mov.w	r4, #0
 80058c8:	0094      	lsls	r4, r2, #2
 80058ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058ce:	008b      	lsls	r3, r1, #2
 80058d0:	461a      	mov	r2, r3
 80058d2:	4623      	mov	r3, r4
 80058d4:	4628      	mov	r0, r5
 80058d6:	4631      	mov	r1, r6
 80058d8:	f7fa fc82 	bl	80001e0 <__aeabi_uldivmod>
 80058dc:	4603      	mov	r3, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	461a      	mov	r2, r3
 80058e2:	4b32      	ldr	r3, [pc, #200]	; (80059ac <UART_SetConfig+0x6f4>)
 80058e4:	fba3 1302 	umull	r1, r3, r3, r2
 80058e8:	095b      	lsrs	r3, r3, #5
 80058ea:	2164      	movs	r1, #100	; 0x64
 80058ec:	fb01 f303 	mul.w	r3, r1, r3
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	3332      	adds	r3, #50	; 0x32
 80058f6:	4a2d      	ldr	r2, [pc, #180]	; (80059ac <UART_SetConfig+0x6f4>)
 80058f8:	fba2 2303 	umull	r2, r3, r2, r3
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005902:	4498      	add	r8, r3
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	469b      	mov	fp, r3
 8005908:	f04f 0c00 	mov.w	ip, #0
 800590c:	46d9      	mov	r9, fp
 800590e:	46e2      	mov	sl, ip
 8005910:	eb19 0309 	adds.w	r3, r9, r9
 8005914:	eb4a 040a 	adc.w	r4, sl, sl
 8005918:	4699      	mov	r9, r3
 800591a:	46a2      	mov	sl, r4
 800591c:	eb19 090b 	adds.w	r9, r9, fp
 8005920:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005924:	f04f 0100 	mov.w	r1, #0
 8005928:	f04f 0200 	mov.w	r2, #0
 800592c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005930:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005934:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005938:	4689      	mov	r9, r1
 800593a:	4692      	mov	sl, r2
 800593c:	eb1b 0509 	adds.w	r5, fp, r9
 8005940:	eb4c 060a 	adc.w	r6, ip, sl
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4619      	mov	r1, r3
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	f04f 0400 	mov.w	r4, #0
 8005956:	0094      	lsls	r4, r2, #2
 8005958:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800595c:	008b      	lsls	r3, r1, #2
 800595e:	461a      	mov	r2, r3
 8005960:	4623      	mov	r3, r4
 8005962:	4628      	mov	r0, r5
 8005964:	4631      	mov	r1, r6
 8005966:	f7fa fc3b 	bl	80001e0 <__aeabi_uldivmod>
 800596a:	4603      	mov	r3, r0
 800596c:	460c      	mov	r4, r1
 800596e:	461a      	mov	r2, r3
 8005970:	4b0e      	ldr	r3, [pc, #56]	; (80059ac <UART_SetConfig+0x6f4>)
 8005972:	fba3 1302 	umull	r1, r3, r3, r2
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	2164      	movs	r1, #100	; 0x64
 800597a:	fb01 f303 	mul.w	r3, r1, r3
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	3332      	adds	r3, #50	; 0x32
 8005984:	4a09      	ldr	r2, [pc, #36]	; (80059ac <UART_SetConfig+0x6f4>)
 8005986:	fba2 2303 	umull	r2, r3, r2, r3
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	f003 020f 	and.w	r2, r3, #15
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4442      	add	r2, r8
 8005996:	609a      	str	r2, [r3, #8]
}
 8005998:	e7ff      	b.n	800599a <UART_SetConfig+0x6e2>
 800599a:	bf00      	nop
 800599c:	3714      	adds	r7, #20
 800599e:	46bd      	mov	sp, r7
 80059a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059a4:	40011000 	.word	0x40011000
 80059a8:	40011400 	.word	0x40011400
 80059ac:	51eb851f 	.word	0x51eb851f

080059b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059b0:	b084      	sub	sp, #16
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
 80059ba:	f107 001c 	add.w	r0, r7, #28
 80059be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d122      	bne.n	8005a0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80059dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d105      	bne.n	8005a02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fca0 	bl	8006348 <USB_CoreReset>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	73fb      	strb	r3, [r7, #15]
 8005a0c:	e01a      	b.n	8005a44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fc94 	bl	8006348 <USB_CoreReset>
 8005a20:	4603      	mov	r3, r0
 8005a22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d106      	bne.n	8005a38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	639a      	str	r2, [r3, #56]	; 0x38
 8005a36:	e005      	b.n	8005a44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d10b      	bne.n	8005a62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	f043 0206 	orr.w	r2, r3, #6
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f043 0220 	orr.w	r2, r3, #32
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a6e:	b004      	add	sp, #16
 8005a70:	4770      	bx	lr
	...

08005a74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d165      	bne.n	8005b54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4a41      	ldr	r2, [pc, #260]	; (8005b90 <USB_SetTurnaroundTime+0x11c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d906      	bls.n	8005a9e <USB_SetTurnaroundTime+0x2a>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4a40      	ldr	r2, [pc, #256]	; (8005b94 <USB_SetTurnaroundTime+0x120>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d802      	bhi.n	8005a9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a98:	230f      	movs	r3, #15
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	e062      	b.n	8005b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	4a3c      	ldr	r2, [pc, #240]	; (8005b94 <USB_SetTurnaroundTime+0x120>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d906      	bls.n	8005ab4 <USB_SetTurnaroundTime+0x40>
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4a3b      	ldr	r2, [pc, #236]	; (8005b98 <USB_SetTurnaroundTime+0x124>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d802      	bhi.n	8005ab4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005aae:	230e      	movs	r3, #14
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	e057      	b.n	8005b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4a38      	ldr	r2, [pc, #224]	; (8005b98 <USB_SetTurnaroundTime+0x124>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d906      	bls.n	8005aca <USB_SetTurnaroundTime+0x56>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4a37      	ldr	r2, [pc, #220]	; (8005b9c <USB_SetTurnaroundTime+0x128>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d802      	bhi.n	8005aca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ac4:	230d      	movs	r3, #13
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	e04c      	b.n	8005b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	4a33      	ldr	r2, [pc, #204]	; (8005b9c <USB_SetTurnaroundTime+0x128>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d906      	bls.n	8005ae0 <USB_SetTurnaroundTime+0x6c>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4a32      	ldr	r2, [pc, #200]	; (8005ba0 <USB_SetTurnaroundTime+0x12c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d802      	bhi.n	8005ae0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005ada:	230c      	movs	r3, #12
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	e041      	b.n	8005b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	4a2f      	ldr	r2, [pc, #188]	; (8005ba0 <USB_SetTurnaroundTime+0x12c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d906      	bls.n	8005af6 <USB_SetTurnaroundTime+0x82>
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	4a2e      	ldr	r2, [pc, #184]	; (8005ba4 <USB_SetTurnaroundTime+0x130>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d802      	bhi.n	8005af6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005af0:	230b      	movs	r3, #11
 8005af2:	617b      	str	r3, [r7, #20]
 8005af4:	e036      	b.n	8005b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	4a2a      	ldr	r2, [pc, #168]	; (8005ba4 <USB_SetTurnaroundTime+0x130>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d906      	bls.n	8005b0c <USB_SetTurnaroundTime+0x98>
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	4a29      	ldr	r2, [pc, #164]	; (8005ba8 <USB_SetTurnaroundTime+0x134>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d802      	bhi.n	8005b0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005b06:	230a      	movs	r3, #10
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	e02b      	b.n	8005b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	4a26      	ldr	r2, [pc, #152]	; (8005ba8 <USB_SetTurnaroundTime+0x134>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d906      	bls.n	8005b22 <USB_SetTurnaroundTime+0xae>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4a25      	ldr	r2, [pc, #148]	; (8005bac <USB_SetTurnaroundTime+0x138>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d802      	bhi.n	8005b22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005b1c:	2309      	movs	r3, #9
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	e020      	b.n	8005b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	4a21      	ldr	r2, [pc, #132]	; (8005bac <USB_SetTurnaroundTime+0x138>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d906      	bls.n	8005b38 <USB_SetTurnaroundTime+0xc4>
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	4a20      	ldr	r2, [pc, #128]	; (8005bb0 <USB_SetTurnaroundTime+0x13c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d802      	bhi.n	8005b38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005b32:	2308      	movs	r3, #8
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	e015      	b.n	8005b64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	4a1d      	ldr	r2, [pc, #116]	; (8005bb0 <USB_SetTurnaroundTime+0x13c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d906      	bls.n	8005b4e <USB_SetTurnaroundTime+0xda>
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	4a1c      	ldr	r2, [pc, #112]	; (8005bb4 <USB_SetTurnaroundTime+0x140>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d802      	bhi.n	8005b4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005b48:	2307      	movs	r3, #7
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	e00a      	b.n	8005b64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005b4e:	2306      	movs	r3, #6
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	e007      	b.n	8005b64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d102      	bne.n	8005b60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005b5a:	2309      	movs	r3, #9
 8005b5c:	617b      	str	r3, [r7, #20]
 8005b5e:	e001      	b.n	8005b64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005b60:	2309      	movs	r3, #9
 8005b62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	029b      	lsls	r3, r3, #10
 8005b78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	00d8acbf 	.word	0x00d8acbf
 8005b94:	00e4e1bf 	.word	0x00e4e1bf
 8005b98:	00f423ff 	.word	0x00f423ff
 8005b9c:	0106737f 	.word	0x0106737f
 8005ba0:	011a499f 	.word	0x011a499f
 8005ba4:	01312cff 	.word	0x01312cff
 8005ba8:	014ca43f 	.word	0x014ca43f
 8005bac:	016e35ff 	.word	0x016e35ff
 8005bb0:	01a6ab1f 	.word	0x01a6ab1f
 8005bb4:	01e847ff 	.word	0x01e847ff

08005bb8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f023 0201 	bic.w	r2, r3, #1
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b082      	sub	sp, #8
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	460b      	mov	r3, r1
 8005be4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d106      	bne.n	8005c06 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60da      	str	r2, [r3, #12]
 8005c04:	e00b      	b.n	8005c1e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c06:	78fb      	ldrb	r3, [r7, #3]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d106      	bne.n	8005c1a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	60da      	str	r2, [r3, #12]
 8005c18:	e001      	b.n	8005c1e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e003      	b.n	8005c26 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005c1e:	2032      	movs	r0, #50	; 0x32
 8005c20:	f7fb ff1a 	bl	8001a58 <HAL_Delay>

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
	...

08005c30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c30:	b084      	sub	sp, #16
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b086      	sub	sp, #24
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	e009      	b.n	8005c64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	3340      	adds	r3, #64	; 0x40
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4413      	add	r3, r2
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	3301      	adds	r3, #1
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	2b0e      	cmp	r3, #14
 8005c68:	d9f2      	bls.n	8005c50 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d11c      	bne.n	8005caa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c7e:	f043 0302 	orr.w	r3, r3, #2
 8005c82:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38
 8005ca8:	e00b      	b.n	8005cc2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cc8:	461a      	mov	r2, r3
 8005cca:	2300      	movs	r3, #0
 8005ccc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cdc:	461a      	mov	r2, r3
 8005cde:	680b      	ldr	r3, [r1, #0]
 8005ce0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d10c      	bne.n	8005d02 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d104      	bne.n	8005cf8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cee:	2100      	movs	r1, #0
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f949 	bl	8005f88 <USB_SetDevSpeed>
 8005cf6:	e008      	b.n	8005d0a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cf8:	2101      	movs	r1, #1
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f944 	bl	8005f88 <USB_SetDevSpeed>
 8005d00:	e003      	b.n	8005d0a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d02:	2103      	movs	r1, #3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f93f 	bl	8005f88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d0a:	2110      	movs	r1, #16
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f8f3 	bl	8005ef8 <USB_FlushTxFifo>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d001      	beq.n	8005d1c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f911 	bl	8005f44 <USB_FlushRxFifo>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d32:	461a      	mov	r2, r3
 8005d34:	2300      	movs	r3, #0
 8005d36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3e:	461a      	mov	r2, r3
 8005d40:	2300      	movs	r3, #0
 8005d42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4a:	461a      	mov	r2, r3
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d50:	2300      	movs	r3, #0
 8005d52:	613b      	str	r3, [r7, #16]
 8005d54:	e043      	b.n	8005dde <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d6c:	d118      	bne.n	8005da0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10a      	bne.n	8005d8a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d80:	461a      	mov	r2, r3
 8005d82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d86:	6013      	str	r3, [r2, #0]
 8005d88:	e013      	b.n	8005db2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d96:	461a      	mov	r2, r3
 8005d98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	e008      	b.n	8005db2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dac:	461a      	mov	r2, r3
 8005dae:	2300      	movs	r3, #0
 8005db0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d3b7      	bcc.n	8005d56 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005de6:	2300      	movs	r3, #0
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	e043      	b.n	8005e74 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e02:	d118      	bne.n	8005e36 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10a      	bne.n	8005e20 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	015a      	lsls	r2, r3, #5
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4413      	add	r3, r2
 8005e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e16:	461a      	mov	r2, r3
 8005e18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e1c:	6013      	str	r3, [r2, #0]
 8005e1e:	e013      	b.n	8005e48 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	e008      	b.n	8005e48 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e42:	461a      	mov	r2, r3
 8005e44:	2300      	movs	r3, #0
 8005e46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e54:	461a      	mov	r2, r3
 8005e56:	2300      	movs	r3, #0
 8005e58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e66:	461a      	mov	r2, r3
 8005e68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	3301      	adds	r3, #1
 8005e72:	613b      	str	r3, [r7, #16]
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d3b7      	bcc.n	8005dec <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d105      	bne.n	8005eb0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	f043 0210 	orr.w	r2, r3, #16
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	4b0f      	ldr	r3, [pc, #60]	; (8005ef4 <USB_DevInit+0x2c4>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d005      	beq.n	8005ece <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f043 0208 	orr.w	r2, r3, #8
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d107      	bne.n	8005ee4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005edc:	f043 0304 	orr.w	r3, r3, #4
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ef0:	b004      	add	sp, #16
 8005ef2:	4770      	bx	lr
 8005ef4:	803c3800 	.word	0x803c3800

08005ef8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005f02:	2300      	movs	r3, #0
 8005f04:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	019b      	lsls	r3, r3, #6
 8005f0a:	f043 0220 	orr.w	r2, r3, #32
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	3301      	adds	r3, #1
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4a09      	ldr	r2, [pc, #36]	; (8005f40 <USB_FlushTxFifo+0x48>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d901      	bls.n	8005f24 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e006      	b.n	8005f32 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	f003 0320 	and.w	r3, r3, #32
 8005f2c:	2b20      	cmp	r3, #32
 8005f2e:	d0f0      	beq.n	8005f12 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	00030d40 	.word	0x00030d40

08005f44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2210      	movs	r2, #16
 8005f54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	4a09      	ldr	r2, [pc, #36]	; (8005f84 <USB_FlushRxFifo+0x40>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d901      	bls.n	8005f68 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e006      	b.n	8005f76 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d0f0      	beq.n	8005f56 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	00030d40 	.word	0x00030d40

08005f88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	68f9      	ldr	r1, [r7, #12]
 8005fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b087      	sub	sp, #28
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 0306 	and.w	r3, r3, #6
 8005fd2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d102      	bne.n	8005fe0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	75fb      	strb	r3, [r7, #23]
 8005fde:	e00a      	b.n	8005ff6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d002      	beq.n	8005fec <USB_GetDevSpeed+0x32>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2b06      	cmp	r3, #6
 8005fea:	d102      	bne.n	8005ff2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005fec:	2302      	movs	r3, #2
 8005fee:	75fb      	strb	r3, [r7, #23]
 8005ff0:	e001      	b.n	8005ff6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ff2:	230f      	movs	r3, #15
 8005ff4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006004:	b480      	push	{r7}
 8006006:	b089      	sub	sp, #36	; 0x24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	4611      	mov	r1, r2
 8006010:	461a      	mov	r2, r3
 8006012:	460b      	mov	r3, r1
 8006014:	71fb      	strb	r3, [r7, #7]
 8006016:	4613      	mov	r3, r2
 8006018:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006022:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006026:	2b00      	cmp	r3, #0
 8006028:	d11a      	bne.n	8006060 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800602a:	88bb      	ldrh	r3, [r7, #4]
 800602c:	3303      	adds	r3, #3
 800602e:	089b      	lsrs	r3, r3, #2
 8006030:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006032:	2300      	movs	r3, #0
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	e00f      	b.n	8006058 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	031a      	lsls	r2, r3, #12
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	4413      	add	r3, r2
 8006040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006044:	461a      	mov	r2, r3
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	3304      	adds	r3, #4
 8006050:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	3301      	adds	r3, #1
 8006056:	61bb      	str	r3, [r7, #24]
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	429a      	cmp	r2, r3
 800605e:	d3eb      	bcc.n	8006038 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3724      	adds	r7, #36	; 0x24
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800606e:	b480      	push	{r7}
 8006070:	b089      	sub	sp, #36	; 0x24
 8006072:	af00      	add	r7, sp, #0
 8006074:	60f8      	str	r0, [r7, #12]
 8006076:	60b9      	str	r1, [r7, #8]
 8006078:	4613      	mov	r3, r2
 800607a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006084:	88fb      	ldrh	r3, [r7, #6]
 8006086:	3303      	adds	r3, #3
 8006088:	089b      	lsrs	r3, r3, #2
 800608a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800608c:	2300      	movs	r3, #0
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	e00b      	b.n	80060aa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	601a      	str	r2, [r3, #0]
    pDest++;
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	3304      	adds	r3, #4
 80060a2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	3301      	adds	r3, #1
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d3ef      	bcc.n	8006092 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80060b2:	69fb      	ldr	r3, [r7, #28]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3724      	adds	r7, #36	; 0x24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060da:	f023 0303 	bic.w	r3, r3, #3
 80060de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060ee:	f043 0302 	orr.w	r3, r3, #2
 80060f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4013      	ands	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800611a:	68fb      	ldr	r3, [r7, #12]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006144:	69db      	ldr	r3, [r3, #28]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	4013      	ands	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	0c1b      	lsrs	r3, r3, #16
}
 8006150:	4618      	mov	r0, r3
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	4013      	ands	r3, r2
 800617e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	b29b      	uxth	r3, r3
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006190:	b480      	push	{r7}
 8006192:	b085      	sub	sp, #20
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	68ba      	ldr	r2, [r7, #8]
 80061ba:	4013      	ands	r3, r2
 80061bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061be:	68bb      	ldr	r3, [r7, #8]
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	460b      	mov	r3, r1
 80061d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	fa22 f303 	lsr.w	r3, r2, r3
 80061fc:	01db      	lsls	r3, r3, #7
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4013      	ands	r3, r2
 8006218:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800621a:	68bb      	ldr	r3, [r7, #8]
}
 800621c:	4618      	mov	r0, r3
 800621e:	371c      	adds	r7, #28
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	f003 0301 	and.w	r3, r3, #1
}
 8006238:	4618      	mov	r0, r3
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800625e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006262:	f023 0307 	bic.w	r3, r3, #7
 8006266:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800627a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
	...

0800628c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	460b      	mov	r3, r1
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	333c      	adds	r3, #60	; 0x3c
 80062a2:	3304      	adds	r3, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4a26      	ldr	r2, [pc, #152]	; (8006344 <USB_EP0_OutStart+0xb8>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d90a      	bls.n	80062c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062c0:	d101      	bne.n	80062c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e037      	b.n	8006336 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062cc:	461a      	mov	r2, r3
 80062ce:	2300      	movs	r3, #0
 80062d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f4:	f043 0318 	orr.w	r3, r3, #24
 80062f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006308:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800630c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800630e:	7afb      	ldrb	r3, [r7, #11]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d10f      	bne.n	8006334 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631a:	461a      	mov	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800632e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006332:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	371c      	adds	r7, #28
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	4f54300a 	.word	0x4f54300a

08006348 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3301      	adds	r3, #1
 8006358:	60fb      	str	r3, [r7, #12]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4a13      	ldr	r2, [pc, #76]	; (80063ac <USB_CoreReset+0x64>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d901      	bls.n	8006366 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e01b      	b.n	800639e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	daf2      	bge.n	8006354 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f043 0201 	orr.w	r2, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3301      	adds	r3, #1
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4a09      	ldr	r2, [pc, #36]	; (80063ac <USB_CoreReset+0x64>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d901      	bls.n	8006390 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e006      	b.n	800639e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b01      	cmp	r3, #1
 800639a:	d0f0      	beq.n	800637e <USB_CoreReset+0x36>

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	00030d40 	.word	0x00030d40

080063b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
	...

080063c0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063c6:	f3ef 8305 	mrs	r3, IPSR
 80063ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80063cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10f      	bne.n	80063f2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063d2:	f3ef 8310 	mrs	r3, PRIMASK
 80063d6:	607b      	str	r3, [r7, #4]
  return(result);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d105      	bne.n	80063ea <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063de:	f3ef 8311 	mrs	r3, BASEPRI
 80063e2:	603b      	str	r3, [r7, #0]
  return(result);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <osKernelInitialize+0x3a>
 80063ea:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <osKernelInitialize+0x64>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d103      	bne.n	80063fa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80063f2:	f06f 0305 	mvn.w	r3, #5
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	e00c      	b.n	8006414 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063fa:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <osKernelInitialize+0x64>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d105      	bne.n	800640e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006402:	4b08      	ldr	r3, [pc, #32]	; (8006424 <osKernelInitialize+0x64>)
 8006404:	2201      	movs	r2, #1
 8006406:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006408:	2300      	movs	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	e002      	b.n	8006414 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800640e:	f04f 33ff 	mov.w	r3, #4294967295
 8006412:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006414:	68fb      	ldr	r3, [r7, #12]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	2000002c 	.word	0x2000002c

08006428 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800642e:	f3ef 8305 	mrs	r3, IPSR
 8006432:	60bb      	str	r3, [r7, #8]
  return(result);
 8006434:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10f      	bne.n	800645a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643a:	f3ef 8310 	mrs	r3, PRIMASK
 800643e:	607b      	str	r3, [r7, #4]
  return(result);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d105      	bne.n	8006452 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006446:	f3ef 8311 	mrs	r3, BASEPRI
 800644a:	603b      	str	r3, [r7, #0]
  return(result);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <osKernelStart+0x3a>
 8006452:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <osKernelStart+0x68>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d103      	bne.n	8006462 <osKernelStart+0x3a>
    stat = osErrorISR;
 800645a:	f06f 0305 	mvn.w	r3, #5
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	e010      	b.n	8006484 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006462:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <osKernelStart+0x68>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d109      	bne.n	800647e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800646a:	f7ff ffa1 	bl	80063b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800646e:	4b08      	ldr	r3, [pc, #32]	; (8006490 <osKernelStart+0x68>)
 8006470:	2202      	movs	r2, #2
 8006472:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006474:	f001 f872 	bl	800755c <vTaskStartScheduler>
      stat = osOK;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	e002      	b.n	8006484 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800647e:	f04f 33ff 	mov.w	r3, #4294967295
 8006482:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006484:	68fb      	ldr	r3, [r7, #12]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	2000002c 	.word	0x2000002c

08006494 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b090      	sub	sp, #64	; 0x40
 8006498:	af04      	add	r7, sp, #16
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064a4:	f3ef 8305 	mrs	r3, IPSR
 80064a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80064aa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f040 808f 	bne.w	80065d0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b2:	f3ef 8310 	mrs	r3, PRIMASK
 80064b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d105      	bne.n	80064ca <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064be:	f3ef 8311 	mrs	r3, BASEPRI
 80064c2:	617b      	str	r3, [r7, #20]
  return(result);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <osThreadNew+0x3e>
 80064ca:	4b44      	ldr	r3, [pc, #272]	; (80065dc <osThreadNew+0x148>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d07e      	beq.n	80065d0 <osThreadNew+0x13c>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d07b      	beq.n	80065d0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80064d8:	2380      	movs	r3, #128	; 0x80
 80064da:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80064dc:	2318      	movs	r3, #24
 80064de:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80064e0:	2300      	movs	r3, #0
 80064e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80064e4:	f04f 33ff 	mov.w	r3, #4294967295
 80064e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d045      	beq.n	800657c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <osThreadNew+0x6a>
        name = attr->name;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d008      	beq.n	8006524 <osThreadNew+0x90>
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	2b38      	cmp	r3, #56	; 0x38
 8006516:	d805      	bhi.n	8006524 <osThreadNew+0x90>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <osThreadNew+0x94>
        return (NULL);
 8006524:	2300      	movs	r3, #0
 8006526:	e054      	b.n	80065d2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	089b      	lsrs	r3, r3, #2
 8006536:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00e      	beq.n	800655e <osThreadNew+0xca>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2b5f      	cmp	r3, #95	; 0x5f
 8006546:	d90a      	bls.n	800655e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800654c:	2b00      	cmp	r3, #0
 800654e:	d006      	beq.n	800655e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <osThreadNew+0xca>
        mem = 1;
 8006558:	2301      	movs	r3, #1
 800655a:	623b      	str	r3, [r7, #32]
 800655c:	e010      	b.n	8006580 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10c      	bne.n	8006580 <osThreadNew+0xec>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d108      	bne.n	8006580 <osThreadNew+0xec>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <osThreadNew+0xec>
          mem = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	623b      	str	r3, [r7, #32]
 800657a:	e001      	b.n	8006580 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d110      	bne.n	80065a8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800658e:	9202      	str	r2, [sp, #8]
 8006590:	9301      	str	r3, [sp, #4]
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800659a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fe09 	bl	80071b4 <xTaskCreateStatic>
 80065a2:	4603      	mov	r3, r0
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	e013      	b.n	80065d0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d110      	bne.n	80065d0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	f107 0310 	add.w	r3, r7, #16
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fe51 	bl	8007268 <xTaskCreate>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d001      	beq.n	80065d0 <osThreadNew+0x13c>
          hTask = NULL;
 80065cc:	2300      	movs	r3, #0
 80065ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065d0:	693b      	ldr	r3, [r7, #16]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3730      	adds	r7, #48	; 0x30
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	2000002c 	.word	0x2000002c

080065e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065e8:	f3ef 8305 	mrs	r3, IPSR
 80065ec:	613b      	str	r3, [r7, #16]
  return(result);
 80065ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10f      	bne.n	8006614 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065f4:	f3ef 8310 	mrs	r3, PRIMASK
 80065f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d105      	bne.n	800660c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006600:	f3ef 8311 	mrs	r3, BASEPRI
 8006604:	60bb      	str	r3, [r7, #8]
  return(result);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d007      	beq.n	800661c <osDelay+0x3c>
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <osDelay+0x58>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d103      	bne.n	800661c <osDelay+0x3c>
    stat = osErrorISR;
 8006614:	f06f 0305 	mvn.w	r3, #5
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	e007      	b.n	800662c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 ff64 	bl	80074f4 <vTaskDelay>
    }
  }

  return (stat);
 800662c:	697b      	ldr	r3, [r7, #20]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	2000002c 	.word	0x2000002c

0800663c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4a07      	ldr	r2, [pc, #28]	; (8006668 <vApplicationGetIdleTaskMemory+0x2c>)
 800664c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	4a06      	ldr	r2, [pc, #24]	; (800666c <vApplicationGetIdleTaskMemory+0x30>)
 8006652:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2280      	movs	r2, #128	; 0x80
 8006658:	601a      	str	r2, [r3, #0]
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	20000030 	.word	0x20000030
 800666c:	20000090 	.word	0x20000090

08006670 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4a07      	ldr	r2, [pc, #28]	; (800669c <vApplicationGetTimerTaskMemory+0x2c>)
 8006680:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	4a06      	ldr	r2, [pc, #24]	; (80066a0 <vApplicationGetTimerTaskMemory+0x30>)
 8006686:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800668e:	601a      	str	r2, [r3, #0]
}
 8006690:	bf00      	nop
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	20000290 	.word	0x20000290
 80066a0:	200002f0 	.word	0x200002f0

080066a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f103 0208 	add.w	r2, r3, #8
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f04f 32ff 	mov.w	r2, #4294967295
 80066bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f103 0208 	add.w	r2, r3, #8
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f103 0208 	add.w	r2, r3, #8
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
}
 800673a:	bf00      	nop
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006746:	b480      	push	{r7}
 8006748:	b085      	sub	sp, #20
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	d103      	bne.n	8006766 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e00c      	b.n	8006780 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3308      	adds	r3, #8
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	e002      	b.n	8006774 <vListInsert+0x2e>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	429a      	cmp	r2, r3
 800677e:	d2f6      	bcs.n	800676e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	601a      	str	r2, [r3, #0]
}
 80067ac:	bf00      	nop
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6892      	ldr	r2, [r2, #8]
 80067ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6852      	ldr	r2, [r2, #4]
 80067d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d103      	bne.n	80067ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	1e5a      	subs	r2, r3, #1
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d109      	bne.n	8006834 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	60bb      	str	r3, [r7, #8]
 8006832:	e7fe      	b.n	8006832 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8006834:	f002 f812 	bl	800885c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006840:	68f9      	ldr	r1, [r7, #12]
 8006842:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006844:	fb01 f303 	mul.w	r3, r1, r3
 8006848:	441a      	add	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006864:	3b01      	subs	r3, #1
 8006866:	68f9      	ldr	r1, [r7, #12]
 8006868:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800686a:	fb01 f303 	mul.w	r3, r1, r3
 800686e:	441a      	add	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	22ff      	movs	r2, #255	; 0xff
 8006878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	22ff      	movs	r2, #255	; 0xff
 8006880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d114      	bne.n	80068b4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d01a      	beq.n	80068c8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3310      	adds	r3, #16
 8006896:	4618      	mov	r0, r3
 8006898:	f001 f8e0 	bl	8007a5c <xTaskRemoveFromEventList>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d012      	beq.n	80068c8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068a2:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <xQueueGenericReset+0xcc>)
 80068a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	e009      	b.n	80068c8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	3310      	adds	r3, #16
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff fef3 	bl	80066a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3324      	adds	r3, #36	; 0x24
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff feee 	bl	80066a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068c8:	f001 fff6 	bl	80088b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068cc:	2301      	movs	r3, #1
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	e000ed04 	.word	0xe000ed04

080068dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08e      	sub	sp, #56	; 0x38
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d109      	bne.n	8006904 <xQueueGenericCreateStatic+0x28>
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	62bb      	str	r3, [r7, #40]	; 0x28
 8006902:	e7fe      	b.n	8006902 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <xQueueGenericCreateStatic+0x42>
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	627b      	str	r3, [r7, #36]	; 0x24
 800691c:	e7fe      	b.n	800691c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d002      	beq.n	800692a <xQueueGenericCreateStatic+0x4e>
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <xQueueGenericCreateStatic+0x52>
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <xQueueGenericCreateStatic+0x54>
 800692e:	2300      	movs	r3, #0
 8006930:	2b00      	cmp	r3, #0
 8006932:	d109      	bne.n	8006948 <xQueueGenericCreateStatic+0x6c>
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	623b      	str	r3, [r7, #32]
 8006946:	e7fe      	b.n	8006946 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d102      	bne.n	8006954 <xQueueGenericCreateStatic+0x78>
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <xQueueGenericCreateStatic+0x7c>
 8006954:	2301      	movs	r3, #1
 8006956:	e000      	b.n	800695a <xQueueGenericCreateStatic+0x7e>
 8006958:	2300      	movs	r3, #0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d109      	bne.n	8006972 <xQueueGenericCreateStatic+0x96>
 800695e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006962:	f383 8811 	msr	BASEPRI, r3
 8006966:	f3bf 8f6f 	isb	sy
 800696a:	f3bf 8f4f 	dsb	sy
 800696e:	61fb      	str	r3, [r7, #28]
 8006970:	e7fe      	b.n	8006970 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006972:	2350      	movs	r3, #80	; 0x50
 8006974:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	2b50      	cmp	r3, #80	; 0x50
 800697a:	d009      	beq.n	8006990 <xQueueGenericCreateStatic+0xb4>
 800697c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	e7fe      	b.n	800698e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006990:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00d      	beq.n	80069b8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069a4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	4613      	mov	r3, r2
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f805 	bl	80069c2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3730      	adds	r7, #48	; 0x30
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	60f8      	str	r0, [r7, #12]
 80069ca:	60b9      	str	r1, [r7, #8]
 80069cc:	607a      	str	r2, [r7, #4]
 80069ce:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d103      	bne.n	80069de <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	e002      	b.n	80069e4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	68ba      	ldr	r2, [r7, #8]
 80069ee:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80069f0:	2101      	movs	r1, #1
 80069f2:	69b8      	ldr	r0, [r7, #24]
 80069f4:	f7ff ff0a 	bl	800680c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	78fa      	ldrb	r2, [r7, #3]
 80069fc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a00:	bf00      	nop
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08e      	sub	sp, #56	; 0x38
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a16:	2300      	movs	r3, #0
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d109      	bne.n	8006a38 <xQueueGenericSend+0x30>
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a36:	e7fe      	b.n	8006a36 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d103      	bne.n	8006a46 <xQueueGenericSend+0x3e>
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <xQueueGenericSend+0x42>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <xQueueGenericSend+0x44>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d109      	bne.n	8006a64 <xQueueGenericSend+0x5c>
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
 8006a62:	e7fe      	b.n	8006a62 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d103      	bne.n	8006a72 <xQueueGenericSend+0x6a>
 8006a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d101      	bne.n	8006a76 <xQueueGenericSend+0x6e>
 8006a72:	2301      	movs	r3, #1
 8006a74:	e000      	b.n	8006a78 <xQueueGenericSend+0x70>
 8006a76:	2300      	movs	r3, #0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d109      	bne.n	8006a90 <xQueueGenericSend+0x88>
 8006a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	623b      	str	r3, [r7, #32]
 8006a8e:	e7fe      	b.n	8006a8e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a90:	f001 f99a 	bl	8007dc8 <xTaskGetSchedulerState>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d102      	bne.n	8006aa0 <xQueueGenericSend+0x98>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <xQueueGenericSend+0x9c>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e000      	b.n	8006aa6 <xQueueGenericSend+0x9e>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d109      	bne.n	8006abe <xQueueGenericSend+0xb6>
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	61fb      	str	r3, [r7, #28]
 8006abc:	e7fe      	b.n	8006abc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006abe:	f001 fecd 	bl	800885c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d302      	bcc.n	8006ad4 <xQueueGenericSend+0xcc>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d129      	bne.n	8006b28 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	68b9      	ldr	r1, [r7, #8]
 8006ad8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ada:	f000 f9ff 	bl	8006edc <prvCopyDataToQueue>
 8006ade:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d010      	beq.n	8006b0a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	3324      	adds	r3, #36	; 0x24
 8006aec:	4618      	mov	r0, r3
 8006aee:	f000 ffb5 	bl	8007a5c <xTaskRemoveFromEventList>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d013      	beq.n	8006b20 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006af8:	4b3f      	ldr	r3, [pc, #252]	; (8006bf8 <xQueueGenericSend+0x1f0>)
 8006afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	e00a      	b.n	8006b20 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d007      	beq.n	8006b20 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b10:	4b39      	ldr	r3, [pc, #228]	; (8006bf8 <xQueueGenericSend+0x1f0>)
 8006b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b20:	f001 feca 	bl	80088b8 <vPortExitCritical>
				return pdPASS;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e063      	b.n	8006bf0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d103      	bne.n	8006b36 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b2e:	f001 fec3 	bl	80088b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b32:	2300      	movs	r3, #0
 8006b34:	e05c      	b.n	8006bf0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d106      	bne.n	8006b4a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b3c:	f107 0314 	add.w	r3, r7, #20
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 ffed 	bl	8007b20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b46:	2301      	movs	r3, #1
 8006b48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b4a:	f001 feb5 	bl	80088b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b4e:	f000 fd69 	bl	8007624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b52:	f001 fe83 	bl	800885c <vPortEnterCritical>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b5c:	b25b      	sxtb	r3, r3
 8006b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b62:	d103      	bne.n	8006b6c <xQueueGenericSend+0x164>
 8006b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b72:	b25b      	sxtb	r3, r3
 8006b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b78:	d103      	bne.n	8006b82 <xQueueGenericSend+0x17a>
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b82:	f001 fe99 	bl	80088b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b86:	1d3a      	adds	r2, r7, #4
 8006b88:	f107 0314 	add.w	r3, r7, #20
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 ffdc 	bl	8007b4c <xTaskCheckForTimeOut>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d124      	bne.n	8006be4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b9c:	f000 fa96 	bl	80070cc <prvIsQueueFull>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d018      	beq.n	8006bd8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	3310      	adds	r3, #16
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	4611      	mov	r1, r2
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 ff06 	bl	80079c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb6:	f000 fa21 	bl	8006ffc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006bba:	f000 fd41 	bl	8007640 <xTaskResumeAll>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f47f af7c 	bne.w	8006abe <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <xQueueGenericSend+0x1f0>)
 8006bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	e772      	b.n	8006abe <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bda:	f000 fa0f 	bl	8006ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bde:	f000 fd2f 	bl	8007640 <xTaskResumeAll>
 8006be2:	e76c      	b.n	8006abe <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006be6:	f000 fa09 	bl	8006ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bea:	f000 fd29 	bl	8007640 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006bee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3738      	adds	r7, #56	; 0x38
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08e      	sub	sp, #56	; 0x38
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
 8006c08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d109      	bne.n	8006c28 <xQueueGenericSendFromISR+0x2c>
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
 8006c26:	e7fe      	b.n	8006c26 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d103      	bne.n	8006c36 <xQueueGenericSendFromISR+0x3a>
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <xQueueGenericSendFromISR+0x3e>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e000      	b.n	8006c3c <xQueueGenericSendFromISR+0x40>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d109      	bne.n	8006c54 <xQueueGenericSendFromISR+0x58>
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	623b      	str	r3, [r7, #32]
 8006c52:	e7fe      	b.n	8006c52 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d103      	bne.n	8006c62 <xQueueGenericSendFromISR+0x66>
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <xQueueGenericSendFromISR+0x6a>
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <xQueueGenericSendFromISR+0x6c>
 8006c66:	2300      	movs	r3, #0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d109      	bne.n	8006c80 <xQueueGenericSendFromISR+0x84>
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	61fb      	str	r3, [r7, #28]
 8006c7e:	e7fe      	b.n	8006c7e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c80:	f001 fec8 	bl	8008a14 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c84:	f3ef 8211 	mrs	r2, BASEPRI
 8006c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8c:	f383 8811 	msr	BASEPRI, r3
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	f3bf 8f4f 	dsb	sy
 8006c98:	61ba      	str	r2, [r7, #24]
 8006c9a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c9c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d302      	bcc.n	8006cb2 <xQueueGenericSendFromISR+0xb6>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d12c      	bne.n	8006d0c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cc2:	f000 f90b 	bl	8006edc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cc6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cce:	d112      	bne.n	8006cf6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d016      	beq.n	8006d06 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	3324      	adds	r3, #36	; 0x24
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 febd 	bl	8007a5c <xTaskRemoveFromEventList>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00e      	beq.n	8006d06 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d00b      	beq.n	8006d06 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	e007      	b.n	8006d06 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	b25a      	sxtb	r2, r3
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d06:	2301      	movs	r3, #1
 8006d08:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006d0a:	e001      	b.n	8006d10 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d12:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3738      	adds	r7, #56	; 0x38
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08c      	sub	sp, #48	; 0x30
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d109      	bne.n	8006d52 <xQueueReceive+0x2e>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	623b      	str	r3, [r7, #32]
 8006d50:	e7fe      	b.n	8006d50 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d103      	bne.n	8006d60 <xQueueReceive+0x3c>
 8006d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <xQueueReceive+0x40>
 8006d60:	2301      	movs	r3, #1
 8006d62:	e000      	b.n	8006d66 <xQueueReceive+0x42>
 8006d64:	2300      	movs	r3, #0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d109      	bne.n	8006d7e <xQueueReceive+0x5a>
 8006d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	61fb      	str	r3, [r7, #28]
 8006d7c:	e7fe      	b.n	8006d7c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d7e:	f001 f823 	bl	8007dc8 <xTaskGetSchedulerState>
 8006d82:	4603      	mov	r3, r0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d102      	bne.n	8006d8e <xQueueReceive+0x6a>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <xQueueReceive+0x6e>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e000      	b.n	8006d94 <xQueueReceive+0x70>
 8006d92:	2300      	movs	r3, #0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d109      	bne.n	8006dac <xQueueReceive+0x88>
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	e7fe      	b.n	8006daa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dac:	f001 fd56 	bl	800885c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01f      	beq.n	8006dfc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dc0:	f000 f8f6 	bl	8006fb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc6:	1e5a      	subs	r2, r3, #1
 8006dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	691b      	ldr	r3, [r3, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00f      	beq.n	8006df4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd6:	3310      	adds	r3, #16
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fe3f 	bl	8007a5c <xTaskRemoveFromEventList>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d007      	beq.n	8006df4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006de4:	4b3c      	ldr	r3, [pc, #240]	; (8006ed8 <xQueueReceive+0x1b4>)
 8006de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006df4:	f001 fd60 	bl	80088b8 <vPortExitCritical>
				return pdPASS;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e069      	b.n	8006ed0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d103      	bne.n	8006e0a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e02:	f001 fd59 	bl	80088b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e06:	2300      	movs	r3, #0
 8006e08:	e062      	b.n	8006ed0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d106      	bne.n	8006e1e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e10:	f107 0310 	add.w	r3, r7, #16
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 fe83 	bl	8007b20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e1e:	f001 fd4b 	bl	80088b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e22:	f000 fbff 	bl	8007624 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e26:	f001 fd19 	bl	800885c <vPortEnterCritical>
 8006e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e30:	b25b      	sxtb	r3, r3
 8006e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e36:	d103      	bne.n	8006e40 <xQueueReceive+0x11c>
 8006e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e46:	b25b      	sxtb	r3, r3
 8006e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4c:	d103      	bne.n	8006e56 <xQueueReceive+0x132>
 8006e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e56:	f001 fd2f 	bl	80088b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e5a:	1d3a      	adds	r2, r7, #4
 8006e5c:	f107 0310 	add.w	r3, r7, #16
 8006e60:	4611      	mov	r1, r2
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 fe72 	bl	8007b4c <xTaskCheckForTimeOut>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d123      	bne.n	8006eb6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e70:	f000 f916 	bl	80070a0 <prvIsQueueEmpty>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d017      	beq.n	8006eaa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7c:	3324      	adds	r3, #36	; 0x24
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	4611      	mov	r1, r2
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fd9c 	bl	80079c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e8a:	f000 f8b7 	bl	8006ffc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e8e:	f000 fbd7 	bl	8007640 <xTaskResumeAll>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d189      	bne.n	8006dac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006e98:	4b0f      	ldr	r3, [pc, #60]	; (8006ed8 <xQueueReceive+0x1b4>)
 8006e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	e780      	b.n	8006dac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006eaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eac:	f000 f8a6 	bl	8006ffc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eb0:	f000 fbc6 	bl	8007640 <xTaskResumeAll>
 8006eb4:	e77a      	b.n	8006dac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb8:	f000 f8a0 	bl	8006ffc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ebc:	f000 fbc0 	bl	8007640 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ec2:	f000 f8ed 	bl	80070a0 <prvIsQueueEmpty>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f43f af6f 	beq.w	8006dac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ece:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3730      	adds	r7, #48	; 0x30
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	e000ed04 	.word	0xe000ed04

08006edc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10d      	bne.n	8006f16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d14d      	bne.n	8006f9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 ff7c 	bl	8007e04 <xTaskPriorityDisinherit>
 8006f0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	609a      	str	r2, [r3, #8]
 8006f14:	e043      	b.n	8006f9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d119      	bne.n	8006f50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6858      	ldr	r0, [r3, #4]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f24:	461a      	mov	r2, r3
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	f001 ffac 	bl	8008e84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	685a      	ldr	r2, [r3, #4]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f34:	441a      	add	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d32b      	bcc.n	8006f9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	605a      	str	r2, [r3, #4]
 8006f4e:	e026      	b.n	8006f9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	68d8      	ldr	r0, [r3, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	461a      	mov	r2, r3
 8006f5a:	68b9      	ldr	r1, [r7, #8]
 8006f5c:	f001 ff92 	bl	8008e84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	68da      	ldr	r2, [r3, #12]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f68:	425b      	negs	r3, r3
 8006f6a:	441a      	add	r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	68da      	ldr	r2, [r3, #12]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d207      	bcs.n	8006f8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	689a      	ldr	r2, [r3, #8]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	425b      	negs	r3, r3
 8006f86:	441a      	add	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d105      	bne.n	8006f9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006fa6:	697b      	ldr	r3, [r7, #20]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d018      	beq.n	8006ff4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fca:	441a      	add	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68da      	ldr	r2, [r3, #12]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d303      	bcc.n	8006fe4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	68d9      	ldr	r1, [r3, #12]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fec:	461a      	mov	r2, r3
 8006fee:	6838      	ldr	r0, [r7, #0]
 8006ff0:	f001 ff48 	bl	8008e84 <memcpy>
	}
}
 8006ff4:	bf00      	nop
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007004:	f001 fc2a 	bl	800885c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800700e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007010:	e011      	b.n	8007036 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	d012      	beq.n	8007040 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	3324      	adds	r3, #36	; 0x24
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fd1c 	bl	8007a5c <xTaskRemoveFromEventList>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d001      	beq.n	800702e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800702a:	f000 fdef 	bl	8007c0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
 8007030:	3b01      	subs	r3, #1
 8007032:	b2db      	uxtb	r3, r3
 8007034:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800703a:	2b00      	cmp	r3, #0
 800703c:	dce9      	bgt.n	8007012 <prvUnlockQueue+0x16>
 800703e:	e000      	b.n	8007042 <prvUnlockQueue+0x46>
					break;
 8007040:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	22ff      	movs	r2, #255	; 0xff
 8007046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800704a:	f001 fc35 	bl	80088b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800704e:	f001 fc05 	bl	800885c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007058:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800705a:	e011      	b.n	8007080 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d012      	beq.n	800708a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	3310      	adds	r3, #16
 8007068:	4618      	mov	r0, r3
 800706a:	f000 fcf7 	bl	8007a5c <xTaskRemoveFromEventList>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007074:	f000 fdca 	bl	8007c0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	3b01      	subs	r3, #1
 800707c:	b2db      	uxtb	r3, r3
 800707e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007084:	2b00      	cmp	r3, #0
 8007086:	dce9      	bgt.n	800705c <prvUnlockQueue+0x60>
 8007088:	e000      	b.n	800708c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800708a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	22ff      	movs	r2, #255	; 0xff
 8007090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007094:	f001 fc10 	bl	80088b8 <vPortExitCritical>
}
 8007098:	bf00      	nop
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070a8:	f001 fbd8 	bl	800885c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d102      	bne.n	80070ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	e001      	b.n	80070be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070be:	f001 fbfb 	bl	80088b8 <vPortExitCritical>

	return xReturn;
 80070c2:	68fb      	ldr	r3, [r7, #12]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070d4:	f001 fbc2 	bl	800885c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d102      	bne.n	80070ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070e4:	2301      	movs	r3, #1
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	e001      	b.n	80070ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070ee:	f001 fbe3 	bl	80088b8 <vPortExitCritical>

	return xReturn;
 80070f2:	68fb      	ldr	r3, [r7, #12]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]
 800710a:	e014      	b.n	8007136 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800710c:	4a0e      	ldr	r2, [pc, #56]	; (8007148 <vQueueAddToRegistry+0x4c>)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10b      	bne.n	8007130 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007118:	490b      	ldr	r1, [pc, #44]	; (8007148 <vQueueAddToRegistry+0x4c>)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	683a      	ldr	r2, [r7, #0]
 800711e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007122:	4a09      	ldr	r2, [pc, #36]	; (8007148 <vQueueAddToRegistry+0x4c>)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4413      	add	r3, r2
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800712e:	e005      	b.n	800713c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	3301      	adds	r3, #1
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b07      	cmp	r3, #7
 800713a:	d9e7      	bls.n	800710c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800713c:	bf00      	nop
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	20005f5c 	.word	0x20005f5c

0800714c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800715c:	f001 fb7e 	bl	800885c <vPortEnterCritical>
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007166:	b25b      	sxtb	r3, r3
 8007168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716c:	d103      	bne.n	8007176 <vQueueWaitForMessageRestricted+0x2a>
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800717c:	b25b      	sxtb	r3, r3
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007182:	d103      	bne.n	800718c <vQueueWaitForMessageRestricted+0x40>
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800718c:	f001 fb94 	bl	80088b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007194:	2b00      	cmp	r3, #0
 8007196:	d106      	bne.n	80071a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	3324      	adds	r3, #36	; 0x24
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	68b9      	ldr	r1, [r7, #8]
 80071a0:	4618      	mov	r0, r3
 80071a2:	f000 fc31 	bl	8007a08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80071a6:	6978      	ldr	r0, [r7, #20]
 80071a8:	f7ff ff28 	bl	8006ffc <prvUnlockQueue>
	}
 80071ac:	bf00      	nop
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08e      	sub	sp, #56	; 0x38
 80071b8:	af04      	add	r7, sp, #16
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80071c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d109      	bne.n	80071dc <xTaskCreateStatic+0x28>
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	623b      	str	r3, [r7, #32]
 80071da:	e7fe      	b.n	80071da <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d109      	bne.n	80071f6 <xTaskCreateStatic+0x42>
 80071e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e6:	f383 8811 	msr	BASEPRI, r3
 80071ea:	f3bf 8f6f 	isb	sy
 80071ee:	f3bf 8f4f 	dsb	sy
 80071f2:	61fb      	str	r3, [r7, #28]
 80071f4:	e7fe      	b.n	80071f4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071f6:	2360      	movs	r3, #96	; 0x60
 80071f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	2b60      	cmp	r3, #96	; 0x60
 80071fe:	d009      	beq.n	8007214 <xTaskCreateStatic+0x60>
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	61bb      	str	r3, [r7, #24]
 8007212:	e7fe      	b.n	8007212 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007214:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01e      	beq.n	800725a <xTaskCreateStatic+0xa6>
 800721c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721e:	2b00      	cmp	r3, #0
 8007220:	d01b      	beq.n	800725a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007224:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800722a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	2202      	movs	r2, #2
 8007230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007234:	2300      	movs	r3, #0
 8007236:	9303      	str	r3, [sp, #12]
 8007238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723a:	9302      	str	r3, [sp, #8]
 800723c:	f107 0314 	add.w	r3, r7, #20
 8007240:	9301      	str	r3, [sp, #4]
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	68b9      	ldr	r1, [r7, #8]
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 f850 	bl	80072f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007254:	f000 f8de 	bl	8007414 <prvAddNewTaskToReadyList>
 8007258:	e001      	b.n	800725e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800725a:	2300      	movs	r3, #0
 800725c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800725e:	697b      	ldr	r3, [r7, #20]
	}
 8007260:	4618      	mov	r0, r3
 8007262:	3728      	adds	r7, #40	; 0x28
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007268:	b580      	push	{r7, lr}
 800726a:	b08c      	sub	sp, #48	; 0x30
 800726c:	af04      	add	r7, sp, #16
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	4613      	mov	r3, r2
 8007276:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007278:	88fb      	ldrh	r3, [r7, #6]
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4618      	mov	r0, r3
 800727e:	f001 fc07 	bl	8008a90 <pvPortMalloc>
 8007282:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00e      	beq.n	80072a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800728a:	2060      	movs	r0, #96	; 0x60
 800728c:	f001 fc00 	bl	8008a90 <pvPortMalloc>
 8007290:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	631a      	str	r2, [r3, #48]	; 0x30
 800729e:	e005      	b.n	80072ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80072a0:	6978      	ldr	r0, [r7, #20]
 80072a2:	f001 fcb7 	bl	8008c14 <vPortFree>
 80072a6:	e001      	b.n	80072ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80072a8:	2300      	movs	r3, #0
 80072aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d017      	beq.n	80072e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80072ba:	88fa      	ldrh	r2, [r7, #6]
 80072bc:	2300      	movs	r3, #0
 80072be:	9303      	str	r3, [sp, #12]
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	9302      	str	r3, [sp, #8]
 80072c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c6:	9301      	str	r3, [sp, #4]
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f80e 	bl	80072f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072d6:	69f8      	ldr	r0, [r7, #28]
 80072d8:	f000 f89c 	bl	8007414 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072dc:	2301      	movs	r3, #1
 80072de:	61bb      	str	r3, [r7, #24]
 80072e0:	e002      	b.n	80072e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072e2:	f04f 33ff 	mov.w	r3, #4294967295
 80072e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072e8:	69bb      	ldr	r3, [r7, #24]
	}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3720      	adds	r7, #32
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}

080072f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072f2:	b580      	push	{r7, lr}
 80072f4:	b088      	sub	sp, #32
 80072f6:	af00      	add	r7, sp, #0
 80072f8:	60f8      	str	r0, [r7, #12]
 80072fa:	60b9      	str	r1, [r7, #8]
 80072fc:	607a      	str	r2, [r7, #4]
 80072fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	461a      	mov	r2, r3
 800730a:	21a5      	movs	r1, #165	; 0xa5
 800730c:	f001 fdc5 	bl	8008e9a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800731a:	3b01      	subs	r3, #1
 800731c:	009b      	lsls	r3, r3, #2
 800731e:	4413      	add	r3, r2
 8007320:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	f023 0307 	bic.w	r3, r3, #7
 8007328:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	f003 0307 	and.w	r3, r3, #7
 8007330:	2b00      	cmp	r3, #0
 8007332:	d009      	beq.n	8007348 <prvInitialiseNewTask+0x56>
 8007334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	e7fe      	b.n	8007346 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d01f      	beq.n	800738e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800734e:	2300      	movs	r3, #0
 8007350:	61fb      	str	r3, [r7, #28]
 8007352:	e012      	b.n	800737a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007354:	68ba      	ldr	r2, [r7, #8]
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	4413      	add	r3, r2
 800735a:	7819      	ldrb	r1, [r3, #0]
 800735c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	4413      	add	r3, r2
 8007362:	3334      	adds	r3, #52	; 0x34
 8007364:	460a      	mov	r2, r1
 8007366:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	69fb      	ldr	r3, [r7, #28]
 800736c:	4413      	add	r3, r2
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d006      	beq.n	8007382 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	3301      	adds	r3, #1
 8007378:	61fb      	str	r3, [r7, #28]
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	2b0f      	cmp	r3, #15
 800737e:	d9e9      	bls.n	8007354 <prvInitialiseNewTask+0x62>
 8007380:	e000      	b.n	8007384 <prvInitialiseNewTask+0x92>
			{
				break;
 8007382:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800738c:	e003      	b.n	8007396 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007398:	2b37      	cmp	r3, #55	; 0x37
 800739a:	d901      	bls.n	80073a0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800739c:	2337      	movs	r3, #55	; 0x37
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80073a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80073ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ae:	2200      	movs	r2, #0
 80073b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	3304      	adds	r3, #4
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff f994 	bl	80066e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	3318      	adds	r3, #24
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff f98f 	bl	80066e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	2200      	movs	r2, #0
 80073e0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	2200      	movs	r2, #0
 80073e6:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	68f9      	ldr	r1, [r7, #12]
 80073f4:	69b8      	ldr	r0, [r7, #24]
 80073f6:	f001 f90b 	bl	8008610 <pxPortInitialiseStack>
 80073fa:	4602      	mov	r2, r0
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800740a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800740c:	bf00      	nop
 800740e:	3720      	adds	r7, #32
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800741c:	f001 fa1e 	bl	800885c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007420:	4b2d      	ldr	r3, [pc, #180]	; (80074d8 <prvAddNewTaskToReadyList+0xc4>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3301      	adds	r3, #1
 8007426:	4a2c      	ldr	r2, [pc, #176]	; (80074d8 <prvAddNewTaskToReadyList+0xc4>)
 8007428:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800742a:	4b2c      	ldr	r3, [pc, #176]	; (80074dc <prvAddNewTaskToReadyList+0xc8>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d109      	bne.n	8007446 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007432:	4a2a      	ldr	r2, [pc, #168]	; (80074dc <prvAddNewTaskToReadyList+0xc8>)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007438:	4b27      	ldr	r3, [pc, #156]	; (80074d8 <prvAddNewTaskToReadyList+0xc4>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b01      	cmp	r3, #1
 800743e:	d110      	bne.n	8007462 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007440:	f000 fc08 	bl	8007c54 <prvInitialiseTaskLists>
 8007444:	e00d      	b.n	8007462 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007446:	4b26      	ldr	r3, [pc, #152]	; (80074e0 <prvAddNewTaskToReadyList+0xcc>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d109      	bne.n	8007462 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800744e:	4b23      	ldr	r3, [pc, #140]	; (80074dc <prvAddNewTaskToReadyList+0xc8>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	429a      	cmp	r2, r3
 800745a:	d802      	bhi.n	8007462 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800745c:	4a1f      	ldr	r2, [pc, #124]	; (80074dc <prvAddNewTaskToReadyList+0xc8>)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007462:	4b20      	ldr	r3, [pc, #128]	; (80074e4 <prvAddNewTaskToReadyList+0xd0>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3301      	adds	r3, #1
 8007468:	4a1e      	ldr	r2, [pc, #120]	; (80074e4 <prvAddNewTaskToReadyList+0xd0>)
 800746a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800746c:	4b1d      	ldr	r3, [pc, #116]	; (80074e4 <prvAddNewTaskToReadyList+0xd0>)
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007478:	4b1b      	ldr	r3, [pc, #108]	; (80074e8 <prvAddNewTaskToReadyList+0xd4>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d903      	bls.n	8007488 <prvAddNewTaskToReadyList+0x74>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007484:	4a18      	ldr	r2, [pc, #96]	; (80074e8 <prvAddNewTaskToReadyList+0xd4>)
 8007486:	6013      	str	r3, [r2, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800748c:	4613      	mov	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4a15      	ldr	r2, [pc, #84]	; (80074ec <prvAddNewTaskToReadyList+0xd8>)
 8007496:	441a      	add	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3304      	adds	r3, #4
 800749c:	4619      	mov	r1, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	f7ff f92d 	bl	80066fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80074a4:	f001 fa08 	bl	80088b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80074a8:	4b0d      	ldr	r3, [pc, #52]	; (80074e0 <prvAddNewTaskToReadyList+0xcc>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00e      	beq.n	80074ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80074b0:	4b0a      	ldr	r3, [pc, #40]	; (80074dc <prvAddNewTaskToReadyList+0xc8>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d207      	bcs.n	80074ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80074be:	4b0c      	ldr	r3, [pc, #48]	; (80074f0 <prvAddNewTaskToReadyList+0xdc>)
 80074c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20000bc4 	.word	0x20000bc4
 80074dc:	200006f0 	.word	0x200006f0
 80074e0:	20000bd0 	.word	0x20000bd0
 80074e4:	20000be0 	.word	0x20000be0
 80074e8:	20000bcc 	.word	0x20000bcc
 80074ec:	200006f4 	.word	0x200006f4
 80074f0:	e000ed04 	.word	0xe000ed04

080074f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b084      	sub	sp, #16
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d016      	beq.n	8007534 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007506:	4b13      	ldr	r3, [pc, #76]	; (8007554 <vTaskDelay+0x60>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d009      	beq.n	8007522 <vTaskDelay+0x2e>
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	60bb      	str	r3, [r7, #8]
 8007520:	e7fe      	b.n	8007520 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007522:	f000 f87f 	bl	8007624 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007526:	2100      	movs	r1, #0
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fcd7 	bl	8007edc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800752e:	f000 f887 	bl	8007640 <xTaskResumeAll>
 8007532:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d107      	bne.n	800754a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800753a:	4b07      	ldr	r3, [pc, #28]	; (8007558 <vTaskDelay+0x64>)
 800753c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	f3bf 8f4f 	dsb	sy
 8007546:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	20000bec 	.word	0x20000bec
 8007558:	e000ed04 	.word	0xe000ed04

0800755c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b08a      	sub	sp, #40	; 0x28
 8007560:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007562:	2300      	movs	r3, #0
 8007564:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007566:	2300      	movs	r3, #0
 8007568:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800756a:	463a      	mov	r2, r7
 800756c:	1d39      	adds	r1, r7, #4
 800756e:	f107 0308 	add.w	r3, r7, #8
 8007572:	4618      	mov	r0, r3
 8007574:	f7ff f862 	bl	800663c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	9202      	str	r2, [sp, #8]
 8007580:	9301      	str	r3, [sp, #4]
 8007582:	2300      	movs	r3, #0
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	2300      	movs	r3, #0
 8007588:	460a      	mov	r2, r1
 800758a:	4920      	ldr	r1, [pc, #128]	; (800760c <vTaskStartScheduler+0xb0>)
 800758c:	4820      	ldr	r0, [pc, #128]	; (8007610 <vTaskStartScheduler+0xb4>)
 800758e:	f7ff fe11 	bl	80071b4 <xTaskCreateStatic>
 8007592:	4602      	mov	r2, r0
 8007594:	4b1f      	ldr	r3, [pc, #124]	; (8007614 <vTaskStartScheduler+0xb8>)
 8007596:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007598:	4b1e      	ldr	r3, [pc, #120]	; (8007614 <vTaskStartScheduler+0xb8>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80075a0:	2301      	movs	r3, #1
 80075a2:	617b      	str	r3, [r7, #20]
 80075a4:	e001      	b.n	80075aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d102      	bne.n	80075b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80075b0:	f000 fce8 	bl	8007f84 <xTimerCreateTimerTask>
 80075b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d115      	bne.n	80075e8 <vTaskStartScheduler+0x8c>
 80075bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80075ce:	4b12      	ldr	r3, [pc, #72]	; (8007618 <vTaskStartScheduler+0xbc>)
 80075d0:	f04f 32ff 	mov.w	r2, #4294967295
 80075d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075d6:	4b11      	ldr	r3, [pc, #68]	; (800761c <vTaskStartScheduler+0xc0>)
 80075d8:	2201      	movs	r2, #1
 80075da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075dc:	4b10      	ldr	r3, [pc, #64]	; (8007620 <vTaskStartScheduler+0xc4>)
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075e2:	f001 f89d 	bl	8008720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075e6:	e00d      	b.n	8007604 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ee:	d109      	bne.n	8007604 <vTaskStartScheduler+0xa8>
 80075f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e7fe      	b.n	8007602 <vTaskStartScheduler+0xa6>
}
 8007604:	bf00      	nop
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	08008f70 	.word	0x08008f70
 8007610:	08007c25 	.word	0x08007c25
 8007614:	20000be8 	.word	0x20000be8
 8007618:	20000be4 	.word	0x20000be4
 800761c:	20000bd0 	.word	0x20000bd0
 8007620:	20000bc8 	.word	0x20000bc8

08007624 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007628:	4b04      	ldr	r3, [pc, #16]	; (800763c <vTaskSuspendAll+0x18>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	3301      	adds	r3, #1
 800762e:	4a03      	ldr	r2, [pc, #12]	; (800763c <vTaskSuspendAll+0x18>)
 8007630:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007632:	bf00      	nop
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	20000bec 	.word	0x20000bec

08007640 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800764a:	2300      	movs	r3, #0
 800764c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800764e:	4b41      	ldr	r3, [pc, #260]	; (8007754 <xTaskResumeAll+0x114>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d109      	bne.n	800766a <xTaskResumeAll+0x2a>
 8007656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765a:	f383 8811 	msr	BASEPRI, r3
 800765e:	f3bf 8f6f 	isb	sy
 8007662:	f3bf 8f4f 	dsb	sy
 8007666:	603b      	str	r3, [r7, #0]
 8007668:	e7fe      	b.n	8007668 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800766a:	f001 f8f7 	bl	800885c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800766e:	4b39      	ldr	r3, [pc, #228]	; (8007754 <xTaskResumeAll+0x114>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	3b01      	subs	r3, #1
 8007674:	4a37      	ldr	r2, [pc, #220]	; (8007754 <xTaskResumeAll+0x114>)
 8007676:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007678:	4b36      	ldr	r3, [pc, #216]	; (8007754 <xTaskResumeAll+0x114>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d162      	bne.n	8007746 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007680:	4b35      	ldr	r3, [pc, #212]	; (8007758 <xTaskResumeAll+0x118>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d05e      	beq.n	8007746 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007688:	e02f      	b.n	80076ea <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800768a:	4b34      	ldr	r3, [pc, #208]	; (800775c <xTaskResumeAll+0x11c>)
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3318      	adds	r3, #24
 8007696:	4618      	mov	r0, r3
 8007698:	f7ff f88e 	bl	80067b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	3304      	adds	r3, #4
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff f889 	bl	80067b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076aa:	4b2d      	ldr	r3, [pc, #180]	; (8007760 <xTaskResumeAll+0x120>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d903      	bls.n	80076ba <xTaskResumeAll+0x7a>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b6:	4a2a      	ldr	r2, [pc, #168]	; (8007760 <xTaskResumeAll+0x120>)
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076be:	4613      	mov	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4a27      	ldr	r2, [pc, #156]	; (8007764 <xTaskResumeAll+0x124>)
 80076c8:	441a      	add	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	3304      	adds	r3, #4
 80076ce:	4619      	mov	r1, r3
 80076d0:	4610      	mov	r0, r2
 80076d2:	f7ff f814 	bl	80066fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076da:	4b23      	ldr	r3, [pc, #140]	; (8007768 <xTaskResumeAll+0x128>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d302      	bcc.n	80076ea <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80076e4:	4b21      	ldr	r3, [pc, #132]	; (800776c <xTaskResumeAll+0x12c>)
 80076e6:	2201      	movs	r2, #1
 80076e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076ea:	4b1c      	ldr	r3, [pc, #112]	; (800775c <xTaskResumeAll+0x11c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1cb      	bne.n	800768a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d001      	beq.n	80076fc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076f8:	f000 fb46 	bl	8007d88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80076fc:	4b1c      	ldr	r3, [pc, #112]	; (8007770 <xTaskResumeAll+0x130>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d010      	beq.n	800772a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007708:	f000 f846 	bl	8007798 <xTaskIncrementTick>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d002      	beq.n	8007718 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007712:	4b16      	ldr	r3, [pc, #88]	; (800776c <xTaskResumeAll+0x12c>)
 8007714:	2201      	movs	r2, #1
 8007716:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	3b01      	subs	r3, #1
 800771c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1f1      	bne.n	8007708 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007724:	4b12      	ldr	r3, [pc, #72]	; (8007770 <xTaskResumeAll+0x130>)
 8007726:	2200      	movs	r2, #0
 8007728:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800772a:	4b10      	ldr	r3, [pc, #64]	; (800776c <xTaskResumeAll+0x12c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d009      	beq.n	8007746 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007732:	2301      	movs	r3, #1
 8007734:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007736:	4b0f      	ldr	r3, [pc, #60]	; (8007774 <xTaskResumeAll+0x134>)
 8007738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007746:	f001 f8b7 	bl	80088b8 <vPortExitCritical>

	return xAlreadyYielded;
 800774a:	68bb      	ldr	r3, [r7, #8]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3710      	adds	r7, #16
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20000bec 	.word	0x20000bec
 8007758:	20000bc4 	.word	0x20000bc4
 800775c:	20000b84 	.word	0x20000b84
 8007760:	20000bcc 	.word	0x20000bcc
 8007764:	200006f4 	.word	0x200006f4
 8007768:	200006f0 	.word	0x200006f0
 800776c:	20000bd8 	.word	0x20000bd8
 8007770:	20000bd4 	.word	0x20000bd4
 8007774:	e000ed04 	.word	0xe000ed04

08007778 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800777e:	4b05      	ldr	r3, [pc, #20]	; (8007794 <xTaskGetTickCount+0x1c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007784:	687b      	ldr	r3, [r7, #4]
}
 8007786:	4618      	mov	r0, r3
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	20000bc8 	.word	0x20000bc8

08007798 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800779e:	2300      	movs	r3, #0
 80077a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077a2:	4b4e      	ldr	r3, [pc, #312]	; (80078dc <xTaskIncrementTick+0x144>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f040 8088 	bne.w	80078bc <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80077ac:	4b4c      	ldr	r3, [pc, #304]	; (80078e0 <xTaskIncrementTick+0x148>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3301      	adds	r3, #1
 80077b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077b4:	4a4a      	ldr	r2, [pc, #296]	; (80078e0 <xTaskIncrementTick+0x148>)
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d11f      	bne.n	8007800 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80077c0:	4b48      	ldr	r3, [pc, #288]	; (80078e4 <xTaskIncrementTick+0x14c>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d009      	beq.n	80077de <xTaskIncrementTick+0x46>
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	603b      	str	r3, [r7, #0]
 80077dc:	e7fe      	b.n	80077dc <xTaskIncrementTick+0x44>
 80077de:	4b41      	ldr	r3, [pc, #260]	; (80078e4 <xTaskIncrementTick+0x14c>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]
 80077e4:	4b40      	ldr	r3, [pc, #256]	; (80078e8 <xTaskIncrementTick+0x150>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a3e      	ldr	r2, [pc, #248]	; (80078e4 <xTaskIncrementTick+0x14c>)
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	4a3e      	ldr	r2, [pc, #248]	; (80078e8 <xTaskIncrementTick+0x150>)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	4b3e      	ldr	r3, [pc, #248]	; (80078ec <xTaskIncrementTick+0x154>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3301      	adds	r3, #1
 80077f8:	4a3c      	ldr	r2, [pc, #240]	; (80078ec <xTaskIncrementTick+0x154>)
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	f000 fac4 	bl	8007d88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007800:	4b3b      	ldr	r3, [pc, #236]	; (80078f0 <xTaskIncrementTick+0x158>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	429a      	cmp	r2, r3
 8007808:	d349      	bcc.n	800789e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800780a:	4b36      	ldr	r3, [pc, #216]	; (80078e4 <xTaskIncrementTick+0x14c>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d104      	bne.n	800781e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007814:	4b36      	ldr	r3, [pc, #216]	; (80078f0 <xTaskIncrementTick+0x158>)
 8007816:	f04f 32ff 	mov.w	r2, #4294967295
 800781a:	601a      	str	r2, [r3, #0]
					break;
 800781c:	e03f      	b.n	800789e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800781e:	4b31      	ldr	r3, [pc, #196]	; (80078e4 <xTaskIncrementTick+0x14c>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	429a      	cmp	r2, r3
 8007834:	d203      	bcs.n	800783e <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007836:	4a2e      	ldr	r2, [pc, #184]	; (80078f0 <xTaskIncrementTick+0x158>)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800783c:	e02f      	b.n	800789e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	3304      	adds	r3, #4
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe ffb8 	bl	80067b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	3318      	adds	r3, #24
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe ffaf 	bl	80067b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785e:	4b25      	ldr	r3, [pc, #148]	; (80078f4 <xTaskIncrementTick+0x15c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	429a      	cmp	r2, r3
 8007864:	d903      	bls.n	800786e <xTaskIncrementTick+0xd6>
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786a:	4a22      	ldr	r2, [pc, #136]	; (80078f4 <xTaskIncrementTick+0x15c>)
 800786c:	6013      	str	r3, [r2, #0]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007872:	4613      	mov	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4a1f      	ldr	r2, [pc, #124]	; (80078f8 <xTaskIncrementTick+0x160>)
 800787c:	441a      	add	r2, r3
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	3304      	adds	r3, #4
 8007882:	4619      	mov	r1, r3
 8007884:	4610      	mov	r0, r2
 8007886:	f7fe ff3a 	bl	80066fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788e:	4b1b      	ldr	r3, [pc, #108]	; (80078fc <xTaskIncrementTick+0x164>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	429a      	cmp	r2, r3
 8007896:	d3b8      	bcc.n	800780a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007898:	2301      	movs	r3, #1
 800789a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800789c:	e7b5      	b.n	800780a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800789e:	4b17      	ldr	r3, [pc, #92]	; (80078fc <xTaskIncrementTick+0x164>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a4:	4914      	ldr	r1, [pc, #80]	; (80078f8 <xTaskIncrementTick+0x160>)
 80078a6:	4613      	mov	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	440b      	add	r3, r1
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d907      	bls.n	80078c6 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80078b6:	2301      	movs	r3, #1
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	e004      	b.n	80078c6 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80078bc:	4b10      	ldr	r3, [pc, #64]	; (8007900 <xTaskIncrementTick+0x168>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3301      	adds	r3, #1
 80078c2:	4a0f      	ldr	r2, [pc, #60]	; (8007900 <xTaskIncrementTick+0x168>)
 80078c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80078c6:	4b0f      	ldr	r3, [pc, #60]	; (8007904 <xTaskIncrementTick+0x16c>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80078ce:	2301      	movs	r3, #1
 80078d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80078d2:	697b      	ldr	r3, [r7, #20]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	20000bec 	.word	0x20000bec
 80078e0:	20000bc8 	.word	0x20000bc8
 80078e4:	20000b7c 	.word	0x20000b7c
 80078e8:	20000b80 	.word	0x20000b80
 80078ec:	20000bdc 	.word	0x20000bdc
 80078f0:	20000be4 	.word	0x20000be4
 80078f4:	20000bcc 	.word	0x20000bcc
 80078f8:	200006f4 	.word	0x200006f4
 80078fc:	200006f0 	.word	0x200006f0
 8007900:	20000bd4 	.word	0x20000bd4
 8007904:	20000bd8 	.word	0x20000bd8

08007908 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800790e:	4b27      	ldr	r3, [pc, #156]	; (80079ac <vTaskSwitchContext+0xa4>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007916:	4b26      	ldr	r3, [pc, #152]	; (80079b0 <vTaskSwitchContext+0xa8>)
 8007918:	2201      	movs	r2, #1
 800791a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800791c:	e040      	b.n	80079a0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800791e:	4b24      	ldr	r3, [pc, #144]	; (80079b0 <vTaskSwitchContext+0xa8>)
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007924:	4b23      	ldr	r3, [pc, #140]	; (80079b4 <vTaskSwitchContext+0xac>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60fb      	str	r3, [r7, #12]
 800792a:	e00f      	b.n	800794c <vTaskSwitchContext+0x44>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d109      	bne.n	8007946 <vTaskSwitchContext+0x3e>
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	e7fe      	b.n	8007944 <vTaskSwitchContext+0x3c>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3b01      	subs	r3, #1
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	491a      	ldr	r1, [pc, #104]	; (80079b8 <vTaskSwitchContext+0xb0>)
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	440b      	add	r3, r1
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0e5      	beq.n	800792c <vTaskSwitchContext+0x24>
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4a13      	ldr	r2, [pc, #76]	; (80079b8 <vTaskSwitchContext+0xb0>)
 800796c:	4413      	add	r3, r2
 800796e:	60bb      	str	r3, [r7, #8]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	605a      	str	r2, [r3, #4]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	685a      	ldr	r2, [r3, #4]
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	3308      	adds	r3, #8
 8007982:	429a      	cmp	r2, r3
 8007984:	d104      	bne.n	8007990 <vTaskSwitchContext+0x88>
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	605a      	str	r2, [r3, #4]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	4a09      	ldr	r2, [pc, #36]	; (80079bc <vTaskSwitchContext+0xb4>)
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	4a06      	ldr	r2, [pc, #24]	; (80079b4 <vTaskSwitchContext+0xac>)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6013      	str	r3, [r2, #0]
}
 80079a0:	bf00      	nop
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	20000bec 	.word	0x20000bec
 80079b0:	20000bd8 	.word	0x20000bd8
 80079b4:	20000bcc 	.word	0x20000bcc
 80079b8:	200006f4 	.word	0x200006f4
 80079bc:	200006f0 	.word	0x200006f0

080079c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d109      	bne.n	80079e4 <vTaskPlaceOnEventList+0x24>
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	e7fe      	b.n	80079e2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079e4:	4b07      	ldr	r3, [pc, #28]	; (8007a04 <vTaskPlaceOnEventList+0x44>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3318      	adds	r3, #24
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f7fe feaa 	bl	8006746 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079f2:	2101      	movs	r1, #1
 80079f4:	6838      	ldr	r0, [r7, #0]
 80079f6:	f000 fa71 	bl	8007edc <prvAddCurrentTaskToDelayedList>
}
 80079fa:	bf00      	nop
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	200006f0 	.word	0x200006f0

08007a08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d109      	bne.n	8007a2e <vTaskPlaceOnEventListRestricted+0x26>
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	617b      	str	r3, [r7, #20]
 8007a2c:	e7fe      	b.n	8007a2c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	; (8007a58 <vTaskPlaceOnEventListRestricted+0x50>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3318      	adds	r3, #24
 8007a34:	4619      	mov	r1, r3
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f7fe fe61 	bl	80066fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8007a42:	f04f 33ff 	mov.w	r3, #4294967295
 8007a46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a48:	6879      	ldr	r1, [r7, #4]
 8007a4a:	68b8      	ldr	r0, [r7, #8]
 8007a4c:	f000 fa46 	bl	8007edc <prvAddCurrentTaskToDelayedList>
	}
 8007a50:	bf00      	nop
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	200006f0 	.word	0x200006f0

08007a5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d109      	bne.n	8007a86 <xTaskRemoveFromEventList+0x2a>
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	e7fe      	b.n	8007a84 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	3318      	adds	r3, #24
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7fe fe94 	bl	80067b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a90:	4b1d      	ldr	r3, [pc, #116]	; (8007b08 <xTaskRemoveFromEventList+0xac>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d11d      	bne.n	8007ad4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	3304      	adds	r3, #4
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fe fe8b 	bl	80067b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa6:	4b19      	ldr	r3, [pc, #100]	; (8007b0c <xTaskRemoveFromEventList+0xb0>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d903      	bls.n	8007ab6 <xTaskRemoveFromEventList+0x5a>
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab2:	4a16      	ldr	r2, [pc, #88]	; (8007b0c <xTaskRemoveFromEventList+0xb0>)
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aba:	4613      	mov	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4a13      	ldr	r2, [pc, #76]	; (8007b10 <xTaskRemoveFromEventList+0xb4>)
 8007ac4:	441a      	add	r2, r3
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f7fe fe16 	bl	80066fe <vListInsertEnd>
 8007ad2:	e005      	b.n	8007ae0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	3318      	adds	r3, #24
 8007ad8:	4619      	mov	r1, r3
 8007ada:	480e      	ldr	r0, [pc, #56]	; (8007b14 <xTaskRemoveFromEventList+0xb8>)
 8007adc:	f7fe fe0f 	bl	80066fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <xTaskRemoveFromEventList+0xbc>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d905      	bls.n	8007afa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007aee:	2301      	movs	r3, #1
 8007af0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007af2:	4b0a      	ldr	r3, [pc, #40]	; (8007b1c <xTaskRemoveFromEventList+0xc0>)
 8007af4:	2201      	movs	r2, #1
 8007af6:	601a      	str	r2, [r3, #0]
 8007af8:	e001      	b.n	8007afe <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007afa:	2300      	movs	r3, #0
 8007afc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007afe:	697b      	ldr	r3, [r7, #20]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3718      	adds	r7, #24
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	20000bec 	.word	0x20000bec
 8007b0c:	20000bcc 	.word	0x20000bcc
 8007b10:	200006f4 	.word	0x200006f4
 8007b14:	20000b84 	.word	0x20000b84
 8007b18:	200006f0 	.word	0x200006f0
 8007b1c:	20000bd8 	.word	0x20000bd8

08007b20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b28:	4b06      	ldr	r3, [pc, #24]	; (8007b44 <vTaskInternalSetTimeOutState+0x24>)
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b30:	4b05      	ldr	r3, [pc, #20]	; (8007b48 <vTaskInternalSetTimeOutState+0x28>)
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	605a      	str	r2, [r3, #4]
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	20000bdc 	.word	0x20000bdc
 8007b48:	20000bc8 	.word	0x20000bc8

08007b4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b088      	sub	sp, #32
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d109      	bne.n	8007b70 <xTaskCheckForTimeOut+0x24>
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	f383 8811 	msr	BASEPRI, r3
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	f3bf 8f4f 	dsb	sy
 8007b6c:	613b      	str	r3, [r7, #16]
 8007b6e:	e7fe      	b.n	8007b6e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d109      	bne.n	8007b8a <xTaskCheckForTimeOut+0x3e>
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	e7fe      	b.n	8007b88 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007b8a:	f000 fe67 	bl	800885c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b8e:	4b1d      	ldr	r3, [pc, #116]	; (8007c04 <xTaskCheckForTimeOut+0xb8>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	69ba      	ldr	r2, [r7, #24]
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba6:	d102      	bne.n	8007bae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	61fb      	str	r3, [r7, #28]
 8007bac:	e023      	b.n	8007bf6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	4b15      	ldr	r3, [pc, #84]	; (8007c08 <xTaskCheckForTimeOut+0xbc>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d007      	beq.n	8007bca <xTaskCheckForTimeOut+0x7e>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d302      	bcc.n	8007bca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	61fb      	str	r3, [r7, #28]
 8007bc8:	e015      	b.n	8007bf6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	697a      	ldr	r2, [r7, #20]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d20b      	bcs.n	8007bec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	1ad2      	subs	r2, r2, r3
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff ff9d 	bl	8007b20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007be6:	2300      	movs	r3, #0
 8007be8:	61fb      	str	r3, [r7, #28]
 8007bea:	e004      	b.n	8007bf6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007bf6:	f000 fe5f 	bl	80088b8 <vPortExitCritical>

	return xReturn;
 8007bfa:	69fb      	ldr	r3, [r7, #28]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3720      	adds	r7, #32
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	20000bc8 	.word	0x20000bc8
 8007c08:	20000bdc 	.word	0x20000bdc

08007c0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c10:	4b03      	ldr	r3, [pc, #12]	; (8007c20 <vTaskMissedYield+0x14>)
 8007c12:	2201      	movs	r2, #1
 8007c14:	601a      	str	r2, [r3, #0]
}
 8007c16:	bf00      	nop
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	20000bd8 	.word	0x20000bd8

08007c24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c2c:	f000 f852 	bl	8007cd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c30:	4b06      	ldr	r3, [pc, #24]	; (8007c4c <prvIdleTask+0x28>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d9f9      	bls.n	8007c2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c38:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <prvIdleTask+0x2c>)
 8007c3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c48:	e7f0      	b.n	8007c2c <prvIdleTask+0x8>
 8007c4a:	bf00      	nop
 8007c4c:	200006f4 	.word	0x200006f4
 8007c50:	e000ed04 	.word	0xe000ed04

08007c54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	607b      	str	r3, [r7, #4]
 8007c5e:	e00c      	b.n	8007c7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	4613      	mov	r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4a12      	ldr	r2, [pc, #72]	; (8007cb4 <prvInitialiseTaskLists+0x60>)
 8007c6c:	4413      	add	r3, r2
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe fd18 	bl	80066a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	3301      	adds	r3, #1
 8007c78:	607b      	str	r3, [r7, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b37      	cmp	r3, #55	; 0x37
 8007c7e:	d9ef      	bls.n	8007c60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c80:	480d      	ldr	r0, [pc, #52]	; (8007cb8 <prvInitialiseTaskLists+0x64>)
 8007c82:	f7fe fd0f 	bl	80066a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c86:	480d      	ldr	r0, [pc, #52]	; (8007cbc <prvInitialiseTaskLists+0x68>)
 8007c88:	f7fe fd0c 	bl	80066a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c8c:	480c      	ldr	r0, [pc, #48]	; (8007cc0 <prvInitialiseTaskLists+0x6c>)
 8007c8e:	f7fe fd09 	bl	80066a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c92:	480c      	ldr	r0, [pc, #48]	; (8007cc4 <prvInitialiseTaskLists+0x70>)
 8007c94:	f7fe fd06 	bl	80066a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c98:	480b      	ldr	r0, [pc, #44]	; (8007cc8 <prvInitialiseTaskLists+0x74>)
 8007c9a:	f7fe fd03 	bl	80066a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c9e:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <prvInitialiseTaskLists+0x78>)
 8007ca0:	4a05      	ldr	r2, [pc, #20]	; (8007cb8 <prvInitialiseTaskLists+0x64>)
 8007ca2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ca4:	4b0a      	ldr	r3, [pc, #40]	; (8007cd0 <prvInitialiseTaskLists+0x7c>)
 8007ca6:	4a05      	ldr	r2, [pc, #20]	; (8007cbc <prvInitialiseTaskLists+0x68>)
 8007ca8:	601a      	str	r2, [r3, #0]
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	200006f4 	.word	0x200006f4
 8007cb8:	20000b54 	.word	0x20000b54
 8007cbc:	20000b68 	.word	0x20000b68
 8007cc0:	20000b84 	.word	0x20000b84
 8007cc4:	20000b98 	.word	0x20000b98
 8007cc8:	20000bb0 	.word	0x20000bb0
 8007ccc:	20000b7c 	.word	0x20000b7c
 8007cd0:	20000b80 	.word	0x20000b80

08007cd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cda:	e019      	b.n	8007d10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007cdc:	f000 fdbe 	bl	800885c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce0:	4b0f      	ldr	r3, [pc, #60]	; (8007d20 <prvCheckTasksWaitingTermination+0x4c>)
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3304      	adds	r3, #4
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fe fd63 	bl	80067b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cf2:	4b0c      	ldr	r3, [pc, #48]	; (8007d24 <prvCheckTasksWaitingTermination+0x50>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	4a0a      	ldr	r2, [pc, #40]	; (8007d24 <prvCheckTasksWaitingTermination+0x50>)
 8007cfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cfc:	4b0a      	ldr	r3, [pc, #40]	; (8007d28 <prvCheckTasksWaitingTermination+0x54>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	4a09      	ldr	r2, [pc, #36]	; (8007d28 <prvCheckTasksWaitingTermination+0x54>)
 8007d04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d06:	f000 fdd7 	bl	80088b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f80e 	bl	8007d2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d10:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <prvCheckTasksWaitingTermination+0x54>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1e1      	bne.n	8007cdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d18:	bf00      	nop
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	20000b98 	.word	0x20000b98
 8007d24:	20000bc4 	.word	0x20000bc4
 8007d28:	20000bac 	.word	0x20000bac

08007d2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d108      	bne.n	8007d50 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 ff66 	bl	8008c14 <vPortFree>
				vPortFree( pxTCB );
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 ff63 	bl	8008c14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d4e:	e017      	b.n	8007d80 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d103      	bne.n	8007d62 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 ff5a 	bl	8008c14 <vPortFree>
	}
 8007d60:	e00e      	b.n	8007d80 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d009      	beq.n	8007d80 <prvDeleteTCB+0x54>
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	60fb      	str	r3, [r7, #12]
 8007d7e:	e7fe      	b.n	8007d7e <prvDeleteTCB+0x52>
	}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d8e:	4b0c      	ldr	r3, [pc, #48]	; (8007dc0 <prvResetNextTaskUnblockTime+0x38>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d104      	bne.n	8007da2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d98:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <prvResetNextTaskUnblockTime+0x3c>)
 8007d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007da0:	e008      	b.n	8007db4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007da2:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <prvResetNextTaskUnblockTime+0x38>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	4a04      	ldr	r2, [pc, #16]	; (8007dc4 <prvResetNextTaskUnblockTime+0x3c>)
 8007db2:	6013      	str	r3, [r2, #0]
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	20000b7c 	.word	0x20000b7c
 8007dc4:	20000be4 	.word	0x20000be4

08007dc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007dce:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <xTaskGetSchedulerState+0x34>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d102      	bne.n	8007ddc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	607b      	str	r3, [r7, #4]
 8007dda:	e008      	b.n	8007dee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ddc:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <xTaskGetSchedulerState+0x38>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d102      	bne.n	8007dea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007de4:	2302      	movs	r3, #2
 8007de6:	607b      	str	r3, [r7, #4]
 8007de8:	e001      	b.n	8007dee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007dea:	2300      	movs	r3, #0
 8007dec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007dee:	687b      	ldr	r3, [r7, #4]
	}
 8007df0:	4618      	mov	r0, r3
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	20000bd0 	.word	0x20000bd0
 8007e00:	20000bec 	.word	0x20000bec

08007e04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e10:	2300      	movs	r3, #0
 8007e12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d054      	beq.n	8007ec4 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e1a:	4b2d      	ldr	r3, [pc, #180]	; (8007ed0 <xTaskPriorityDisinherit+0xcc>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d009      	beq.n	8007e38 <xTaskPriorityDisinherit+0x34>
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	e7fe      	b.n	8007e36 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d109      	bne.n	8007e54 <xTaskPriorityDisinherit+0x50>
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	60bb      	str	r3, [r7, #8]
 8007e52:	e7fe      	b.n	8007e52 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e58:	1e5a      	subs	r2, r3, #1
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d02c      	beq.n	8007ec4 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d128      	bne.n	8007ec4 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	3304      	adds	r3, #4
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fe fc9e 	bl	80067b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e94:	4b0f      	ldr	r3, [pc, #60]	; (8007ed4 <xTaskPriorityDisinherit+0xd0>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d903      	bls.n	8007ea4 <xTaskPriorityDisinherit+0xa0>
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	4a0c      	ldr	r2, [pc, #48]	; (8007ed4 <xTaskPriorityDisinherit+0xd0>)
 8007ea2:	6013      	str	r3, [r2, #0]
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	4a09      	ldr	r2, [pc, #36]	; (8007ed8 <xTaskPriorityDisinherit+0xd4>)
 8007eb2:	441a      	add	r2, r3
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	3304      	adds	r3, #4
 8007eb8:	4619      	mov	r1, r3
 8007eba:	4610      	mov	r0, r2
 8007ebc:	f7fe fc1f 	bl	80066fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ec4:	697b      	ldr	r3, [r7, #20]
	}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	200006f0 	.word	0x200006f0
 8007ed4:	20000bcc 	.word	0x20000bcc
 8007ed8:	200006f4 	.word	0x200006f4

08007edc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ee6:	4b21      	ldr	r3, [pc, #132]	; (8007f6c <prvAddCurrentTaskToDelayedList+0x90>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007eec:	4b20      	ldr	r3, [pc, #128]	; (8007f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe fc60 	bl	80067b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efe:	d10a      	bne.n	8007f16 <prvAddCurrentTaskToDelayedList+0x3a>
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d007      	beq.n	8007f16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f06:	4b1a      	ldr	r3, [pc, #104]	; (8007f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4819      	ldr	r0, [pc, #100]	; (8007f74 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f10:	f7fe fbf5 	bl	80066fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f14:	e026      	b.n	8007f64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4413      	add	r3, r2
 8007f1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f1e:	4b14      	ldr	r3, [pc, #80]	; (8007f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d209      	bcs.n	8007f42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f2e:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	4b0f      	ldr	r3, [pc, #60]	; (8007f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	3304      	adds	r3, #4
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	f7fe fc03 	bl	8006746 <vListInsert>
}
 8007f40:	e010      	b.n	8007f64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f42:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	4b0a      	ldr	r3, [pc, #40]	; (8007f70 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	4610      	mov	r0, r2
 8007f50:	f7fe fbf9 	bl	8006746 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f54:	4b0a      	ldr	r3, [pc, #40]	; (8007f80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68ba      	ldr	r2, [r7, #8]
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d202      	bcs.n	8007f64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f5e:	4a08      	ldr	r2, [pc, #32]	; (8007f80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	6013      	str	r3, [r2, #0]
}
 8007f64:	bf00      	nop
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	20000bc8 	.word	0x20000bc8
 8007f70:	200006f0 	.word	0x200006f0
 8007f74:	20000bb0 	.word	0x20000bb0
 8007f78:	20000b80 	.word	0x20000b80
 8007f7c:	20000b7c 	.word	0x20000b7c
 8007f80:	20000be4 	.word	0x20000be4

08007f84 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b08a      	sub	sp, #40	; 0x28
 8007f88:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f8e:	f000 faff 	bl	8008590 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f92:	4b1c      	ldr	r3, [pc, #112]	; (8008004 <xTimerCreateTimerTask+0x80>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d021      	beq.n	8007fde <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007fa2:	1d3a      	adds	r2, r7, #4
 8007fa4:	f107 0108 	add.w	r1, r7, #8
 8007fa8:	f107 030c 	add.w	r3, r7, #12
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fe fb5f 	bl	8006670 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	9202      	str	r2, [sp, #8]
 8007fba:	9301      	str	r3, [sp, #4]
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	9300      	str	r3, [sp, #0]
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	460a      	mov	r2, r1
 8007fc4:	4910      	ldr	r1, [pc, #64]	; (8008008 <xTimerCreateTimerTask+0x84>)
 8007fc6:	4811      	ldr	r0, [pc, #68]	; (800800c <xTimerCreateTimerTask+0x88>)
 8007fc8:	f7ff f8f4 	bl	80071b4 <xTaskCreateStatic>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	4b10      	ldr	r3, [pc, #64]	; (8008010 <xTimerCreateTimerTask+0x8c>)
 8007fd0:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007fd2:	4b0f      	ldr	r3, [pc, #60]	; (8008010 <xTimerCreateTimerTask+0x8c>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d001      	beq.n	8007fde <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d109      	bne.n	8007ff8 <xTimerCreateTimerTask+0x74>
 8007fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	613b      	str	r3, [r7, #16]
 8007ff6:	e7fe      	b.n	8007ff6 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007ff8:	697b      	ldr	r3, [r7, #20]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3718      	adds	r7, #24
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	20000c20 	.word	0x20000c20
 8008008:	08008f78 	.word	0x08008f78
 800800c:	08008145 	.word	0x08008145
 8008010:	20000c24 	.word	0x20000c24

08008014 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08a      	sub	sp, #40	; 0x28
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
 8008020:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008022:	2300      	movs	r3, #0
 8008024:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d109      	bne.n	8008040 <xTimerGenericCommand+0x2c>
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	623b      	str	r3, [r7, #32]
 800803e:	e7fe      	b.n	800803e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008040:	4b19      	ldr	r3, [pc, #100]	; (80080a8 <xTimerGenericCommand+0x94>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d02a      	beq.n	800809e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b05      	cmp	r3, #5
 8008058:	dc18      	bgt.n	800808c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800805a:	f7ff feb5 	bl	8007dc8 <xTaskGetSchedulerState>
 800805e:	4603      	mov	r3, r0
 8008060:	2b02      	cmp	r3, #2
 8008062:	d109      	bne.n	8008078 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008064:	4b10      	ldr	r3, [pc, #64]	; (80080a8 <xTimerGenericCommand+0x94>)
 8008066:	6818      	ldr	r0, [r3, #0]
 8008068:	f107 0110 	add.w	r1, r7, #16
 800806c:	2300      	movs	r3, #0
 800806e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008070:	f7fe fcca 	bl	8006a08 <xQueueGenericSend>
 8008074:	6278      	str	r0, [r7, #36]	; 0x24
 8008076:	e012      	b.n	800809e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008078:	4b0b      	ldr	r3, [pc, #44]	; (80080a8 <xTimerGenericCommand+0x94>)
 800807a:	6818      	ldr	r0, [r3, #0]
 800807c:	f107 0110 	add.w	r1, r7, #16
 8008080:	2300      	movs	r3, #0
 8008082:	2200      	movs	r2, #0
 8008084:	f7fe fcc0 	bl	8006a08 <xQueueGenericSend>
 8008088:	6278      	str	r0, [r7, #36]	; 0x24
 800808a:	e008      	b.n	800809e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800808c:	4b06      	ldr	r3, [pc, #24]	; (80080a8 <xTimerGenericCommand+0x94>)
 800808e:	6818      	ldr	r0, [r3, #0]
 8008090:	f107 0110 	add.w	r1, r7, #16
 8008094:	2300      	movs	r3, #0
 8008096:	683a      	ldr	r2, [r7, #0]
 8008098:	f7fe fdb0 	bl	8006bfc <xQueueGenericSendFromISR>
 800809c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3728      	adds	r7, #40	; 0x28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	20000c20 	.word	0x20000c20

080080ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080ac:	b580      	push	{r7, lr}
 80080ae:	b088      	sub	sp, #32
 80080b0:	af02      	add	r7, sp, #8
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080b6:	4b22      	ldr	r3, [pc, #136]	; (8008140 <prvProcessExpiredTimer+0x94>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7fe fb77 	bl	80067b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d021      	beq.n	800811c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	699a      	ldr	r2, [r3, #24]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	18d1      	adds	r1, r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	6978      	ldr	r0, [r7, #20]
 80080e6:	f000 f8d1 	bl	800828c <prvInsertTimerInActiveList>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01e      	beq.n	800812e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080f0:	2300      	movs	r3, #0
 80080f2:	9300      	str	r3, [sp, #0]
 80080f4:	2300      	movs	r3, #0
 80080f6:	687a      	ldr	r2, [r7, #4]
 80080f8:	2100      	movs	r1, #0
 80080fa:	6978      	ldr	r0, [r7, #20]
 80080fc:	f7ff ff8a 	bl	8008014 <xTimerGenericCommand>
 8008100:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d112      	bne.n	800812e <prvProcessExpiredTimer+0x82>
 8008108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810c:	f383 8811 	msr	BASEPRI, r3
 8008110:	f3bf 8f6f 	isb	sy
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	60fb      	str	r3, [r7, #12]
 800811a:	e7fe      	b.n	800811a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008122:	f023 0301 	bic.w	r3, r3, #1
 8008126:	b2da      	uxtb	r2, r3
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	6978      	ldr	r0, [r7, #20]
 8008134:	4798      	blx	r3
}
 8008136:	bf00      	nop
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20000c18 	.word	0x20000c18

08008144 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800814c:	f107 0308 	add.w	r3, r7, #8
 8008150:	4618      	mov	r0, r3
 8008152:	f000 f857 	bl	8008204 <prvGetNextExpireTime>
 8008156:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	4619      	mov	r1, r3
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f000 f803 	bl	8008168 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008162:	f000 f8d5 	bl	8008310 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008166:	e7f1      	b.n	800814c <prvTimerTask+0x8>

08008168 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008172:	f7ff fa57 	bl	8007624 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008176:	f107 0308 	add.w	r3, r7, #8
 800817a:	4618      	mov	r0, r3
 800817c:	f000 f866 	bl	800824c <prvSampleTimeNow>
 8008180:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d130      	bne.n	80081ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d10a      	bne.n	80081a4 <prvProcessTimerOrBlockTask+0x3c>
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	429a      	cmp	r2, r3
 8008194:	d806      	bhi.n	80081a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008196:	f7ff fa53 	bl	8007640 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800819a:	68f9      	ldr	r1, [r7, #12]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7ff ff85 	bl	80080ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081a2:	e024      	b.n	80081ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d008      	beq.n	80081bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081aa:	4b13      	ldr	r3, [pc, #76]	; (80081f8 <prvProcessTimerOrBlockTask+0x90>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <prvProcessTimerOrBlockTask+0x50>
 80081b4:	2301      	movs	r3, #1
 80081b6:	e000      	b.n	80081ba <prvProcessTimerOrBlockTask+0x52>
 80081b8:	2300      	movs	r3, #0
 80081ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081bc:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <prvProcessTimerOrBlockTask+0x94>)
 80081be:	6818      	ldr	r0, [r3, #0]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	4619      	mov	r1, r3
 80081ca:	f7fe ffbf 	bl	800714c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80081ce:	f7ff fa37 	bl	8007640 <xTaskResumeAll>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10a      	bne.n	80081ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80081d8:	4b09      	ldr	r3, [pc, #36]	; (8008200 <prvProcessTimerOrBlockTask+0x98>)
 80081da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	f3bf 8f6f 	isb	sy
}
 80081e8:	e001      	b.n	80081ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80081ea:	f7ff fa29 	bl	8007640 <xTaskResumeAll>
}
 80081ee:	bf00      	nop
 80081f0:	3710      	adds	r7, #16
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20000c1c 	.word	0x20000c1c
 80081fc:	20000c20 	.word	0x20000c20
 8008200:	e000ed04 	.word	0xe000ed04

08008204 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800820c:	4b0e      	ldr	r3, [pc, #56]	; (8008248 <prvGetNextExpireTime+0x44>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d101      	bne.n	800821a <prvGetNextExpireTime+0x16>
 8008216:	2201      	movs	r2, #1
 8008218:	e000      	b.n	800821c <prvGetNextExpireTime+0x18>
 800821a:	2200      	movs	r2, #0
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d105      	bne.n	8008234 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008228:	4b07      	ldr	r3, [pc, #28]	; (8008248 <prvGetNextExpireTime+0x44>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	e001      	b.n	8008238 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008234:	2300      	movs	r3, #0
 8008236:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008238:	68fb      	ldr	r3, [r7, #12]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	20000c18 	.word	0x20000c18

0800824c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008254:	f7ff fa90 	bl	8007778 <xTaskGetTickCount>
 8008258:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800825a:	4b0b      	ldr	r3, [pc, #44]	; (8008288 <prvSampleTimeNow+0x3c>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	429a      	cmp	r2, r3
 8008262:	d205      	bcs.n	8008270 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008264:	f000 f930 	bl	80084c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	601a      	str	r2, [r3, #0]
 800826e:	e002      	b.n	8008276 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008276:	4a04      	ldr	r2, [pc, #16]	; (8008288 <prvSampleTimeNow+0x3c>)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800827c:	68fb      	ldr	r3, [r7, #12]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000c28 	.word	0x20000c28

0800828c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	607a      	str	r2, [r7, #4]
 8008298:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800829a:	2300      	movs	r3, #0
 800829c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d812      	bhi.n	80082d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	1ad2      	subs	r2, r2, r3
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	699b      	ldr	r3, [r3, #24]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d302      	bcc.n	80082c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80082c0:	2301      	movs	r3, #1
 80082c2:	617b      	str	r3, [r7, #20]
 80082c4:	e01b      	b.n	80082fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80082c6:	4b10      	ldr	r3, [pc, #64]	; (8008308 <prvInsertTimerInActiveList+0x7c>)
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	3304      	adds	r3, #4
 80082ce:	4619      	mov	r1, r3
 80082d0:	4610      	mov	r0, r2
 80082d2:	f7fe fa38 	bl	8006746 <vListInsert>
 80082d6:	e012      	b.n	80082fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d206      	bcs.n	80082ee <prvInsertTimerInActiveList+0x62>
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d302      	bcc.n	80082ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80082e8:	2301      	movs	r3, #1
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	e007      	b.n	80082fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082ee:	4b07      	ldr	r3, [pc, #28]	; (800830c <prvInsertTimerInActiveList+0x80>)
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	3304      	adds	r3, #4
 80082f6:	4619      	mov	r1, r3
 80082f8:	4610      	mov	r0, r2
 80082fa:	f7fe fa24 	bl	8006746 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80082fe:	697b      	ldr	r3, [r7, #20]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3718      	adds	r7, #24
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}
 8008308:	20000c1c 	.word	0x20000c1c
 800830c:	20000c18 	.word	0x20000c18

08008310 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b08e      	sub	sp, #56	; 0x38
 8008314:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008316:	e0c6      	b.n	80084a6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2b00      	cmp	r3, #0
 800831c:	da17      	bge.n	800834e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800831e:	1d3b      	adds	r3, r7, #4
 8008320:	3304      	adds	r3, #4
 8008322:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	2b00      	cmp	r3, #0
 8008328:	d109      	bne.n	800833e <prvProcessReceivedCommands+0x2e>
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	61fb      	str	r3, [r7, #28]
 800833c:	e7fe      	b.n	800833c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800833e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008344:	6850      	ldr	r0, [r2, #4]
 8008346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008348:	6892      	ldr	r2, [r2, #8]
 800834a:	4611      	mov	r1, r2
 800834c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	f2c0 80a7 	blt.w	80084a4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800835a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d004      	beq.n	800836c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	3304      	adds	r3, #4
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe fa26 	bl	80067b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800836c:	463b      	mov	r3, r7
 800836e:	4618      	mov	r0, r3
 8008370:	f7ff ff6c 	bl	800824c <prvSampleTimeNow>
 8008374:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b09      	cmp	r3, #9
 800837a:	f200 8094 	bhi.w	80084a6 <prvProcessReceivedCommands+0x196>
 800837e:	a201      	add	r2, pc, #4	; (adr r2, 8008384 <prvProcessReceivedCommands+0x74>)
 8008380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008384:	080083ad 	.word	0x080083ad
 8008388:	080083ad 	.word	0x080083ad
 800838c:	080083ad 	.word	0x080083ad
 8008390:	0800841f 	.word	0x0800841f
 8008394:	08008433 	.word	0x08008433
 8008398:	0800847b 	.word	0x0800847b
 800839c:	080083ad 	.word	0x080083ad
 80083a0:	080083ad 	.word	0x080083ad
 80083a4:	0800841f 	.word	0x0800841f
 80083a8:	08008433 	.word	0x08008433
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083b2:	f043 0301 	orr.w	r3, r3, #1
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	18d1      	adds	r1, r2, r3
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083cc:	f7ff ff5e 	bl	800828c <prvInsertTimerInActiveList>
 80083d0:	4603      	mov	r3, r0
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d067      	beq.n	80084a6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	6a1b      	ldr	r3, [r3, #32]
 80083da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d05c      	beq.n	80084a6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	441a      	add	r2, r3
 80083f4:	2300      	movs	r3, #0
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	2300      	movs	r3, #0
 80083fa:	2100      	movs	r1, #0
 80083fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80083fe:	f7ff fe09 	bl	8008014 <xTimerGenericCommand>
 8008402:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d14d      	bne.n	80084a6 <prvProcessReceivedCommands+0x196>
 800840a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840e:	f383 8811 	msr	BASEPRI, r3
 8008412:	f3bf 8f6f 	isb	sy
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	61bb      	str	r3, [r7, #24]
 800841c:	e7fe      	b.n	800841c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008420:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008424:	f023 0301 	bic.w	r3, r3, #1
 8008428:	b2da      	uxtb	r2, r3
 800842a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008430:	e039      	b.n	80084a6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008438:	f043 0301 	orr.w	r3, r3, #1
 800843c:	b2da      	uxtb	r2, r3
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008448:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d109      	bne.n	8008466 <prvProcessReceivedCommands+0x156>
 8008452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	e7fe      	b.n	8008464 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	18d1      	adds	r1, r2, r3
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008474:	f7ff ff0a 	bl	800828c <prvInsertTimerInActiveList>
					break;
 8008478:	e015      	b.n	80084a6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008480:	f003 0302 	and.w	r3, r3, #2
 8008484:	2b00      	cmp	r3, #0
 8008486:	d103      	bne.n	8008490 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8008488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800848a:	f000 fbc3 	bl	8008c14 <vPortFree>
 800848e:	e00a      	b.n	80084a6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008496:	f023 0301 	bic.w	r3, r3, #1
 800849a:	b2da      	uxtb	r2, r3
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084a2:	e000      	b.n	80084a6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80084a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084a6:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <prvProcessReceivedCommands+0x1b4>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	1d39      	adds	r1, r7, #4
 80084ac:	2200      	movs	r2, #0
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe fc38 	bl	8006d24 <xQueueReceive>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f47f af2e 	bne.w	8008318 <prvProcessReceivedCommands+0x8>
	}
}
 80084bc:	bf00      	nop
 80084be:	3730      	adds	r7, #48	; 0x30
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	20000c20 	.word	0x20000c20

080084c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b088      	sub	sp, #32
 80084cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084ce:	e047      	b.n	8008560 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084d0:	4b2d      	ldr	r3, [pc, #180]	; (8008588 <prvSwitchTimerLists+0xc0>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084da:	4b2b      	ldr	r3, [pc, #172]	; (8008588 <prvSwitchTimerLists+0xc0>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3304      	adds	r3, #4
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fe f965 	bl	80067b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	2b00      	cmp	r3, #0
 8008502:	d02d      	beq.n	8008560 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	4413      	add	r3, r2
 800850c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	429a      	cmp	r2, r3
 8008514:	d90e      	bls.n	8008534 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008522:	4b19      	ldr	r3, [pc, #100]	; (8008588 <prvSwitchTimerLists+0xc0>)
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3304      	adds	r3, #4
 800852a:	4619      	mov	r1, r3
 800852c:	4610      	mov	r0, r2
 800852e:	f7fe f90a 	bl	8006746 <vListInsert>
 8008532:	e015      	b.n	8008560 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008534:	2300      	movs	r3, #0
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	2300      	movs	r3, #0
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	2100      	movs	r1, #0
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f7ff fd68 	bl	8008014 <xTimerGenericCommand>
 8008544:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d109      	bne.n	8008560 <prvSwitchTimerLists+0x98>
 800854c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008550:	f383 8811 	msr	BASEPRI, r3
 8008554:	f3bf 8f6f 	isb	sy
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	603b      	str	r3, [r7, #0]
 800855e:	e7fe      	b.n	800855e <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008560:	4b09      	ldr	r3, [pc, #36]	; (8008588 <prvSwitchTimerLists+0xc0>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1b2      	bne.n	80084d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800856a:	4b07      	ldr	r3, [pc, #28]	; (8008588 <prvSwitchTimerLists+0xc0>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008570:	4b06      	ldr	r3, [pc, #24]	; (800858c <prvSwitchTimerLists+0xc4>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a04      	ldr	r2, [pc, #16]	; (8008588 <prvSwitchTimerLists+0xc0>)
 8008576:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008578:	4a04      	ldr	r2, [pc, #16]	; (800858c <prvSwitchTimerLists+0xc4>)
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	6013      	str	r3, [r2, #0]
}
 800857e:	bf00      	nop
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20000c18 	.word	0x20000c18
 800858c:	20000c1c 	.word	0x20000c1c

08008590 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008596:	f000 f961 	bl	800885c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800859a:	4b15      	ldr	r3, [pc, #84]	; (80085f0 <prvCheckForValidListAndQueue+0x60>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d120      	bne.n	80085e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085a2:	4814      	ldr	r0, [pc, #80]	; (80085f4 <prvCheckForValidListAndQueue+0x64>)
 80085a4:	f7fe f87e 	bl	80066a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80085a8:	4813      	ldr	r0, [pc, #76]	; (80085f8 <prvCheckForValidListAndQueue+0x68>)
 80085aa:	f7fe f87b 	bl	80066a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80085ae:	4b13      	ldr	r3, [pc, #76]	; (80085fc <prvCheckForValidListAndQueue+0x6c>)
 80085b0:	4a10      	ldr	r2, [pc, #64]	; (80085f4 <prvCheckForValidListAndQueue+0x64>)
 80085b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085b4:	4b12      	ldr	r3, [pc, #72]	; (8008600 <prvCheckForValidListAndQueue+0x70>)
 80085b6:	4a10      	ldr	r2, [pc, #64]	; (80085f8 <prvCheckForValidListAndQueue+0x68>)
 80085b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085ba:	2300      	movs	r3, #0
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	4b11      	ldr	r3, [pc, #68]	; (8008604 <prvCheckForValidListAndQueue+0x74>)
 80085c0:	4a11      	ldr	r2, [pc, #68]	; (8008608 <prvCheckForValidListAndQueue+0x78>)
 80085c2:	2110      	movs	r1, #16
 80085c4:	200a      	movs	r0, #10
 80085c6:	f7fe f989 	bl	80068dc <xQueueGenericCreateStatic>
 80085ca:	4602      	mov	r2, r0
 80085cc:	4b08      	ldr	r3, [pc, #32]	; (80085f0 <prvCheckForValidListAndQueue+0x60>)
 80085ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80085d0:	4b07      	ldr	r3, [pc, #28]	; (80085f0 <prvCheckForValidListAndQueue+0x60>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d005      	beq.n	80085e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80085d8:	4b05      	ldr	r3, [pc, #20]	; (80085f0 <prvCheckForValidListAndQueue+0x60>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	490b      	ldr	r1, [pc, #44]	; (800860c <prvCheckForValidListAndQueue+0x7c>)
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fe fd8c 	bl	80070fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085e4:	f000 f968 	bl	80088b8 <vPortExitCritical>
}
 80085e8:	bf00      	nop
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	20000c20 	.word	0x20000c20
 80085f4:	20000bf0 	.word	0x20000bf0
 80085f8:	20000c04 	.word	0x20000c04
 80085fc:	20000c18 	.word	0x20000c18
 8008600:	20000c1c 	.word	0x20000c1c
 8008604:	20000ccc 	.word	0x20000ccc
 8008608:	20000c2c 	.word	0x20000c2c
 800860c:	08008f80 	.word	0x08008f80

08008610 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008610:	b480      	push	{r7}
 8008612:	b085      	sub	sp, #20
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	3b04      	subs	r3, #4
 8008620:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008628:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3b04      	subs	r3, #4
 800862e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f023 0201 	bic.w	r2, r3, #1
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3b04      	subs	r3, #4
 800863e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008640:	4a0c      	ldr	r2, [pc, #48]	; (8008674 <pxPortInitialiseStack+0x64>)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3b14      	subs	r3, #20
 800864a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	3b04      	subs	r3, #4
 8008656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f06f 0202 	mvn.w	r2, #2
 800865e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	3b20      	subs	r3, #32
 8008664:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008666:	68fb      	ldr	r3, [r7, #12]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr
 8008674:	08008679 	.word	0x08008679

08008678 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800867e:	2300      	movs	r3, #0
 8008680:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008682:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <prvTaskExitError+0x50>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868a:	d009      	beq.n	80086a0 <prvTaskExitError+0x28>
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	e7fe      	b.n	800869e <prvTaskExitError+0x26>
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086b2:	bf00      	nop
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0fc      	beq.n	80086b4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086ba:	bf00      	nop
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop
 80086c8:	2000000c 	.word	0x2000000c
 80086cc:	00000000 	.word	0x00000000

080086d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086d0:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <pxCurrentTCBConst2>)
 80086d2:	6819      	ldr	r1, [r3, #0]
 80086d4:	6808      	ldr	r0, [r1, #0]
 80086d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086da:	f380 8809 	msr	PSP, r0
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f04f 0000 	mov.w	r0, #0
 80086e6:	f380 8811 	msr	BASEPRI, r0
 80086ea:	4770      	bx	lr
 80086ec:	f3af 8000 	nop.w

080086f0 <pxCurrentTCBConst2>:
 80086f0:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086f4:	bf00      	nop
 80086f6:	bf00      	nop

080086f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80086f8:	4808      	ldr	r0, [pc, #32]	; (800871c <prvPortStartFirstTask+0x24>)
 80086fa:	6800      	ldr	r0, [r0, #0]
 80086fc:	6800      	ldr	r0, [r0, #0]
 80086fe:	f380 8808 	msr	MSP, r0
 8008702:	f04f 0000 	mov.w	r0, #0
 8008706:	f380 8814 	msr	CONTROL, r0
 800870a:	b662      	cpsie	i
 800870c:	b661      	cpsie	f
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	df00      	svc	0
 8008718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800871a:	bf00      	nop
 800871c:	e000ed08 	.word	0xe000ed08

08008720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008726:	4b44      	ldr	r3, [pc, #272]	; (8008838 <xPortStartScheduler+0x118>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a44      	ldr	r2, [pc, #272]	; (800883c <xPortStartScheduler+0x11c>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d109      	bne.n	8008744 <xPortStartScheduler+0x24>
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	613b      	str	r3, [r7, #16]
 8008742:	e7fe      	b.n	8008742 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008744:	4b3c      	ldr	r3, [pc, #240]	; (8008838 <xPortStartScheduler+0x118>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a3d      	ldr	r2, [pc, #244]	; (8008840 <xPortStartScheduler+0x120>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d109      	bne.n	8008762 <xPortStartScheduler+0x42>
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	60fb      	str	r3, [r7, #12]
 8008760:	e7fe      	b.n	8008760 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008762:	4b38      	ldr	r3, [pc, #224]	; (8008844 <xPortStartScheduler+0x124>)
 8008764:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	b2db      	uxtb	r3, r3
 800876c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	22ff      	movs	r2, #255	; 0xff
 8008772:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	b2db      	uxtb	r3, r3
 800877a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800877c:	78fb      	ldrb	r3, [r7, #3]
 800877e:	b2db      	uxtb	r3, r3
 8008780:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008784:	b2da      	uxtb	r2, r3
 8008786:	4b30      	ldr	r3, [pc, #192]	; (8008848 <xPortStartScheduler+0x128>)
 8008788:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800878a:	4b30      	ldr	r3, [pc, #192]	; (800884c <xPortStartScheduler+0x12c>)
 800878c:	2207      	movs	r2, #7
 800878e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008790:	e009      	b.n	80087a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008792:	4b2e      	ldr	r3, [pc, #184]	; (800884c <xPortStartScheduler+0x12c>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3b01      	subs	r3, #1
 8008798:	4a2c      	ldr	r2, [pc, #176]	; (800884c <xPortStartScheduler+0x12c>)
 800879a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800879c:	78fb      	ldrb	r3, [r7, #3]
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	005b      	lsls	r3, r3, #1
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087a6:	78fb      	ldrb	r3, [r7, #3]
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ae:	2b80      	cmp	r3, #128	; 0x80
 80087b0:	d0ef      	beq.n	8008792 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087b2:	4b26      	ldr	r3, [pc, #152]	; (800884c <xPortStartScheduler+0x12c>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f1c3 0307 	rsb	r3, r3, #7
 80087ba:	2b04      	cmp	r3, #4
 80087bc:	d009      	beq.n	80087d2 <xPortStartScheduler+0xb2>
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	60bb      	str	r3, [r7, #8]
 80087d0:	e7fe      	b.n	80087d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087d2:	4b1e      	ldr	r3, [pc, #120]	; (800884c <xPortStartScheduler+0x12c>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	021b      	lsls	r3, r3, #8
 80087d8:	4a1c      	ldr	r2, [pc, #112]	; (800884c <xPortStartScheduler+0x12c>)
 80087da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087dc:	4b1b      	ldr	r3, [pc, #108]	; (800884c <xPortStartScheduler+0x12c>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087e4:	4a19      	ldr	r2, [pc, #100]	; (800884c <xPortStartScheduler+0x12c>)
 80087e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087f0:	4b17      	ldr	r3, [pc, #92]	; (8008850 <xPortStartScheduler+0x130>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a16      	ldr	r2, [pc, #88]	; (8008850 <xPortStartScheduler+0x130>)
 80087f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087fc:	4b14      	ldr	r3, [pc, #80]	; (8008850 <xPortStartScheduler+0x130>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a13      	ldr	r2, [pc, #76]	; (8008850 <xPortStartScheduler+0x130>)
 8008802:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008806:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008808:	f000 f8d6 	bl	80089b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800880c:	4b11      	ldr	r3, [pc, #68]	; (8008854 <xPortStartScheduler+0x134>)
 800880e:	2200      	movs	r2, #0
 8008810:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008812:	f000 f8f5 	bl	8008a00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008816:	4b10      	ldr	r3, [pc, #64]	; (8008858 <xPortStartScheduler+0x138>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a0f      	ldr	r2, [pc, #60]	; (8008858 <xPortStartScheduler+0x138>)
 800881c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008820:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008822:	f7ff ff69 	bl	80086f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008826:	f7ff f86f 	bl	8007908 <vTaskSwitchContext>
	prvTaskExitError();
 800882a:	f7ff ff25 	bl	8008678 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3718      	adds	r7, #24
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	e000ed00 	.word	0xe000ed00
 800883c:	410fc271 	.word	0x410fc271
 8008840:	410fc270 	.word	0x410fc270
 8008844:	e000e400 	.word	0xe000e400
 8008848:	20000d1c 	.word	0x20000d1c
 800884c:	20000d20 	.word	0x20000d20
 8008850:	e000ed20 	.word	0xe000ed20
 8008854:	2000000c 	.word	0x2000000c
 8008858:	e000ef34 	.word	0xe000ef34

0800885c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008866:	f383 8811 	msr	BASEPRI, r3
 800886a:	f3bf 8f6f 	isb	sy
 800886e:	f3bf 8f4f 	dsb	sy
 8008872:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008874:	4b0e      	ldr	r3, [pc, #56]	; (80088b0 <vPortEnterCritical+0x54>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	3301      	adds	r3, #1
 800887a:	4a0d      	ldr	r2, [pc, #52]	; (80088b0 <vPortEnterCritical+0x54>)
 800887c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800887e:	4b0c      	ldr	r3, [pc, #48]	; (80088b0 <vPortEnterCritical+0x54>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d10e      	bne.n	80088a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008886:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <vPortEnterCritical+0x58>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b00      	cmp	r3, #0
 800888e:	d009      	beq.n	80088a4 <vPortEnterCritical+0x48>
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	603b      	str	r3, [r7, #0]
 80088a2:	e7fe      	b.n	80088a2 <vPortEnterCritical+0x46>
	}
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr
 80088b0:	2000000c 	.word	0x2000000c
 80088b4:	e000ed04 	.word	0xe000ed04

080088b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80088be:	4b11      	ldr	r3, [pc, #68]	; (8008904 <vPortExitCritical+0x4c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d109      	bne.n	80088da <vPortExitCritical+0x22>
 80088c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ca:	f383 8811 	msr	BASEPRI, r3
 80088ce:	f3bf 8f6f 	isb	sy
 80088d2:	f3bf 8f4f 	dsb	sy
 80088d6:	607b      	str	r3, [r7, #4]
 80088d8:	e7fe      	b.n	80088d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80088da:	4b0a      	ldr	r3, [pc, #40]	; (8008904 <vPortExitCritical+0x4c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	3b01      	subs	r3, #1
 80088e0:	4a08      	ldr	r2, [pc, #32]	; (8008904 <vPortExitCritical+0x4c>)
 80088e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088e4:	4b07      	ldr	r3, [pc, #28]	; (8008904 <vPortExitCritical+0x4c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d104      	bne.n	80088f6 <vPortExitCritical+0x3e>
 80088ec:	2300      	movs	r3, #0
 80088ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80088f6:	bf00      	nop
 80088f8:	370c      	adds	r7, #12
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	2000000c 	.word	0x2000000c
	...

08008910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008910:	f3ef 8009 	mrs	r0, PSP
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	4b15      	ldr	r3, [pc, #84]	; (8008970 <pxCurrentTCBConst>)
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	f01e 0f10 	tst.w	lr, #16
 8008920:	bf08      	it	eq
 8008922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892a:	6010      	str	r0, [r2, #0]
 800892c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008934:	f380 8811 	msr	BASEPRI, r0
 8008938:	f3bf 8f4f 	dsb	sy
 800893c:	f3bf 8f6f 	isb	sy
 8008940:	f7fe ffe2 	bl	8007908 <vTaskSwitchContext>
 8008944:	f04f 0000 	mov.w	r0, #0
 8008948:	f380 8811 	msr	BASEPRI, r0
 800894c:	bc09      	pop	{r0, r3}
 800894e:	6819      	ldr	r1, [r3, #0]
 8008950:	6808      	ldr	r0, [r1, #0]
 8008952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008956:	f01e 0f10 	tst.w	lr, #16
 800895a:	bf08      	it	eq
 800895c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008960:	f380 8809 	msr	PSP, r0
 8008964:	f3bf 8f6f 	isb	sy
 8008968:	4770      	bx	lr
 800896a:	bf00      	nop
 800896c:	f3af 8000 	nop.w

08008970 <pxCurrentTCBConst>:
 8008970:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008974:	bf00      	nop
 8008976:	bf00      	nop

08008978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
	__asm volatile
 800897e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008982:	f383 8811 	msr	BASEPRI, r3
 8008986:	f3bf 8f6f 	isb	sy
 800898a:	f3bf 8f4f 	dsb	sy
 800898e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008990:	f7fe ff02 	bl	8007798 <xTaskIncrementTick>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d003      	beq.n	80089a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800899a:	4b06      	ldr	r3, [pc, #24]	; (80089b4 <SysTick_Handler+0x3c>)
 800899c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a0:	601a      	str	r2, [r3, #0]
 80089a2:	2300      	movs	r3, #0
 80089a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	e000ed04 	.word	0xe000ed04

080089b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089b8:	b480      	push	{r7}
 80089ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80089bc:	4b0b      	ldr	r3, [pc, #44]	; (80089ec <vPortSetupTimerInterrupt+0x34>)
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80089c2:	4b0b      	ldr	r3, [pc, #44]	; (80089f0 <vPortSetupTimerInterrupt+0x38>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80089c8:	4b0a      	ldr	r3, [pc, #40]	; (80089f4 <vPortSetupTimerInterrupt+0x3c>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a0a      	ldr	r2, [pc, #40]	; (80089f8 <vPortSetupTimerInterrupt+0x40>)
 80089ce:	fba2 2303 	umull	r2, r3, r2, r3
 80089d2:	099b      	lsrs	r3, r3, #6
 80089d4:	4a09      	ldr	r2, [pc, #36]	; (80089fc <vPortSetupTimerInterrupt+0x44>)
 80089d6:	3b01      	subs	r3, #1
 80089d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089da:	4b04      	ldr	r3, [pc, #16]	; (80089ec <vPortSetupTimerInterrupt+0x34>)
 80089dc:	2207      	movs	r2, #7
 80089de:	601a      	str	r2, [r3, #0]
}
 80089e0:	bf00      	nop
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	e000e010 	.word	0xe000e010
 80089f0:	e000e018 	.word	0xe000e018
 80089f4:	20000000 	.word	0x20000000
 80089f8:	10624dd3 	.word	0x10624dd3
 80089fc:	e000e014 	.word	0xe000e014

08008a00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008a10 <vPortEnableVFP+0x10>
 8008a04:	6801      	ldr	r1, [r0, #0]
 8008a06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008a0a:	6001      	str	r1, [r0, #0]
 8008a0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a0e:	bf00      	nop
 8008a10:	e000ed88 	.word	0xe000ed88

08008a14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a14:	b480      	push	{r7}
 8008a16:	b085      	sub	sp, #20
 8008a18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a1a:	f3ef 8305 	mrs	r3, IPSR
 8008a1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b0f      	cmp	r3, #15
 8008a24:	d913      	bls.n	8008a4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a26:	4a16      	ldr	r2, [pc, #88]	; (8008a80 <vPortValidateInterruptPriority+0x6c>)
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a30:	4b14      	ldr	r3, [pc, #80]	; (8008a84 <vPortValidateInterruptPriority+0x70>)
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	7afa      	ldrb	r2, [r7, #11]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d209      	bcs.n	8008a4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	607b      	str	r3, [r7, #4]
 8008a4c:	e7fe      	b.n	8008a4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a4e:	4b0e      	ldr	r3, [pc, #56]	; (8008a88 <vPortValidateInterruptPriority+0x74>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008a56:	4b0d      	ldr	r3, [pc, #52]	; (8008a8c <vPortValidateInterruptPriority+0x78>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d909      	bls.n	8008a72 <vPortValidateInterruptPriority+0x5e>
 8008a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a62:	f383 8811 	msr	BASEPRI, r3
 8008a66:	f3bf 8f6f 	isb	sy
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	603b      	str	r3, [r7, #0]
 8008a70:	e7fe      	b.n	8008a70 <vPortValidateInterruptPriority+0x5c>
	}
 8008a72:	bf00      	nop
 8008a74:	3714      	adds	r7, #20
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	e000e3f0 	.word	0xe000e3f0
 8008a84:	20000d1c 	.word	0x20000d1c
 8008a88:	e000ed0c 	.word	0xe000ed0c
 8008a8c:	20000d20 	.word	0x20000d20

08008a90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b08a      	sub	sp, #40	; 0x28
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a9c:	f7fe fdc2 	bl	8007624 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008aa0:	4b57      	ldr	r3, [pc, #348]	; (8008c00 <pvPortMalloc+0x170>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008aa8:	f000 f90c 	bl	8008cc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008aac:	4b55      	ldr	r3, [pc, #340]	; (8008c04 <pvPortMalloc+0x174>)
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f040 808c 	bne.w	8008bd2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d01c      	beq.n	8008afa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008ac0:	2208      	movs	r2, #8
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f003 0307 	and.w	r3, r3, #7
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d013      	beq.n	8008afa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f023 0307 	bic.w	r3, r3, #7
 8008ad8:	3308      	adds	r3, #8
 8008ada:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f003 0307 	and.w	r3, r3, #7
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d009      	beq.n	8008afa <pvPortMalloc+0x6a>
 8008ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aea:	f383 8811 	msr	BASEPRI, r3
 8008aee:	f3bf 8f6f 	isb	sy
 8008af2:	f3bf 8f4f 	dsb	sy
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	e7fe      	b.n	8008af8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d068      	beq.n	8008bd2 <pvPortMalloc+0x142>
 8008b00:	4b41      	ldr	r3, [pc, #260]	; (8008c08 <pvPortMalloc+0x178>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d863      	bhi.n	8008bd2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b0a:	4b40      	ldr	r3, [pc, #256]	; (8008c0c <pvPortMalloc+0x17c>)
 8008b0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b0e:	4b3f      	ldr	r3, [pc, #252]	; (8008c0c <pvPortMalloc+0x17c>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b14:	e004      	b.n	8008b20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d903      	bls.n	8008b32 <pvPortMalloc+0xa2>
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d1f1      	bne.n	8008b16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b32:	4b33      	ldr	r3, [pc, #204]	; (8008c00 <pvPortMalloc+0x170>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d04a      	beq.n	8008bd2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2208      	movs	r2, #8
 8008b42:	4413      	add	r3, r2
 8008b44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	6a3b      	ldr	r3, [r7, #32]
 8008b4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	1ad2      	subs	r2, r2, r3
 8008b56:	2308      	movs	r3, #8
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d91e      	bls.n	8008b9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4413      	add	r3, r2
 8008b64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	f003 0307 	and.w	r3, r3, #7
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d009      	beq.n	8008b84 <pvPortMalloc+0xf4>
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	613b      	str	r3, [r7, #16]
 8008b82:	e7fe      	b.n	8008b82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	1ad2      	subs	r2, r2, r3
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b96:	69b8      	ldr	r0, [r7, #24]
 8008b98:	f000 f8f6 	bl	8008d88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b9c:	4b1a      	ldr	r3, [pc, #104]	; (8008c08 <pvPortMalloc+0x178>)
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	4a18      	ldr	r2, [pc, #96]	; (8008c08 <pvPortMalloc+0x178>)
 8008ba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008baa:	4b17      	ldr	r3, [pc, #92]	; (8008c08 <pvPortMalloc+0x178>)
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	4b18      	ldr	r3, [pc, #96]	; (8008c10 <pvPortMalloc+0x180>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d203      	bcs.n	8008bbe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008bb6:	4b14      	ldr	r3, [pc, #80]	; (8008c08 <pvPortMalloc+0x178>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a15      	ldr	r2, [pc, #84]	; (8008c10 <pvPortMalloc+0x180>)
 8008bbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	685a      	ldr	r2, [r3, #4]
 8008bc2:	4b10      	ldr	r3, [pc, #64]	; (8008c04 <pvPortMalloc+0x174>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bce:	2200      	movs	r2, #0
 8008bd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008bd2:	f7fe fd35 	bl	8007640 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	f003 0307 	and.w	r3, r3, #7
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d009      	beq.n	8008bf4 <pvPortMalloc+0x164>
 8008be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	e7fe      	b.n	8008bf2 <pvPortMalloc+0x162>
	return pvReturn;
 8008bf4:	69fb      	ldr	r3, [r7, #28]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3728      	adds	r7, #40	; 0x28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	2000492c 	.word	0x2000492c
 8008c04:	20004938 	.word	0x20004938
 8008c08:	20004930 	.word	0x20004930
 8008c0c:	20004924 	.word	0x20004924
 8008c10:	20004934 	.word	0x20004934

08008c14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d046      	beq.n	8008cb4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c26:	2308      	movs	r3, #8
 8008c28:	425b      	negs	r3, r3
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	4b20      	ldr	r3, [pc, #128]	; (8008cbc <vPortFree+0xa8>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4013      	ands	r3, r2
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d109      	bne.n	8008c56 <vPortFree+0x42>
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	f383 8811 	msr	BASEPRI, r3
 8008c4a:	f3bf 8f6f 	isb	sy
 8008c4e:	f3bf 8f4f 	dsb	sy
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	e7fe      	b.n	8008c54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d009      	beq.n	8008c72 <vPortFree+0x5e>
 8008c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c62:	f383 8811 	msr	BASEPRI, r3
 8008c66:	f3bf 8f6f 	isb	sy
 8008c6a:	f3bf 8f4f 	dsb	sy
 8008c6e:	60bb      	str	r3, [r7, #8]
 8008c70:	e7fe      	b.n	8008c70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	4b11      	ldr	r3, [pc, #68]	; (8008cbc <vPortFree+0xa8>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4013      	ands	r3, r2
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d019      	beq.n	8008cb4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d115      	bne.n	8008cb4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	685a      	ldr	r2, [r3, #4]
 8008c8c:	4b0b      	ldr	r3, [pc, #44]	; (8008cbc <vPortFree+0xa8>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	43db      	mvns	r3, r3
 8008c92:	401a      	ands	r2, r3
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c98:	f7fe fcc4 	bl	8007624 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	4b07      	ldr	r3, [pc, #28]	; (8008cc0 <vPortFree+0xac>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	4a06      	ldr	r2, [pc, #24]	; (8008cc0 <vPortFree+0xac>)
 8008ca8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008caa:	6938      	ldr	r0, [r7, #16]
 8008cac:	f000 f86c 	bl	8008d88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008cb0:	f7fe fcc6 	bl	8007640 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008cb4:	bf00      	nop
 8008cb6:	3718      	adds	r7, #24
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	20004938 	.word	0x20004938
 8008cc0:	20004930 	.word	0x20004930

08008cc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008cce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008cd0:	4b27      	ldr	r3, [pc, #156]	; (8008d70 <prvHeapInit+0xac>)
 8008cd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f003 0307 	and.w	r3, r3, #7
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00c      	beq.n	8008cf8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3307      	adds	r3, #7
 8008ce2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f023 0307 	bic.w	r3, r3, #7
 8008cea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	4a1f      	ldr	r2, [pc, #124]	; (8008d70 <prvHeapInit+0xac>)
 8008cf4:	4413      	add	r3, r2
 8008cf6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008cfc:	4a1d      	ldr	r2, [pc, #116]	; (8008d74 <prvHeapInit+0xb0>)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d02:	4b1c      	ldr	r3, [pc, #112]	; (8008d74 <prvHeapInit+0xb0>)
 8008d04:	2200      	movs	r2, #0
 8008d06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d10:	2208      	movs	r2, #8
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f023 0307 	bic.w	r3, r3, #7
 8008d1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4a15      	ldr	r2, [pc, #84]	; (8008d78 <prvHeapInit+0xb4>)
 8008d24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d26:	4b14      	ldr	r3, [pc, #80]	; (8008d78 <prvHeapInit+0xb4>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d2e:	4b12      	ldr	r3, [pc, #72]	; (8008d78 <prvHeapInit+0xb4>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	1ad2      	subs	r2, r2, r3
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d44:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <prvHeapInit+0xb4>)
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	4a0a      	ldr	r2, [pc, #40]	; (8008d7c <prvHeapInit+0xb8>)
 8008d52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	4a09      	ldr	r2, [pc, #36]	; (8008d80 <prvHeapInit+0xbc>)
 8008d5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d5c:	4b09      	ldr	r3, [pc, #36]	; (8008d84 <prvHeapInit+0xc0>)
 8008d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008d62:	601a      	str	r2, [r3, #0]
}
 8008d64:	bf00      	nop
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	20000d24 	.word	0x20000d24
 8008d74:	20004924 	.word	0x20004924
 8008d78:	2000492c 	.word	0x2000492c
 8008d7c:	20004934 	.word	0x20004934
 8008d80:	20004930 	.word	0x20004930
 8008d84:	20004938 	.word	0x20004938

08008d88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d90:	4b28      	ldr	r3, [pc, #160]	; (8008e34 <prvInsertBlockIntoFreeList+0xac>)
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	e002      	b.n	8008d9c <prvInsertBlockIntoFreeList+0x14>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	60fb      	str	r3, [r7, #12]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d8f7      	bhi.n	8008d96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	4413      	add	r3, r2
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d108      	bne.n	8008dca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	441a      	add	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	441a      	add	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d118      	bne.n	8008e10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	4b15      	ldr	r3, [pc, #84]	; (8008e38 <prvInsertBlockIntoFreeList+0xb0>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d00d      	beq.n	8008e06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	441a      	add	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	e008      	b.n	8008e18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e06:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <prvInsertBlockIntoFreeList+0xb0>)
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	e003      	b.n	8008e18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d002      	beq.n	8008e26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	687a      	ldr	r2, [r7, #4]
 8008e24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e26:	bf00      	nop
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	20004924 	.word	0x20004924
 8008e38:	2000492c 	.word	0x2000492c

08008e3c <__libc_init_array>:
 8008e3c:	b570      	push	{r4, r5, r6, lr}
 8008e3e:	4e0d      	ldr	r6, [pc, #52]	; (8008e74 <__libc_init_array+0x38>)
 8008e40:	4c0d      	ldr	r4, [pc, #52]	; (8008e78 <__libc_init_array+0x3c>)
 8008e42:	1ba4      	subs	r4, r4, r6
 8008e44:	10a4      	asrs	r4, r4, #2
 8008e46:	2500      	movs	r5, #0
 8008e48:	42a5      	cmp	r5, r4
 8008e4a:	d109      	bne.n	8008e60 <__libc_init_array+0x24>
 8008e4c:	4e0b      	ldr	r6, [pc, #44]	; (8008e7c <__libc_init_array+0x40>)
 8008e4e:	4c0c      	ldr	r4, [pc, #48]	; (8008e80 <__libc_init_array+0x44>)
 8008e50:	f000 f82c 	bl	8008eac <_init>
 8008e54:	1ba4      	subs	r4, r4, r6
 8008e56:	10a4      	asrs	r4, r4, #2
 8008e58:	2500      	movs	r5, #0
 8008e5a:	42a5      	cmp	r5, r4
 8008e5c:	d105      	bne.n	8008e6a <__libc_init_array+0x2e>
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e64:	4798      	blx	r3
 8008e66:	3501      	adds	r5, #1
 8008e68:	e7ee      	b.n	8008e48 <__libc_init_array+0xc>
 8008e6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008e6e:	4798      	blx	r3
 8008e70:	3501      	adds	r5, #1
 8008e72:	e7f2      	b.n	8008e5a <__libc_init_array+0x1e>
 8008e74:	080090a4 	.word	0x080090a4
 8008e78:	080090a4 	.word	0x080090a4
 8008e7c:	080090a4 	.word	0x080090a4
 8008e80:	080090a8 	.word	0x080090a8

08008e84 <memcpy>:
 8008e84:	b510      	push	{r4, lr}
 8008e86:	1e43      	subs	r3, r0, #1
 8008e88:	440a      	add	r2, r1
 8008e8a:	4291      	cmp	r1, r2
 8008e8c:	d100      	bne.n	8008e90 <memcpy+0xc>
 8008e8e:	bd10      	pop	{r4, pc}
 8008e90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e98:	e7f7      	b.n	8008e8a <memcpy+0x6>

08008e9a <memset>:
 8008e9a:	4402      	add	r2, r0
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d100      	bne.n	8008ea4 <memset+0xa>
 8008ea2:	4770      	bx	lr
 8008ea4:	f803 1b01 	strb.w	r1, [r3], #1
 8008ea8:	e7f9      	b.n	8008e9e <memset+0x4>
	...

08008eac <_init>:
 8008eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eae:	bf00      	nop
 8008eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eb2:	bc08      	pop	{r3}
 8008eb4:	469e      	mov	lr, r3
 8008eb6:	4770      	bx	lr

08008eb8 <_fini>:
 8008eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eba:	bf00      	nop
 8008ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ebe:	bc08      	pop	{r3}
 8008ec0:	469e      	mov	lr, r3
 8008ec2:	4770      	bx	lr
