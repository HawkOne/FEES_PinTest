
TestFEES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08008754  08008754  00018754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800891c  0800891c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800891c  0800891c  0001891c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008924  08008924  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008924  08008924  00018924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008928  08008928  00018928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800892c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f8c  20000010  0800893c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005f9c  0800893c  00025f9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020d19  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039cf  00000000  00000000  00040d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c28  00000000  00000000  00044728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001ab8  00000000  00000000  00046350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003d72  00000000  00000000  00047e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014eab  00000000  00000000  0004bb7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de51f  00000000  00000000  00060a25  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ef44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007974  00000000  00000000  0013efc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800873c 	.word	0x0800873c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800873c 	.word	0x0800873c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <Hardware_Watchdog_Refresh>:
	osDelay(10);
    HAL_GPIO_WritePin(PORT__BASE, pin_number, 0);
    osDelay(10);
}

void Hardware_Watchdog_Refresh(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5, 1);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2120      	movs	r1, #32
 80004d8:	4807      	ldr	r0, [pc, #28]	; (80004f8 <Hardware_Watchdog_Refresh+0x28>)
 80004da:	f001 fec9 	bl	8002270 <HAL_GPIO_WritePin>
	  osDelay(100);
 80004de:	2064      	movs	r0, #100	; 0x64
 80004e0:	f005 fcc4 	bl	8005e6c <osDelay>
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2120      	movs	r1, #32
 80004e8:	4803      	ldr	r0, [pc, #12]	; (80004f8 <Hardware_Watchdog_Refresh+0x28>)
 80004ea:	f001 fec1 	bl	8002270 <HAL_GPIO_WritePin>
	  osDelay(100);
 80004ee:	2064      	movs	r0, #100	; 0x64
 80004f0:	f005 fcbc 	bl	8005e6c <osDelay>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40020400 	.word	0x40020400

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f001 f974 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f884 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fbf6 	bl	8000cf8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800050c:	f000 f93a 	bl	8000784 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000510:	f000 f966 	bl	80007e0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000514:	f000 f992 	bl	800083c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000518:	f000 f9c6 	bl	80008a8 <MX_SPI2_Init>
  MX_SPI3_Init();
 800051c:	f000 f9fa 	bl	8000914 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000520:	f000 fb14 	bl	8000b4c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000524:	f000 fb66 	bl	8000bf4 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000528:	f000 fb8e 	bl	8000c48 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800052c:	f000 f8d8 	bl	80006e0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000530:	f000 fb36 	bl	8000ba0 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000534:	f000 fbb2 	bl	8000c9c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000538:	f000 fa22 	bl	8000980 <MX_TIM2_Init>
  MX_TIM3_Init();
 800053c:	f000 faae 	bl	8000a9c <MX_TIM3_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000540:	f005 fb84 	bl	8005c4c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000544:	4a1d      	ldr	r2, [pc, #116]	; (80005bc <main+0xc0>)
 8000546:	2100      	movs	r1, #0
 8000548:	481d      	ldr	r0, [pc, #116]	; (80005c0 <main+0xc4>)
 800054a:	f005 fbe9 	bl	8005d20 <osThreadNew>
 800054e:	4602      	mov	r2, r0
 8000550:	4b1c      	ldr	r3, [pc, #112]	; (80005c4 <main+0xc8>)
 8000552:	601a      	str	r2, [r3, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(Task01, NULL, &Task1_attributes);
 8000554:	4a1c      	ldr	r2, [pc, #112]	; (80005c8 <main+0xcc>)
 8000556:	2100      	movs	r1, #0
 8000558:	481c      	ldr	r0, [pc, #112]	; (80005cc <main+0xd0>)
 800055a:	f005 fbe1 	bl	8005d20 <osThreadNew>
 800055e:	4602      	mov	r2, r0
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <main+0xd4>)
 8000562:	601a      	str	r2, [r3, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task02, NULL, &Task2_attributes);
 8000564:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <main+0xd8>)
 8000566:	2100      	movs	r1, #0
 8000568:	481b      	ldr	r0, [pc, #108]	; (80005d8 <main+0xdc>)
 800056a:	f005 fbd9 	bl	8005d20 <osThreadNew>
 800056e:	4602      	mov	r2, r0
 8000570:	4b1a      	ldr	r3, [pc, #104]	; (80005dc <main+0xe0>)
 8000572:	601a      	str	r2, [r3, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(Task03, NULL, &Task3_attributes);
 8000574:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <main+0xe4>)
 8000576:	2100      	movs	r1, #0
 8000578:	481a      	ldr	r0, [pc, #104]	; (80005e4 <main+0xe8>)
 800057a:	f005 fbd1 	bl	8005d20 <osThreadNew>
 800057e:	4602      	mov	r2, r0
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <main+0xec>)
 8000582:	601a      	str	r2, [r3, #0]

  /* creation of Task4 */
  Task4Handle = osThreadNew(Task04, NULL, &Task4_attributes);
 8000584:	4a19      	ldr	r2, [pc, #100]	; (80005ec <main+0xf0>)
 8000586:	2100      	movs	r1, #0
 8000588:	4819      	ldr	r0, [pc, #100]	; (80005f0 <main+0xf4>)
 800058a:	f005 fbc9 	bl	8005d20 <osThreadNew>
 800058e:	4602      	mov	r2, r0
 8000590:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <main+0xf8>)
 8000592:	601a      	str	r2, [r3, #0]

  /* creation of Task5 */
  Task5Handle = osThreadNew(Task05, NULL, &Task5_attributes);
 8000594:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <main+0xfc>)
 8000596:	2100      	movs	r1, #0
 8000598:	4818      	ldr	r0, [pc, #96]	; (80005fc <main+0x100>)
 800059a:	f005 fbc1 	bl	8005d20 <osThreadNew>
 800059e:	4602      	mov	r2, r0
 80005a0:	4b17      	ldr	r3, [pc, #92]	; (8000600 <main+0x104>)
 80005a2:	601a      	str	r2, [r3, #0]

  /* creation of Task6 */
  Task6Handle = osThreadNew(Task06, NULL, &Task6_attributes);
 80005a4:	4a17      	ldr	r2, [pc, #92]	; (8000604 <main+0x108>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4817      	ldr	r0, [pc, #92]	; (8000608 <main+0x10c>)
 80005aa:	f005 fbb9 	bl	8005d20 <osThreadNew>
 80005ae:	4602      	mov	r2, r0
 80005b0:	4b16      	ldr	r3, [pc, #88]	; (800060c <main+0x110>)
 80005b2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b4:	f005 fb7e 	bl	8005cb4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <main+0xbc>
 80005ba:	bf00      	nop
 80005bc:	08008808 	.word	0x08008808
 80005c0:	08000ee5 	.word	0x08000ee5
 80005c4:	20004940 	.word	0x20004940
 80005c8:	0800882c 	.word	0x0800882c
 80005cc:	08000ef9 	.word	0x08000ef9
 80005d0:	200055e8 	.word	0x200055e8
 80005d4:	08008850 	.word	0x08008850
 80005d8:	08000f09 	.word	0x08000f09
 80005dc:	20005bdc 	.word	0x20005bdc
 80005e0:	08008874 	.word	0x08008874
 80005e4:	08000f19 	.word	0x08000f19
 80005e8:	20005bd8 	.word	0x20005bd8
 80005ec:	08008898 	.word	0x08008898
 80005f0:	08000f29 	.word	0x08000f29
 80005f4:	20005694 	.word	0x20005694
 80005f8:	080088bc 	.word	0x080088bc
 80005fc:	08000f39 	.word	0x08000f39
 8000600:	2000493c 	.word	0x2000493c
 8000604:	080088e0 	.word	0x080088e0
 8000608:	08000f49 	.word	0x08000f49
 800060c:	200055e4 	.word	0x200055e4

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	; 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f008 f883 	bl	800872a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <SystemClock_Config+0xc8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemClock_Config+0xc8>)
 800063e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000642:	6413      	str	r3, [r2, #64]	; 0x40
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <SystemClock_Config+0xc8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000650:	2300      	movs	r3, #0
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	4b21      	ldr	r3, [pc, #132]	; (80006dc <SystemClock_Config+0xcc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a20      	ldr	r2, [pc, #128]	; (80006dc <SystemClock_Config+0xcc>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	4b1e      	ldr	r3, [pc, #120]	; (80006dc <SystemClock_Config+0xcc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066c:	2301      	movs	r3, #1
 800066e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000670:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000684:	2360      	movs	r3, #96	; 0x60
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000688:	2306      	movs	r3, #6
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fe6d 	bl	8003374 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a0:	f000 fc6c 	bl	8000f7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2302      	movs	r3, #2
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 f8c8 	bl	8003854 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006ca:	f000 fc57 	bl	8000f7c <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3750      	adds	r7, #80	; 0x50
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000

080006e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006f2:	4b21      	ldr	r3, [pc, #132]	; (8000778 <MX_ADC1_Init+0x98>)
 80006f4:	4a21      	ldr	r2, [pc, #132]	; (800077c <MX_ADC1_Init+0x9c>)
 80006f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006f8:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <MX_ADC1_Init+0x98>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fe:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_ADC1_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800070a:	4b1b      	ldr	r3, [pc, #108]	; (8000778 <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000710:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_ADC1_Init+0x98>)
 8000712:	2200      	movs	r2, #0
 8000714:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_ADC1_Init+0x98>)
 800071a:	2200      	movs	r2, #0
 800071c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <MX_ADC1_Init+0x98>)
 8000720:	4a17      	ldr	r2, [pc, #92]	; (8000780 <MX_ADC1_Init+0xa0>)
 8000722:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <MX_ADC1_Init+0x98>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800072a:	4b13      	ldr	r3, [pc, #76]	; (8000778 <MX_ADC1_Init+0x98>)
 800072c:	2201      	movs	r2, #1
 800072e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_ADC1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_ADC1_Init+0x98>)
 800073a:	2201      	movs	r2, #1
 800073c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073e:	480e      	ldr	r0, [pc, #56]	; (8000778 <MX_ADC1_Init+0x98>)
 8000740:	f001 f8b8 	bl	80018b4 <HAL_ADC_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800074a:	f000 fc17 	bl	8000f7c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800074e:	2310      	movs	r3, #16
 8000750:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000752:	2301      	movs	r3, #1
 8000754:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000756:	2300      	movs	r3, #0
 8000758:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075a:	463b      	mov	r3, r7
 800075c:	4619      	mov	r1, r3
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <MX_ADC1_Init+0x98>)
 8000760:	f001 f8ec 	bl	800193c <HAL_ADC_ConfigChannel>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800076a:	f000 fc07 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200055ec 	.word	0x200055ec
 800077c:	40012000 	.word	0x40012000
 8000780:	0f000001 	.word	0x0f000001

08000784 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2C1_Init+0x50>)
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <MX_I2C1_Init+0x54>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_I2C1_Init+0x50>)
 8000790:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_I2C1_Init+0x58>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_I2C1_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_I2C1_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_I2C1_Init+0x50>)
 80007c2:	f001 fd6f 	bl	80022a4 <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f000 fbd6 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20004fdc 	.word	0x20004fdc
 80007d8:	40005400 	.word	0x40005400
 80007dc:	000186a0 	.word	0x000186a0

080007e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_I2C2_Init+0x50>)
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_I2C2_Init+0x54>)
 80007e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_I2C2_Init+0x50>)
 80007ec:	4a12      	ldr	r2, [pc, #72]	; (8000838 <MX_I2C2_Init+0x58>)
 80007ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <MX_I2C2_Init+0x50>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_I2C2_Init+0x50>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_I2C2_Init+0x50>)
 80007fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000802:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <MX_I2C2_Init+0x50>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_I2C2_Init+0x50>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <MX_I2C2_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_I2C2_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800081c:	4804      	ldr	r0, [pc, #16]	; (8000830 <MX_I2C2_Init+0x50>)
 800081e:	f001 fd41 	bl	80022a4 <HAL_I2C_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000828:	f000 fba8 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20005498 	.word	0x20005498
 8000834:	40005800 	.word	0x40005800
 8000838:	000186a0 	.word	0x000186a0

0800083c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000842:	4a18      	ldr	r2, [pc, #96]	; (80008a4 <MX_SPI1_Init+0x68>)
 8000844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800084c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084e:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_SPI1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000874:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_SPI1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000880:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_SPI1_Init+0x64>)
 8000888:	220a      	movs	r2, #10
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_SPI1_Init+0x64>)
 800088e:	f003 fa05 	bl	8003c9c <HAL_SPI_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000898:	f000 fb70 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20005e40 	.word	0x20005e40
 80008a4:	40013000 	.word	0x40013000

080008a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_SPI2_Init+0x64>)
 80008ae:	4a18      	ldr	r2, [pc, #96]	; (8000910 <MX_SPI2_Init+0x68>)
 80008b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_SPI2_Init+0x64>)
 80008b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_SPI2_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_SPI2_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_SPI2_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_SPI2_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_SPI2_Init+0x64>)
 80008d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <MX_SPI2_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <MX_SPI2_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_SPI2_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <MX_SPI2_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_SPI2_Init+0x64>)
 80008f4:	220a      	movs	r2, #10
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_SPI2_Init+0x64>)
 80008fa:	f003 f9cf 	bl	8003c9c <HAL_SPI_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000904:	f000 fb3a 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20004944 	.word	0x20004944
 8000910:	40003800 	.word	0x40003800

08000914 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_SPI3_Init+0x64>)
 800091a:	4a18      	ldr	r2, [pc, #96]	; (800097c <MX_SPI3_Init+0x68>)
 800091c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_SPI3_Init+0x64>)
 8000920:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000924:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_SPI3_Init+0x64>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <MX_SPI3_Init+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <MX_SPI3_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <MX_SPI3_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <MX_SPI3_Init+0x64>)
 8000940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000944:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_SPI3_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <MX_SPI3_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <MX_SPI3_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <MX_SPI3_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <MX_SPI3_Init+0x64>)
 8000960:	220a      	movs	r2, #10
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_SPI3_Init+0x64>)
 8000966:	f003 f999 	bl	8003c9c <HAL_SPI_Init>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000970:	f000 fb04 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	2000552c 	.word	0x2000552c
 800097c:	40003c00 	.word	0x40003c00

08000980 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08e      	sub	sp, #56	; 0x38
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000986:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
 80009ac:	615a      	str	r2, [r3, #20]
 80009ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009b0:	4b39      	ldr	r3, [pc, #228]	; (8000a98 <MX_TIM2_Init+0x118>)
 80009b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 160-1;
 80009b8:	4b37      	ldr	r3, [pc, #220]	; (8000a98 <MX_TIM2_Init+0x118>)
 80009ba:	229f      	movs	r2, #159	; 0x9f
 80009bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009be:	4b36      	ldr	r3, [pc, #216]	; (8000a98 <MX_TIM2_Init+0x118>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80009c4:	4b34      	ldr	r3, [pc, #208]	; (8000a98 <MX_TIM2_Init+0x118>)
 80009c6:	2263      	movs	r2, #99	; 0x63
 80009c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ca:	4b33      	ldr	r3, [pc, #204]	; (8000a98 <MX_TIM2_Init+0x118>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009d0:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <MX_TIM2_Init+0x118>)
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d6:	4830      	ldr	r0, [pc, #192]	; (8000a98 <MX_TIM2_Init+0x118>)
 80009d8:	f003 f9c4 	bl	8003d64 <HAL_TIM_Base_Init>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80009e2:	f000 facb 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4829      	ldr	r0, [pc, #164]	; (8000a98 <MX_TIM2_Init+0x118>)
 80009f4:	f003 fbfe 	bl	80041f4 <HAL_TIM_ConfigClockSource>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80009fe:	f000 fabd 	bl	8000f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a02:	4825      	ldr	r0, [pc, #148]	; (8000a98 <MX_TIM2_Init+0x118>)
 8000a04:	f003 f9fd 	bl	8003e02 <HAL_TIM_PWM_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000a0e:	f000 fab5 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a1a:	f107 0320 	add.w	r3, r7, #32
 8000a1e:	4619      	mov	r1, r3
 8000a20:	481d      	ldr	r0, [pc, #116]	; (8000a98 <MX_TIM2_Init+0x118>)
 8000a22:	f003 ffb1 	bl	8004988 <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000a2c:	f000 faa6 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a30:	2360      	movs	r3, #96	; 0x60
 8000a32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25-1;
 8000a34:	2318      	movs	r3, #24
 8000a36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	2200      	movs	r2, #0
 8000a44:	4619      	mov	r1, r3
 8000a46:	4814      	ldr	r0, [pc, #80]	; (8000a98 <MX_TIM2_Init+0x118>)
 8000a48:	f003 fb0e 	bl	8004068 <HAL_TIM_PWM_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a52:	f000 fa93 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.Pulse = 50-1;
 8000a56:	2331      	movs	r3, #49	; 0x31
 8000a58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2204      	movs	r2, #4
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <MX_TIM2_Init+0x118>)
 8000a62:	f003 fb01 	bl	8004068 <HAL_TIM_PWM_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000a6c:	f000 fa86 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.Pulse = 75-1;
 8000a70:	234a      	movs	r3, #74	; 0x4a
 8000a72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2208      	movs	r2, #8
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4807      	ldr	r0, [pc, #28]	; (8000a98 <MX_TIM2_Init+0x118>)
 8000a7c:	f003 faf4 	bl	8004068 <HAL_TIM_PWM_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 8000a86:	f000 fa79 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a8a:	4803      	ldr	r0, [pc, #12]	; (8000a98 <MX_TIM2_Init+0x118>)
 8000a8c:	f000 fc3e 	bl	800130c <HAL_TIM_MspPostInit>

}
 8000a90:	bf00      	nop
 8000a92:	3738      	adds	r7, #56	; 0x38
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20005e98 	.word	0x20005e98

08000a9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa2:	f107 0320 	add.w	r3, r7, #32
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000abe:	4b21      	ldr	r3, [pc, #132]	; (8000b44 <MX_TIM3_Init+0xa8>)
 8000ac0:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <MX_TIM3_Init+0xac>)
 8000ac2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 160-1;
 8000ac4:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <MX_TIM3_Init+0xa8>)
 8000ac6:	229f      	movs	r2, #159	; 0x9f
 8000ac8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b1e      	ldr	r3, [pc, #120]	; (8000b44 <MX_TIM3_Init+0xa8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_TIM3_Init+0xa8>)
 8000ad2:	2263      	movs	r2, #99	; 0x63
 8000ad4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad6:	4b1b      	ldr	r3, [pc, #108]	; (8000b44 <MX_TIM3_Init+0xa8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <MX_TIM3_Init+0xa8>)
 8000ade:	2280      	movs	r2, #128	; 0x80
 8000ae0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ae2:	4818      	ldr	r0, [pc, #96]	; (8000b44 <MX_TIM3_Init+0xa8>)
 8000ae4:	f003 f98d 	bl	8003e02 <HAL_TIM_PWM_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000aee:	f000 fa45 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af2:	2300      	movs	r3, #0
 8000af4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	4619      	mov	r1, r3
 8000b00:	4810      	ldr	r0, [pc, #64]	; (8000b44 <MX_TIM3_Init+0xa8>)
 8000b02:	f003 ff41 	bl	8004988 <HAL_TIMEx_MasterConfigSynchronization>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000b0c:	f000 fa36 	bl	8000f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b10:	2360      	movs	r3, #96	; 0x60
 8000b12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50-1;
 8000b14:	2331      	movs	r3, #49	; 0x31
 8000b16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2208      	movs	r2, #8
 8000b24:	4619      	mov	r1, r3
 8000b26:	4807      	ldr	r0, [pc, #28]	; (8000b44 <MX_TIM3_Init+0xa8>)
 8000b28:	f003 fa9e 	bl	8004068 <HAL_TIM_PWM_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b32:	f000 fa23 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b36:	4803      	ldr	r0, [pc, #12]	; (8000b44 <MX_TIM3_Init+0xa8>)
 8000b38:	f000 fbe8 	bl	800130c <HAL_TIM_MspPostInit>

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	; 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200054ec 	.word	0x200054ec
 8000b48:	40000400 	.word	0x40000400

08000b4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_USART1_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART1_UART_Init+0x4c>)
 8000b84:	f003 ff90 	bl	8004aa8 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f000 f9f5 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20005698 	.word	0x20005698
 8000b9c:	40011000 	.word	0x40011000

08000ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <MX_USART2_UART_Init+0x50>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000baa:	4b10      	ldr	r3, [pc, #64]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	; (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bd8:	f003 ff66 	bl	8004aa8 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000be2:	f000 f9cb 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20005ed8 	.word	0x20005ed8
 8000bf0:	40004400 	.word	0x40004400

08000bf4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_USART3_UART_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_USART3_UART_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_USART3_UART_Init+0x4c>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_USART3_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_USART3_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_USART3_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_USART3_UART_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_USART3_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_USART3_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_USART3_UART_Init+0x4c>)
 8000c2c:	f003 ff3c 	bl	8004aa8 <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c36:	f000 f9a1 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20004f9c 	.word	0x20004f9c
 8000c44:	40004800 	.word	0x40004800

08000c48 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <MX_USART6_UART_Init+0x50>)
 8000c50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c6e:	220c      	movs	r2, #12
 8000c70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_USART6_UART_Init+0x4c>)
 8000c80:	f003 ff12 	bl	8004aa8 <HAL_UART_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c8a:	f000 f977 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	20005b98 	.word	0x20005b98
 8000c98:	40011400 	.word	0x40011400

08000c9c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ca0:	4b14      	ldr	r3, [pc, #80]	; (8000cf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ca2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ca6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000caa:	2204      	movs	r2, #4
 8000cac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000cae:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ce0:	f001 fc18 	bl	8002514 <HAL_PCD_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000cea:	f000 f947 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20005030 	.word	0x20005030

08000cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08c      	sub	sp, #48	; 0x30
 8000cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
 8000d12:	4b6e      	ldr	r3, [pc, #440]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a6d      	ldr	r2, [pc, #436]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d18:	f043 0310 	orr.w	r3, r3, #16
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	61bb      	str	r3, [r7, #24]
 8000d28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	4b67      	ldr	r3, [pc, #412]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a66      	ldr	r2, [pc, #408]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d34:	f043 0304 	orr.w	r3, r3, #4
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b64      	ldr	r3, [pc, #400]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0304 	and.w	r3, r3, #4
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b60      	ldr	r3, [pc, #384]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a5f      	ldr	r2, [pc, #380]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b59      	ldr	r3, [pc, #356]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a58      	ldr	r2, [pc, #352]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b56      	ldr	r3, [pc, #344]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a51      	ldr	r2, [pc, #324]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b4f      	ldr	r3, [pc, #316]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b4b      	ldr	r3, [pc, #300]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a4a      	ldr	r2, [pc, #296]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000da4:	f043 0308 	orr.w	r3, r3, #8
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b48      	ldr	r3, [pc, #288]	; (8000ecc <MX_GPIO_Init+0x1d4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0308 	and.w	r3, r3, #8
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPS_PWR_ON_Pin|SBD_PWR_ON_Pin|CS_NAND_Pin|CS_LORA_Pin
 8000db6:	2200      	movs	r2, #0
 8000db8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dbc:	4844      	ldr	r0, [pc, #272]	; (8000ed0 <MX_GPIO_Init+0x1d8>)
 8000dbe:	f001 fa57 	bl	8002270 <HAL_GPIO_WritePin>
                          |RSBY_ON_Pin|DIR_COIL_X_Pin|DIR_COIL_Y_Pin|DIR_COIL_Z_Pin
                          |CS_GYRO_Pin|EN_ADC1_Pin|EN_ADC3_Pin|EN_ADC2_Pin
                          |SBD_SER_RI_Pin|SBD_SER_NET_Pin|ANA_PWR_ON_Pin|RAD_PWR_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UHF_RESET_Pin|RADFET_OWB_Pin|RAD_RESET_Pin|PSD1_SEL0_Pin
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f24e 213e 	movw	r1, #57918	; 0xe23e
 8000dc8:	4842      	ldr	r0, [pc, #264]	; (8000ed4 <MX_GPIO_Init+0x1dc>)
 8000dca:	f001 fa51 	bl	8002270 <HAL_GPIO_WritePin>
                          |PSD2_SEL1_Pin|PSD2_SEL0_Pin|PSD1_AMP_CS_Pin|PSD2_AMP_CS_Pin
                          |EX_SPI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PSD1_SEL1_GPIO_Port, PSD1_SEL1_Pin, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	4840      	ldr	r0, [pc, #256]	; (8000ed4 <MX_GPIO_Init+0x1dc>)
 8000dd4:	f001 fa4c 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EX_GPIO3_Pin|CS_RADFET_Pin|EX_GPIO4_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8000dde:	483e      	ldr	r0, [pc, #248]	; (8000ed8 <MX_GPIO_Init+0x1e0>)
 8000de0:	f001 fa46 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RSBY_KEEP_EN_Pin|EX_GPIO1_Pin|EX_GPIO2_Pin|WATCHDOG_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	f241 0123 	movw	r1, #4131	; 0x1023
 8000dea:	483c      	ldr	r0, [pc, #240]	; (8000edc <MX_GPIO_Init+0x1e4>)
 8000dec:	f001 fa40 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_EEPROM_Pin|CS_FRAM_Pin|CS_GYROD12_Pin|INT_GYRO_Pin
 8000df0:	2200      	movs	r2, #0
 8000df2:	f64f 419f 	movw	r1, #64671	; 0xfc9f
 8000df6:	483a      	ldr	r0, [pc, #232]	; (8000ee0 <MX_GPIO_Init+0x1e8>)
 8000df8:	f001 fa3a 	bl	8002270 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPS_PWR_ON_Pin SBD_PWR_ON_Pin CS_NAND_Pin CS_LORA_Pin
                           RSBY_ON_Pin DIR_COIL_X_Pin DIR_COIL_Y_Pin DIR_COIL_Z_Pin
                           CS_GYRO_Pin EN_ADC1_Pin EN_ADC3_Pin EN_ADC2_Pin
                           SBD_SER_RI_Pin SBD_SER_NET_Pin ANA_PWR_ON_Pin RAD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = GPS_PWR_ON_Pin|SBD_PWR_ON_Pin|CS_NAND_Pin|CS_LORA_Pin
 8000dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e00:	61fb      	str	r3, [r7, #28]
                          |RSBY_ON_Pin|DIR_COIL_X_Pin|DIR_COIL_Y_Pin|DIR_COIL_Z_Pin
                          |CS_GYRO_Pin|EN_ADC1_Pin|EN_ADC3_Pin|EN_ADC2_Pin
                          |SBD_SER_RI_Pin|SBD_SER_NET_Pin|ANA_PWR_ON_Pin|RAD_PWR_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	482e      	ldr	r0, [pc, #184]	; (8000ed0 <MX_GPIO_Init+0x1d8>)
 8000e16:	f001 f891 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : UHF_RESET_Pin RADFET_OWB_Pin RAD_RESET_Pin PSD1_SEL1_Pin
                           PSD1_SEL0_Pin PSD2_SEL1_Pin PSD2_SEL0_Pin PSD1_AMP_CS_Pin
                           PSD2_AMP_CS_Pin EX_SPI_EN_Pin */
  GPIO_InitStruct.Pin = UHF_RESET_Pin|RADFET_OWB_Pin|RAD_RESET_Pin|PSD1_SEL1_Pin
 8000e1a:	f24e 233f 	movw	r3, #57919	; 0xe23f
 8000e1e:	61fb      	str	r3, [r7, #28]
                          |PSD1_SEL0_Pin|PSD2_SEL1_Pin|PSD2_SEL0_Pin|PSD1_AMP_CS_Pin
                          |PSD2_AMP_CS_Pin|EX_SPI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4828      	ldr	r0, [pc, #160]	; (8000ed4 <MX_GPIO_Init+0x1dc>)
 8000e34:	f001 f882 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_GPIO3_Pin CS_RADFET_Pin EX_GPIO4_Pin */
  GPIO_InitStruct.Pin = EX_GPIO3_Pin|CS_RADFET_Pin|EX_GPIO4_Pin;
 8000e38:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8000e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 031c 	add.w	r3, r7, #28
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4821      	ldr	r0, [pc, #132]	; (8000ed8 <MX_GPIO_Init+0x1e0>)
 8000e52:	f001 f873 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : RSBY_KEEP_EN_Pin EX_GPIO1_Pin EX_GPIO2_Pin WATCHDOG_Pin */
  GPIO_InitStruct.Pin = RSBY_KEEP_EN_Pin|EX_GPIO1_Pin|EX_GPIO2_Pin|WATCHDOG_Pin;
 8000e56:	f241 0323 	movw	r3, #4131	; 0x1023
 8000e5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	481b      	ldr	r0, [pc, #108]	; (8000edc <MX_GPIO_Init+0x1e4>)
 8000e70:	f001 f864 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e74:	2304      	movs	r3, #4
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4619      	mov	r1, r3
 8000e86:	4815      	ldr	r0, [pc, #84]	; (8000edc <MX_GPIO_Init+0x1e4>)
 8000e88:	f001 f858 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_EEPROM_Pin CS_FRAM_Pin CS_GYROD12_Pin INT_GYRO_Pin
                           CS_GYRO2_Pin INT_GYRO2_Pin SBD_SER_DCD_Pin SBD_SER_DSR_Pin
                           SBD_SER_DTR_Pin SBD_SER_CTS_Pin SBD_SER_RTS_Pin SBD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = CS_EEPROM_Pin|CS_FRAM_Pin|CS_GYROD12_Pin|INT_GYRO_Pin
 8000e8c:	f64f 439f 	movw	r3, #64671	; 0xfc9f
 8000e90:	61fb      	str	r3, [r7, #28]
                          |CS_GYRO2_Pin|INT_GYRO2_Pin|SBD_SER_DCD_Pin|SBD_SER_DSR_Pin
                          |SBD_SER_DTR_Pin|SBD_SER_CTS_Pin|SBD_SER_RTS_Pin|SBD_ON_OFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e92:	2301      	movs	r3, #1
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <MX_GPIO_Init+0x1e8>)
 8000ea6:	f001 f849 	bl	8001f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PGOOD_Pin */
  GPIO_InitStruct.Pin = PGOOD_Pin;
 8000eaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PGOOD_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_GPIO_Init+0x1e0>)
 8000ec0:	f001 f83c 	bl	8001f3c <HAL_GPIO_Init>

}
 8000ec4:	bf00      	nop
 8000ec6:	3730      	adds	r7, #48	; 0x30
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020000 	.word	0x40020000
 8000edc:	40020400 	.word	0x40020400
 8000ee0:	40020c00 	.word	0x40020c00

08000ee4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  Hardware_Watchdog_Refresh();
 8000eec:	f7ff faf0 	bl	80004d0 <Hardware_Watchdog_Refresh>
	  //TestPins();
	  // pintoggle('d',15);  	// CS_NAND - Led BLU
	  //PWM_STARTERS_T2_3_VariablePWM();

	  osDelay(1);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f004 ffbb 	bl	8005e6c <osDelay>
	  Hardware_Watchdog_Refresh();
 8000ef6:	e7f9      	b.n	8000eec <StartDefaultTask+0x8>

08000ef8 <Task01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task01 */
void Task01(void *argument)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task01 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000f00:	2001      	movs	r0, #1
 8000f02:	f004 ffb3 	bl	8005e6c <osDelay>
 8000f06:	e7fb      	b.n	8000f00 <Task01+0x8>

08000f08 <Task02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02 */
void Task02(void *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02 */
	/* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f004 ffab 	bl	8005e6c <osDelay>
 8000f16:	e7fb      	b.n	8000f10 <Task02+0x8>

08000f18 <Task03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task03 */
void Task03(void *argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task03 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f004 ffa3 	bl	8005e6c <osDelay>
 8000f26:	e7fb      	b.n	8000f20 <Task03+0x8>

08000f28 <Task04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task04 */
void Task04(void *argument)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task04 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000f30:	2001      	movs	r0, #1
 8000f32:	f004 ff9b 	bl	8005e6c <osDelay>
 8000f36:	e7fb      	b.n	8000f30 <Task04+0x8>

08000f38 <Task05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task05 */
void Task05(void *argument)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task05 */
  /* Infinite loop */
  for(;;)
  {
	osDelay(1);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f004 ff93 	bl	8005e6c <osDelay>
 8000f46:	e7fb      	b.n	8000f40 <Task05+0x8>

08000f48 <Task06>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task06 */
void Task06(void *argument)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task06 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f50:	2001      	movs	r0, #1
 8000f52:	f004 ff8b 	bl	8005e6c <osDelay>
 8000f56:	e7fb      	b.n	8000f50 <Task06+0x8>

08000f58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d101      	bne.n	8000f6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f6a:	f000 fc61 	bl	8001830 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40001000 	.word	0x40001000

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a0f      	ldr	r2, [pc, #60]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	603b      	str	r3, [r7, #0]
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_MspInit+0x4c>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800

08000fdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <HAL_ADC_MspInit+0x3c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d10d      	bne.n	800100a <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_ADC_MspInit+0x40>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_ADC_MspInit+0x40>)
 8000ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ffc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <HAL_ADC_MspInit+0x40>)
 8001000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40012000 	.word	0x40012000
 800101c:	40023800 	.word	0x40023800

08001020 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08c      	sub	sp, #48	; 0x30
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 031c 	add.w	r3, r7, #28
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a33      	ldr	r2, [pc, #204]	; (800110c <HAL_I2C_MspInit+0xec>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d12d      	bne.n	800109e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
 8001046:	4b32      	ldr	r3, [pc, #200]	; (8001110 <HAL_I2C_MspInit+0xf0>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a31      	ldr	r2, [pc, #196]	; (8001110 <HAL_I2C_MspInit+0xf0>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <HAL_I2C_MspInit+0xf0>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
 800105c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800105e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001064:	2312      	movs	r3, #18
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001068:	2301      	movs	r3, #1
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106c:	2303      	movs	r3, #3
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001070:	2304      	movs	r3, #4
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 031c 	add.w	r3, r7, #28
 8001078:	4619      	mov	r1, r3
 800107a:	4826      	ldr	r0, [pc, #152]	; (8001114 <HAL_I2C_MspInit+0xf4>)
 800107c:	f000 ff5e 	bl	8001f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <HAL_I2C_MspInit+0xf0>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a21      	ldr	r2, [pc, #132]	; (8001110 <HAL_I2C_MspInit+0xf0>)
 800108a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <HAL_I2C_MspInit+0xf0>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800109c:	e031      	b.n	8001102 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <HAL_I2C_MspInit+0xf8>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d12c      	bne.n	8001102 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <HAL_I2C_MspInit+0xf0>)
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	4a17      	ldr	r2, [pc, #92]	; (8001110 <HAL_I2C_MspInit+0xf0>)
 80010b2:	f043 0302 	orr.w	r3, r3, #2
 80010b6:	6313      	str	r3, [r2, #48]	; 0x30
 80010b8:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_I2C_MspInit+0xf0>)
 80010ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ca:	2312      	movs	r3, #18
 80010cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010d6:	2304      	movs	r3, #4
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	4619      	mov	r1, r3
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <HAL_I2C_MspInit+0xf4>)
 80010e2:	f000 ff2b 	bl	8001f3c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <HAL_I2C_MspInit+0xf0>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <HAL_I2C_MspInit+0xf0>)
 80010f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f4:	6413      	str	r3, [r2, #64]	; 0x40
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_I2C_MspInit+0xf0>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
}
 8001102:	bf00      	nop
 8001104:	3730      	adds	r7, #48	; 0x30
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40005400 	.word	0x40005400
 8001110:	40023800 	.word	0x40023800
 8001114:	40020400 	.word	0x40020400
 8001118:	40005800 	.word	0x40005800

0800111c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08e      	sub	sp, #56	; 0x38
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a4c      	ldr	r2, [pc, #304]	; (800126c <HAL_SPI_MspInit+0x150>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d12c      	bne.n	8001198 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
 8001142:	4b4b      	ldr	r3, [pc, #300]	; (8001270 <HAL_SPI_MspInit+0x154>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a4a      	ldr	r2, [pc, #296]	; (8001270 <HAL_SPI_MspInit+0x154>)
 8001148:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b48      	ldr	r3, [pc, #288]	; (8001270 <HAL_SPI_MspInit+0x154>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001156:	623b      	str	r3, [r7, #32]
 8001158:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
 800115e:	4b44      	ldr	r3, [pc, #272]	; (8001270 <HAL_SPI_MspInit+0x154>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a43      	ldr	r2, [pc, #268]	; (8001270 <HAL_SPI_MspInit+0x154>)
 8001164:	f043 0301 	orr.w	r3, r3, #1
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <HAL_SPI_MspInit+0x154>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	61fb      	str	r3, [r7, #28]
 8001174:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001176:	23e0      	movs	r3, #224	; 0xe0
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001186:	2305      	movs	r3, #5
 8001188:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	4619      	mov	r1, r3
 8001190:	4838      	ldr	r0, [pc, #224]	; (8001274 <HAL_SPI_MspInit+0x158>)
 8001192:	f000 fed3 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001196:	e064      	b.n	8001262 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a36      	ldr	r2, [pc, #216]	; (8001278 <HAL_SPI_MspInit+0x15c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d12d      	bne.n	80011fe <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	4b32      	ldr	r3, [pc, #200]	; (8001270 <HAL_SPI_MspInit+0x154>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	4a31      	ldr	r2, [pc, #196]	; (8001270 <HAL_SPI_MspInit+0x154>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6413      	str	r3, [r2, #64]	; 0x40
 80011b2:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <HAL_SPI_MspInit+0x154>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
 80011c2:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_SPI_MspInit+0x154>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a2a      	ldr	r2, [pc, #168]	; (8001270 <HAL_SPI_MspInit+0x154>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <HAL_SPI_MspInit+0x154>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80011da:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ec:	2305      	movs	r3, #5
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f4:	4619      	mov	r1, r3
 80011f6:	4821      	ldr	r0, [pc, #132]	; (800127c <HAL_SPI_MspInit+0x160>)
 80011f8:	f000 fea0 	bl	8001f3c <HAL_GPIO_Init>
}
 80011fc:	e031      	b.n	8001262 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <HAL_SPI_MspInit+0x164>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d12c      	bne.n	8001262 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <HAL_SPI_MspInit+0x154>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	4a17      	ldr	r2, [pc, #92]	; (8001270 <HAL_SPI_MspInit+0x154>)
 8001212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001216:	6413      	str	r3, [r2, #64]	; 0x40
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <HAL_SPI_MspInit+0x154>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <HAL_SPI_MspInit+0x154>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	4a10      	ldr	r2, [pc, #64]	; (8001270 <HAL_SPI_MspInit+0x154>)
 800122e:	f043 0304 	orr.w	r3, r3, #4
 8001232:	6313      	str	r3, [r2, #48]	; 0x30
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <HAL_SPI_MspInit+0x154>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001240:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001252:	2306      	movs	r3, #6
 8001254:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	4809      	ldr	r0, [pc, #36]	; (8001284 <HAL_SPI_MspInit+0x168>)
 800125e:	f000 fe6d 	bl	8001f3c <HAL_GPIO_Init>
}
 8001262:	bf00      	nop
 8001264:	3738      	adds	r7, #56	; 0x38
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40013000 	.word	0x40013000
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000
 8001278:	40003800 	.word	0x40003800
 800127c:	40020400 	.word	0x40020400
 8001280:	40003c00 	.word	0x40003c00
 8001284:	40020800 	.word	0x40020800

08001288 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001298:	d10d      	bne.n	80012b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_TIM_Base_MspInit+0x3c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_TIM_Base_MspInit+0x3c>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_TIM_Base_MspInit+0x3c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800

080012c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a0b      	ldr	r2, [pc, #44]	; (8001304 <HAL_TIM_PWM_MspInit+0x3c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d10d      	bne.n	80012f6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <HAL_TIM_PWM_MspInit+0x40>)
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	4a09      	ldr	r2, [pc, #36]	; (8001308 <HAL_TIM_PWM_MspInit+0x40>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <HAL_TIM_PWM_MspInit+0x40>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40000400 	.word	0x40000400
 8001308:	40023800 	.word	0x40023800

0800130c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b08a      	sub	sp, #40	; 0x28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800132c:	d11e      	bne.n	800136c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <HAL_TIM_MspPostInit+0xb0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a21      	ldr	r2, [pc, #132]	; (80013bc <HAL_TIM_MspPostInit+0xb0>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <HAL_TIM_MspPostInit+0xb0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWM_X_COIL_Pin|PWM_Y_COIL_Pin|PWM_Z_COIL_Pin;
 800134a:	2307      	movs	r3, #7
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800135a:	2301      	movs	r3, #1
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	4816      	ldr	r0, [pc, #88]	; (80013c0 <HAL_TIM_MspPostInit+0xb4>)
 8001366:	f000 fde9 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800136a:	e023      	b.n	80013b4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a14      	ldr	r2, [pc, #80]	; (80013c4 <HAL_TIM_MspPostInit+0xb8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d11e      	bne.n	80013b4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <HAL_TIM_MspPostInit+0xb0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <HAL_TIM_MspPostInit+0xb0>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <HAL_TIM_MspPostInit+0xb0>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_HEATER_Pin;
 8001392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013a4:	2302      	movs	r3, #2
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_HEATER_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4806      	ldr	r0, [pc, #24]	; (80013c8 <HAL_TIM_MspPostInit+0xbc>)
 80013b0:	f000 fdc4 	bl	8001f3c <HAL_GPIO_Init>
}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	; 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40000400 	.word	0x40000400
 80013c8:	40020800 	.word	0x40020800

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b090      	sub	sp, #64	; 0x40
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a64      	ldr	r2, [pc, #400]	; (800157c <HAL_UART_MspInit+0x1b0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12c      	bne.n	8001448 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80013f2:	4b63      	ldr	r3, [pc, #396]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	4a62      	ldr	r2, [pc, #392]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	6453      	str	r3, [r2, #68]	; 0x44
 80013fe:	4b60      	ldr	r3, [pc, #384]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
 8001408:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	627b      	str	r3, [r7, #36]	; 0x24
 800140e:	4b5c      	ldr	r3, [pc, #368]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a5b      	ldr	r2, [pc, #364]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 8001414:	f043 0302 	orr.w	r3, r3, #2
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b59      	ldr	r3, [pc, #356]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
 8001424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001426:	23c0      	movs	r3, #192	; 0xc0
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001436:	2307      	movs	r3, #7
 8001438:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800143e:	4619      	mov	r1, r3
 8001440:	4850      	ldr	r0, [pc, #320]	; (8001584 <HAL_UART_MspInit+0x1b8>)
 8001442:	f000 fd7b 	bl	8001f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001446:	e095      	b.n	8001574 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a4e      	ldr	r2, [pc, #312]	; (8001588 <HAL_UART_MspInit+0x1bc>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d12c      	bne.n	80014ac <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
 8001456:	4b4a      	ldr	r3, [pc, #296]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a49      	ldr	r2, [pc, #292]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b47      	ldr	r3, [pc, #284]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	623b      	str	r3, [r7, #32]
 800146c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	4b43      	ldr	r3, [pc, #268]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a42      	ldr	r2, [pc, #264]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 8001478:	f043 0308 	orr.w	r3, r3, #8
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b40      	ldr	r3, [pc, #256]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	61fb      	str	r3, [r7, #28]
 8001488:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800148a:	2360      	movs	r3, #96	; 0x60
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149a:	2307      	movs	r3, #7
 800149c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a2:	4619      	mov	r1, r3
 80014a4:	4839      	ldr	r0, [pc, #228]	; (800158c <HAL_UART_MspInit+0x1c0>)
 80014a6:	f000 fd49 	bl	8001f3c <HAL_GPIO_Init>
}
 80014aa:	e063      	b.n	8001574 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a37      	ldr	r2, [pc, #220]	; (8001590 <HAL_UART_MspInit+0x1c4>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d12d      	bne.n	8001512 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	4b31      	ldr	r3, [pc, #196]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	4a30      	ldr	r2, [pc, #192]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 80014c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c4:	6413      	str	r3, [r2, #64]	; 0x40
 80014c6:	4b2e      	ldr	r3, [pc, #184]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ce:	61bb      	str	r3, [r7, #24]
 80014d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
 80014d6:	4b2a      	ldr	r3, [pc, #168]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a29      	ldr	r2, [pc, #164]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b27      	ldr	r3, [pc, #156]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001500:	2307      	movs	r3, #7
 8001502:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001508:	4619      	mov	r1, r3
 800150a:	4820      	ldr	r0, [pc, #128]	; (800158c <HAL_UART_MspInit+0x1c0>)
 800150c:	f000 fd16 	bl	8001f3c <HAL_GPIO_Init>
}
 8001510:	e030      	b.n	8001574 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART6)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <HAL_UART_MspInit+0x1c8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d12b      	bne.n	8001574 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART6_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	4a16      	ldr	r2, [pc, #88]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 8001526:	f043 0320 	orr.w	r3, r3, #32
 800152a:	6453      	str	r3, [r2, #68]	; 0x44
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 800152e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6313      	str	r3, [r2, #48]	; 0x30
 8001548:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_UART_MspInit+0x1b4>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001554:	23c0      	movs	r3, #192	; 0xc0
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001564:	2308      	movs	r3, #8
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001568:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800156c:	4619      	mov	r1, r3
 800156e:	480a      	ldr	r0, [pc, #40]	; (8001598 <HAL_UART_MspInit+0x1cc>)
 8001570:	f000 fce4 	bl	8001f3c <HAL_GPIO_Init>
}
 8001574:	bf00      	nop
 8001576:	3740      	adds	r7, #64	; 0x40
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40011000 	.word	0x40011000
 8001580:	40023800 	.word	0x40023800
 8001584:	40020400 	.word	0x40020400
 8001588:	40004400 	.word	0x40004400
 800158c:	40020c00 	.word	0x40020c00
 8001590:	40004800 	.word	0x40004800
 8001594:	40011400 	.word	0x40011400
 8001598:	40020800 	.word	0x40020800

0800159c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015bc:	d147      	bne.n	800164e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
 80015c2:	4b25      	ldr	r3, [pc, #148]	; (8001658 <HAL_PCD_MspInit+0xbc>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a24      	ldr	r2, [pc, #144]	; (8001658 <HAL_PCD_MspInit+0xbc>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b22      	ldr	r3, [pc, #136]	; (8001658 <HAL_PCD_MspInit+0xbc>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	481b      	ldr	r0, [pc, #108]	; (800165c <HAL_PCD_MspInit+0xc0>)
 80015f0:	f000 fca4 	bl	8001f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80015f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001606:	230a      	movs	r3, #10
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4812      	ldr	r0, [pc, #72]	; (800165c <HAL_PCD_MspInit+0xc0>)
 8001612:	f000 fc93 	bl	8001f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_PCD_MspInit+0xbc>)
 8001618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_PCD_MspInit+0xbc>)
 800161c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001620:	6353      	str	r3, [r2, #52]	; 0x34
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <HAL_PCD_MspInit+0xbc>)
 8001628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162a:	4a0b      	ldr	r2, [pc, #44]	; (8001658 <HAL_PCD_MspInit+0xbc>)
 800162c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001630:	6453      	str	r3, [r2, #68]	; 0x44
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_PCD_MspInit+0xbc>)
 8001634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001636:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2043      	movs	r0, #67	; 0x43
 8001644:	f000 fc50 	bl	8001ee8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001648:	2043      	movs	r0, #67	; 0x43
 800164a:	f000 fc69 	bl	8001f20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	; 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	40020000 	.word	0x40020000

08001660 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b08c      	sub	sp, #48	; 0x30
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001670:	2200      	movs	r2, #0
 8001672:	6879      	ldr	r1, [r7, #4]
 8001674:	2036      	movs	r0, #54	; 0x36
 8001676:	f000 fc37 	bl	8001ee8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800167a:	2036      	movs	r0, #54	; 0x36
 800167c:	f000 fc50 	bl	8001f20 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	4b1e      	ldr	r3, [pc, #120]	; (8001700 <HAL_InitTick+0xa0>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	4a1d      	ldr	r2, [pc, #116]	; (8001700 <HAL_InitTick+0xa0>)
 800168a:	f043 0310 	orr.w	r3, r3, #16
 800168e:	6413      	str	r3, [r2, #64]	; 0x40
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_InitTick+0xa0>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f003 0310 	and.w	r3, r3, #16
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800169c:	f107 0210 	add.w	r2, r7, #16
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4611      	mov	r1, r2
 80016a6:	4618      	mov	r0, r3
 80016a8:	f002 fac6 	bl	8003c38 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016ac:	f002 fa9c 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 80016b0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80016b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b4:	4a13      	ldr	r2, [pc, #76]	; (8001704 <HAL_InitTick+0xa4>)
 80016b6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ba:	0c9b      	lsrs	r3, r3, #18
 80016bc:	3b01      	subs	r3, #1
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <HAL_InitTick+0xa8>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <HAL_InitTick+0xac>)
 80016c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_InitTick+0xa8>)
 80016c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016cc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016ce:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <HAL_InitTick+0xa8>)
 80016d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_InitTick+0xa8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_InitTick+0xa8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80016e0:	4809      	ldr	r0, [pc, #36]	; (8001708 <HAL_InitTick+0xa8>)
 80016e2:	f002 fb3f 	bl	8003d64 <HAL_TIM_Base_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d104      	bne.n	80016f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016ec:	4806      	ldr	r0, [pc, #24]	; (8001708 <HAL_InitTick+0xa8>)
 80016ee:	f002 fb64 	bl	8003dba <HAL_TIM_Base_Start_IT>
 80016f2:	4603      	mov	r3, r0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3730      	adds	r7, #48	; 0x30
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	431bde83 	.word	0x431bde83
 8001708:	20005f18 	.word	0x20005f18
 800170c:	40001000 	.word	0x40001000

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <MemManage_Handler+0x4>

0800172a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <UsageFault_Handler+0x4>

08001736 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <TIM6_DAC_IRQHandler+0x10>)
 800174a:	f002 fb85 	bl	8003e58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20005f18 	.word	0x20005f18

08001758 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <OTG_FS_IRQHandler+0x10>)
 800175e:	f000 fff6 	bl	800274e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20005030 	.word	0x20005030

0800176c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001770:	4b08      	ldr	r3, [pc, #32]	; (8001794 <SystemInit+0x28>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001776:	4a07      	ldr	r2, [pc, #28]	; (8001794 <SystemInit+0x28>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SystemInit+0x28>)
 8001782:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001786:	609a      	str	r2, [r3, #8]
#endif
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001798:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800179c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800179e:	e003      	b.n	80017a8 <LoopCopyDataInit>

080017a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80017a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80017a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80017a6:	3104      	adds	r1, #4

080017a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80017a8:	480b      	ldr	r0, [pc, #44]	; (80017d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80017ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80017ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80017b0:	d3f6      	bcc.n	80017a0 <CopyDataInit>
  ldr  r2, =_sbss
 80017b2:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017b4:	e002      	b.n	80017bc <LoopFillZerobss>

080017b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017b8:	f842 3b04 	str.w	r3, [r2], #4

080017bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017c0:	d3f9      	bcc.n	80017b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017c2:	f7ff ffd3 	bl	800176c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017c6:	f006 ff81 	bl	80086cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7fe fe97 	bl	80004fc <main>
  bx  lr    
 80017ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80017d4:	0800892c 	.word	0x0800892c
  ldr  r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017dc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80017e0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80017e4:	20005f9c 	.word	0x20005f9c

080017e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC_IRQHandler>
	...

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <HAL_Init+0x40>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0d      	ldr	r2, [pc, #52]	; (800182c <HAL_Init+0x40>)
 80017f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_Init+0x40>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_Init+0x40>)
 8001802:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001806:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_Init+0x40>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_Init+0x40>)
 800180e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001812:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001814:	2003      	movs	r0, #3
 8001816:	f000 fb5c 	bl	8001ed2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff ff20 	bl	8001660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001820:	f7ff fbb4 	bl	8000f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40023c00 	.word	0x40023c00

08001830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x20>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x24>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <HAL_IncTick+0x24>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000008 	.word	0x20000008
 8001854:	20005f58 	.word	0x20005f58

08001858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_GetTick+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20005f58 	.word	0x20005f58

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff ffee 	bl	8001858 <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_Delay+0x40>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001896:	bf00      	nop
 8001898:	f7ff ffde 	bl	8001858 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000008 	.word	0x20000008

080018b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018bc:	2300      	movs	r3, #0
 80018be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e033      	b.n	8001932 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f7ff fb82 	bl	8000fdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d118      	bne.n	8001924 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018fa:	f023 0302 	bic.w	r3, r3, #2
 80018fe:	f043 0202 	orr.w	r2, r3, #2
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f93a 	bl	8001b80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	f043 0201 	orr.w	r2, r3, #1
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	641a      	str	r2, [r3, #64]	; 0x40
 8001922:	e001      	b.n	8001928 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001930:	7bfb      	ldrb	r3, [r7, #15]
}
 8001932:	4618      	mov	r0, r3
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x1c>
 8001954:	2302      	movs	r3, #2
 8001956:	e105      	b.n	8001b64 <HAL_ADC_ConfigChannel+0x228>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b09      	cmp	r3, #9
 8001966:	d925      	bls.n	80019b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68d9      	ldr	r1, [r3, #12]
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	4613      	mov	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	3b1e      	subs	r3, #30
 800197e:	2207      	movs	r2, #7
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43da      	mvns	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	400a      	ands	r2, r1
 800198c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68d9      	ldr	r1, [r3, #12]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	b29b      	uxth	r3, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	4603      	mov	r3, r0
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4403      	add	r3, r0
 80019a6:	3b1e      	subs	r3, #30
 80019a8:	409a      	lsls	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	e022      	b.n	80019fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6919      	ldr	r1, [r3, #16]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	461a      	mov	r2, r3
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	2207      	movs	r2, #7
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	400a      	ands	r2, r1
 80019d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6919      	ldr	r1, [r3, #16]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	689a      	ldr	r2, [r3, #8]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	4618      	mov	r0, r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4403      	add	r3, r0
 80019f0:	409a      	lsls	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d824      	bhi.n	8001a4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685a      	ldr	r2, [r3, #4]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	4413      	add	r3, r2
 8001a12:	3b05      	subs	r3, #5
 8001a14:	221f      	movs	r2, #31
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	400a      	ands	r2, r1
 8001a22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4618      	mov	r0, r3
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3b05      	subs	r3, #5
 8001a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	635a      	str	r2, [r3, #52]	; 0x34
 8001a4a:	e04c      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b0c      	cmp	r3, #12
 8001a52:	d824      	bhi.n	8001a9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	3b23      	subs	r3, #35	; 0x23
 8001a66:	221f      	movs	r2, #31
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	400a      	ands	r2, r1
 8001a74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3b23      	subs	r3, #35	; 0x23
 8001a90:	fa00 f203 	lsl.w	r2, r0, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a9c:	e023      	b.n	8001ae6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	3b41      	subs	r3, #65	; 0x41
 8001ab0:	221f      	movs	r2, #31
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	400a      	ands	r2, r1
 8001abe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	4618      	mov	r0, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	3b41      	subs	r3, #65	; 0x41
 8001ada:	fa00 f203 	lsl.w	r2, r0, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_ADC_ConfigChannel+0x234>)
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <HAL_ADC_ConfigChannel+0x238>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d109      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x1cc>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b12      	cmp	r3, #18
 8001afa:	d105      	bne.n	8001b08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <HAL_ADC_ConfigChannel+0x238>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d123      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x21e>
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b10      	cmp	r3, #16
 8001b18:	d003      	beq.n	8001b22 <HAL_ADC_ConfigChannel+0x1e6>
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b11      	cmp	r3, #17
 8001b20:	d11b      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b10      	cmp	r3, #16
 8001b34:	d111      	bne.n	8001b5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <HAL_ADC_ConfigChannel+0x23c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a10      	ldr	r2, [pc, #64]	; (8001b7c <HAL_ADC_ConfigChannel+0x240>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	0c9a      	lsrs	r2, r3, #18
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b4c:	e002      	b.n	8001b54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f9      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3714      	adds	r7, #20
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	40012300 	.word	0x40012300
 8001b74:	40012000 	.word	0x40012000
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	431bde83 	.word	0x431bde83

08001b80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b88:	4b79      	ldr	r3, [pc, #484]	; (8001d70 <ADC_Init+0x1f0>)
 8001b8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	431a      	orrs	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685a      	ldr	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	021a      	lsls	r2, r3, #8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6859      	ldr	r1, [r3, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6899      	ldr	r1, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c12:	4a58      	ldr	r2, [pc, #352]	; (8001d74 <ADC_Init+0x1f4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d022      	beq.n	8001c5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6899      	ldr	r1, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	430a      	orrs	r2, r1
 8001c38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6899      	ldr	r1, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	e00f      	b.n	8001c7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0202 	bic.w	r2, r2, #2
 8001c8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6899      	ldr	r1, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	7e1b      	ldrb	r3, [r3, #24]
 8001c98:	005a      	lsls	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d01b      	beq.n	8001ce4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001cca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6859      	ldr	r1, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	035a      	lsls	r2, r3, #13
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	e007      	b.n	8001cf4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	051a      	lsls	r2, r3, #20
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6899      	ldr	r1, [r3, #8]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d36:	025a      	lsls	r2, r3, #9
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6899      	ldr	r1, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	029a      	lsls	r2, r3, #10
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	609a      	str	r2, [r3, #8]
}
 8001d64:	bf00      	nop
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40012300 	.word	0x40012300
 8001d74:	0f000001 	.word	0x0f000001

08001d78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8e:	68ba      	ldr	r2, [r7, #8]
 8001d90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d94:	4013      	ands	r3, r2
 8001d96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001da8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001daa:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <__NVIC_SetPriorityGrouping+0x44>)
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	60d3      	str	r3, [r2, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	f003 0307 	and.w	r3, r3, #7
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	db0b      	blt.n	8001e06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4907      	ldr	r1, [pc, #28]	; (8001e14 <__NVIC_EnableIRQ+0x38>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	e000e100 	.word	0xe000e100

08001e18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	6039      	str	r1, [r7, #0]
 8001e22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	db0a      	blt.n	8001e42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	490c      	ldr	r1, [pc, #48]	; (8001e64 <__NVIC_SetPriority+0x4c>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	0112      	lsls	r2, r2, #4
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e40:	e00a      	b.n	8001e58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4908      	ldr	r1, [pc, #32]	; (8001e68 <__NVIC_SetPriority+0x50>)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	3b04      	subs	r3, #4
 8001e50:	0112      	lsls	r2, r2, #4
 8001e52:	b2d2      	uxtb	r2, r2
 8001e54:	440b      	add	r3, r1
 8001e56:	761a      	strb	r2, [r3, #24]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000e100 	.word	0xe000e100
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b089      	sub	sp, #36	; 0x24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f1c3 0307 	rsb	r3, r3, #7
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	bf28      	it	cs
 8001e8a:	2304      	movcs	r3, #4
 8001e8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3304      	adds	r3, #4
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d902      	bls.n	8001e9c <NVIC_EncodePriority+0x30>
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3b03      	subs	r3, #3
 8001e9a:	e000      	b.n	8001e9e <NVIC_EncodePriority+0x32>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	401a      	ands	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001eb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	43d9      	mvns	r1, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec4:	4313      	orrs	r3, r2
         );
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3724      	adds	r7, #36	; 0x24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff ff4c 	bl	8001d78 <__NVIC_SetPriorityGrouping>
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001efa:	f7ff ff61 	bl	8001dc0 <__NVIC_GetPriorityGrouping>
 8001efe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	6978      	ldr	r0, [r7, #20]
 8001f06:	f7ff ffb1 	bl	8001e6c <NVIC_EncodePriority>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f10:	4611      	mov	r1, r2
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff80 	bl	8001e18 <__NVIC_SetPriority>
}
 8001f18:	bf00      	nop
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff54 	bl	8001ddc <__NVIC_EnableIRQ>
}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b089      	sub	sp, #36	; 0x24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
 8001f56:	e16b      	b.n	8002230 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f58:	2201      	movs	r2, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 815a 	bne.w	800222a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d00b      	beq.n	8001f96 <HAL_GPIO_Init+0x5a>
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d007      	beq.n	8001f96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f8a:	2b11      	cmp	r3, #17
 8001f8c:	d003      	beq.n	8001f96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b12      	cmp	r3, #18
 8001f94:	d130      	bne.n	8001ff8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68da      	ldr	r2, [r3, #12]
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fcc:	2201      	movs	r2, #1
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 0201 	and.w	r2, r3, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	2203      	movs	r2, #3
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b02      	cmp	r3, #2
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0xfc>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b12      	cmp	r3, #18
 8002036:	d123      	bne.n	8002080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	08da      	lsrs	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3208      	adds	r2, #8
 8002040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	220f      	movs	r2, #15
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	69b9      	ldr	r1, [r7, #24]
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0203 	and.w	r2, r3, #3
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 80b4 	beq.w	800222a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	4b5f      	ldr	r3, [pc, #380]	; (8002244 <HAL_GPIO_Init+0x308>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a5e      	ldr	r2, [pc, #376]	; (8002244 <HAL_GPIO_Init+0x308>)
 80020cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b5c      	ldr	r3, [pc, #368]	; (8002244 <HAL_GPIO_Init+0x308>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020de:	4a5a      	ldr	r2, [pc, #360]	; (8002248 <HAL_GPIO_Init+0x30c>)
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3302      	adds	r3, #2
 80020e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	220f      	movs	r2, #15
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a51      	ldr	r2, [pc, #324]	; (800224c <HAL_GPIO_Init+0x310>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d02b      	beq.n	8002162 <HAL_GPIO_Init+0x226>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a50      	ldr	r2, [pc, #320]	; (8002250 <HAL_GPIO_Init+0x314>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d025      	beq.n	800215e <HAL_GPIO_Init+0x222>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a4f      	ldr	r2, [pc, #316]	; (8002254 <HAL_GPIO_Init+0x318>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01f      	beq.n	800215a <HAL_GPIO_Init+0x21e>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a4e      	ldr	r2, [pc, #312]	; (8002258 <HAL_GPIO_Init+0x31c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d019      	beq.n	8002156 <HAL_GPIO_Init+0x21a>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a4d      	ldr	r2, [pc, #308]	; (800225c <HAL_GPIO_Init+0x320>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_GPIO_Init+0x216>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4c      	ldr	r2, [pc, #304]	; (8002260 <HAL_GPIO_Init+0x324>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d00d      	beq.n	800214e <HAL_GPIO_Init+0x212>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4b      	ldr	r2, [pc, #300]	; (8002264 <HAL_GPIO_Init+0x328>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d007      	beq.n	800214a <HAL_GPIO_Init+0x20e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4a      	ldr	r2, [pc, #296]	; (8002268 <HAL_GPIO_Init+0x32c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <HAL_GPIO_Init+0x20a>
 8002142:	2307      	movs	r3, #7
 8002144:	e00e      	b.n	8002164 <HAL_GPIO_Init+0x228>
 8002146:	2308      	movs	r3, #8
 8002148:	e00c      	b.n	8002164 <HAL_GPIO_Init+0x228>
 800214a:	2306      	movs	r3, #6
 800214c:	e00a      	b.n	8002164 <HAL_GPIO_Init+0x228>
 800214e:	2305      	movs	r3, #5
 8002150:	e008      	b.n	8002164 <HAL_GPIO_Init+0x228>
 8002152:	2304      	movs	r3, #4
 8002154:	e006      	b.n	8002164 <HAL_GPIO_Init+0x228>
 8002156:	2303      	movs	r3, #3
 8002158:	e004      	b.n	8002164 <HAL_GPIO_Init+0x228>
 800215a:	2302      	movs	r3, #2
 800215c:	e002      	b.n	8002164 <HAL_GPIO_Init+0x228>
 800215e:	2301      	movs	r3, #1
 8002160:	e000      	b.n	8002164 <HAL_GPIO_Init+0x228>
 8002162:	2300      	movs	r3, #0
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	f002 0203 	and.w	r2, r2, #3
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	4093      	lsls	r3, r2
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4313      	orrs	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002174:	4934      	ldr	r1, [pc, #208]	; (8002248 <HAL_GPIO_Init+0x30c>)
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002182:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_GPIO_Init+0x330>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a6:	4a31      	ldr	r2, [pc, #196]	; (800226c <HAL_GPIO_Init+0x330>)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021ac:	4b2f      	ldr	r3, [pc, #188]	; (800226c <HAL_GPIO_Init+0x330>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021d0:	4a26      	ldr	r2, [pc, #152]	; (800226c <HAL_GPIO_Init+0x330>)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <HAL_GPIO_Init+0x330>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	43db      	mvns	r3, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4013      	ands	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021fa:	4a1c      	ldr	r2, [pc, #112]	; (800226c <HAL_GPIO_Init+0x330>)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002200:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_GPIO_Init+0x330>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002224:	4a11      	ldr	r2, [pc, #68]	; (800226c <HAL_GPIO_Init+0x330>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3301      	adds	r3, #1
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	2b0f      	cmp	r3, #15
 8002234:	f67f ae90 	bls.w	8001f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002238:	bf00      	nop
 800223a:	3724      	adds	r7, #36	; 0x24
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40023800 	.word	0x40023800
 8002248:	40013800 	.word	0x40013800
 800224c:	40020000 	.word	0x40020000
 8002250:	40020400 	.word	0x40020400
 8002254:	40020800 	.word	0x40020800
 8002258:	40020c00 	.word	0x40020c00
 800225c:	40021000 	.word	0x40021000
 8002260:	40021400 	.word	0x40021400
 8002264:	40021800 	.word	0x40021800
 8002268:	40021c00 	.word	0x40021c00
 800226c:	40013c00 	.word	0x40013c00

08002270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	807b      	strh	r3, [r7, #2]
 800227c:	4613      	mov	r3, r2
 800227e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002280:	787b      	ldrb	r3, [r7, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002286:	887a      	ldrh	r2, [r7, #2]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800228c:	e003      	b.n	8002296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800228e:	887b      	ldrh	r3, [r7, #2]
 8002290:	041a      	lsls	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	619a      	str	r2, [r3, #24]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d101      	bne.n	80022b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e11f      	b.n	80024f6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d106      	bne.n	80022d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe fea8 	bl	8001020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2224      	movs	r2, #36	; 0x24
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0201 	bic.w	r2, r2, #1
 80022e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002306:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002308:	f001 fc6e 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 800230c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	4a7b      	ldr	r2, [pc, #492]	; (8002500 <HAL_I2C_Init+0x25c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d807      	bhi.n	8002328 <HAL_I2C_Init+0x84>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	4a7a      	ldr	r2, [pc, #488]	; (8002504 <HAL_I2C_Init+0x260>)
 800231c:	4293      	cmp	r3, r2
 800231e:	bf94      	ite	ls
 8002320:	2301      	movls	r3, #1
 8002322:	2300      	movhi	r3, #0
 8002324:	b2db      	uxtb	r3, r3
 8002326:	e006      	b.n	8002336 <HAL_I2C_Init+0x92>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	4a77      	ldr	r2, [pc, #476]	; (8002508 <HAL_I2C_Init+0x264>)
 800232c:	4293      	cmp	r3, r2
 800232e:	bf94      	ite	ls
 8002330:	2301      	movls	r3, #1
 8002332:	2300      	movhi	r3, #0
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e0db      	b.n	80024f6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a72      	ldr	r2, [pc, #456]	; (800250c <HAL_I2C_Init+0x268>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0c9b      	lsrs	r3, r3, #18
 8002348:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68ba      	ldr	r2, [r7, #8]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	4a64      	ldr	r2, [pc, #400]	; (8002500 <HAL_I2C_Init+0x25c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d802      	bhi.n	8002378 <HAL_I2C_Init+0xd4>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	3301      	adds	r3, #1
 8002376:	e009      	b.n	800238c <HAL_I2C_Init+0xe8>
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	4a63      	ldr	r2, [pc, #396]	; (8002510 <HAL_I2C_Init+0x26c>)
 8002384:	fba2 2303 	umull	r2, r3, r2, r3
 8002388:	099b      	lsrs	r3, r3, #6
 800238a:	3301      	adds	r3, #1
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	430b      	orrs	r3, r1
 8002392:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	69db      	ldr	r3, [r3, #28]
 800239a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800239e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4956      	ldr	r1, [pc, #344]	; (8002500 <HAL_I2C_Init+0x25c>)
 80023a8:	428b      	cmp	r3, r1
 80023aa:	d80d      	bhi.n	80023c8 <HAL_I2C_Init+0x124>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1e59      	subs	r1, r3, #1
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	bf38      	it	cc
 80023c4:	2304      	movcc	r3, #4
 80023c6:	e04f      	b.n	8002468 <HAL_I2C_Init+0x1c4>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d111      	bne.n	80023f4 <HAL_I2C_Init+0x150>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1e58      	subs	r0, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6859      	ldr	r1, [r3, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	440b      	add	r3, r1
 80023de:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e012      	b.n	800241a <HAL_I2C_Init+0x176>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	1e58      	subs	r0, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6859      	ldr	r1, [r3, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	0099      	lsls	r1, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	fbb0 f3f3 	udiv	r3, r0, r3
 800240a:	3301      	adds	r3, #1
 800240c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002410:	2b00      	cmp	r3, #0
 8002412:	bf0c      	ite	eq
 8002414:	2301      	moveq	r3, #1
 8002416:	2300      	movne	r3, #0
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_I2C_Init+0x17e>
 800241e:	2301      	movs	r3, #1
 8002420:	e022      	b.n	8002468 <HAL_I2C_Init+0x1c4>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10e      	bne.n	8002448 <HAL_I2C_Init+0x1a4>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e58      	subs	r0, r3, #1
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6859      	ldr	r1, [r3, #4]
 8002432:	460b      	mov	r3, r1
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	440b      	add	r3, r1
 8002438:	fbb0 f3f3 	udiv	r3, r0, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002446:	e00f      	b.n	8002468 <HAL_I2C_Init+0x1c4>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1e58      	subs	r0, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6859      	ldr	r1, [r3, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	0099      	lsls	r1, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	fbb0 f3f3 	udiv	r3, r0, r3
 800245e:	3301      	adds	r3, #1
 8002460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	6809      	ldr	r1, [r1, #0]
 800246c:	4313      	orrs	r3, r2
 800246e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69da      	ldr	r2, [r3, #28]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	431a      	orrs	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002496:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6911      	ldr	r1, [r2, #16]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68d2      	ldr	r2, [r2, #12]
 80024a2:	4311      	orrs	r1, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	430b      	orrs	r3, r1
 80024aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695a      	ldr	r2, [r3, #20]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0201 	orr.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	000186a0 	.word	0x000186a0
 8002504:	001e847f 	.word	0x001e847f
 8002508:	003d08ff 	.word	0x003d08ff
 800250c:	431bde83 	.word	0x431bde83
 8002510:	10624dd3 	.word	0x10624dd3

08002514 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002516:	b08f      	sub	sp, #60	; 0x3c
 8002518:	af0a      	add	r7, sp, #40	; 0x28
 800251a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e10f      	b.n	8002746 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d106      	bne.n	8002546 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff f82b 	bl	800159c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2203      	movs	r2, #3
 800254a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f002 ff6d 	bl	8005444 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	687e      	ldr	r6, [r7, #4]
 8002572:	466d      	mov	r5, sp
 8002574:	f106 0410 	add.w	r4, r6, #16
 8002578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800257a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800257c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800257e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002580:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002584:	e885 0003 	stmia.w	r5, {r0, r1}
 8002588:	1d33      	adds	r3, r6, #4
 800258a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258c:	6838      	ldr	r0, [r7, #0]
 800258e:	f002 fe55 	bl	800523c <USB_CoreInit>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0d0      	b.n	8002746 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 ff5b 	bl	8005466 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e04a      	b.n	800264c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	333d      	adds	r3, #61	; 0x3d
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	333c      	adds	r3, #60	; 0x3c
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	b298      	uxth	r0, r3
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	3342      	adds	r3, #66	; 0x42
 80025f2:	4602      	mov	r2, r0
 80025f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	333f      	adds	r3, #63	; 0x3f
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	3344      	adds	r3, #68	; 0x44
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	3348      	adds	r3, #72	; 0x48
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	1a9b      	subs	r3, r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	3350      	adds	r3, #80	; 0x50
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	3301      	adds	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	d3af      	bcc.n	80025b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	e044      	b.n	80026e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	1a9b      	subs	r3, r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	1a9b      	subs	r3, r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	3301      	adds	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d3b5      	bcc.n	800265c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	687e      	ldr	r6, [r7, #4]
 80026f8:	466d      	mov	r5, sp
 80026fa:	f106 0410 	add.w	r4, r6, #16
 80026fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002706:	e894 0003 	ldmia.w	r4, {r0, r1}
 800270a:	e885 0003 	stmia.w	r5, {r0, r1}
 800270e:	1d33      	adds	r3, r6, #4
 8002710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002712:	6838      	ldr	r0, [r7, #0]
 8002714:	f002 fed2 	bl	80054bc <USB_DevInit>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2202      	movs	r2, #2
 8002722:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e00d      	b.n	8002746 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f003 f904 	bl	800594c <USB_DevDisconnect>

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800274e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800274e:	b590      	push	{r4, r7, lr}
 8002750:	b08d      	sub	sp, #52	; 0x34
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f003 f9a5 	bl	8005ab4 <USB_GetMode>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	f040 839d 	bne.w	8002eac <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f003 f909 	bl	800598e <USB_ReadInterrupts>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 8393 	beq.w	8002eaa <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4618      	mov	r0, r3
 800278a:	f003 f900 	bl	800598e <USB_ReadInterrupts>
 800278e:	4603      	mov	r3, r0
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b02      	cmp	r3, #2
 8002796:	d107      	bne.n	80027a8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695a      	ldr	r2, [r3, #20]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f002 0202 	and.w	r2, r2, #2
 80027a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 f8ee 	bl	800598e <USB_ReadInterrupts>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f003 0310 	and.w	r3, r3, #16
 80027b8:	2b10      	cmp	r3, #16
 80027ba:	d161      	bne.n	8002880 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0210 	bic.w	r2, r2, #16
 80027ca:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	f003 020f 	and.w	r2, r3, #15
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	4413      	add	r3, r2
 80027e8:	3304      	adds	r3, #4
 80027ea:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	0c5b      	lsrs	r3, r3, #17
 80027f0:	f003 030f 	and.w	r3, r3, #15
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d124      	bne.n	8002842 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d035      	beq.n	8002870 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800280e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002812:	b29b      	uxth	r3, r3
 8002814:	461a      	mov	r2, r3
 8002816:	6a38      	ldr	r0, [r7, #32]
 8002818:	f003 f86f 	bl	80058fa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	091b      	lsrs	r3, r3, #4
 8002824:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002828:	441a      	add	r2, r3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	699a      	ldr	r2, [r3, #24]
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800283a:	441a      	add	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	619a      	str	r2, [r3, #24]
 8002840:	e016      	b.n	8002870 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	0c5b      	lsrs	r3, r3, #17
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	2b06      	cmp	r3, #6
 800284c:	d110      	bne.n	8002870 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002854:	2208      	movs	r2, #8
 8002856:	4619      	mov	r1, r3
 8002858:	6a38      	ldr	r0, [r7, #32]
 800285a:	f003 f84e 	bl	80058fa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	699a      	ldr	r2, [r3, #24]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	091b      	lsrs	r3, r3, #4
 8002866:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800286a:	441a      	add	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699a      	ldr	r2, [r3, #24]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0210 	orr.w	r2, r2, #16
 800287e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f003 f882 	bl	800598e <USB_ReadInterrupts>
 800288a:	4603      	mov	r3, r0
 800288c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002890:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002894:	d16e      	bne.n	8002974 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 f888 	bl	80059b4 <USB_ReadDevAllOutEpInterrupt>
 80028a4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80028a6:	e062      	b.n	800296e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d057      	beq.n	8002962 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b8:	b2d2      	uxtb	r2, r2
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 f8ad 	bl	8005a1c <USB_ReadDevOutEPInterrupt>
 80028c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00c      	beq.n	80028e8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028da:	461a      	mov	r2, r3
 80028dc:	2301      	movs	r3, #1
 80028de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80028e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fbe8 	bl	80030b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00c      	beq.n	800290c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	015a      	lsls	r2, r3, #5
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	4413      	add	r3, r2
 80028fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028fe:	461a      	mov	r2, r3
 8002900:	2308      	movs	r3, #8
 8002902:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fce2 	bl	80032d0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	2b00      	cmp	r3, #0
 8002914:	d008      	beq.n	8002928 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002922:	461a      	mov	r2, r3
 8002924:	2310      	movs	r3, #16
 8002926:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	f003 0320 	and.w	r3, r3, #32
 800292e:	2b00      	cmp	r3, #0
 8002930:	d008      	beq.n	8002944 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	015a      	lsls	r2, r3, #5
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	4413      	add	r3, r2
 800293a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293e:	461a      	mov	r2, r3
 8002940:	2320      	movs	r3, #32
 8002942:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	4413      	add	r3, r2
 8002956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295a:	461a      	mov	r2, r3
 800295c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002960:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	3301      	adds	r3, #1
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296a:	085b      	lsrs	r3, r3, #1
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	2b00      	cmp	r3, #0
 8002972:	d199      	bne.n	80028a8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f003 f808 	bl	800598e <USB_ReadInterrupts>
 800297e:	4603      	mov	r3, r0
 8002980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002984:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002988:	f040 80c0 	bne.w	8002b0c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f003 f829 	bl	80059e8 <USB_ReadDevAllInEpInterrupt>
 8002996:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800299c:	e0b2      	b.n	8002b04 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800299e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80a7 	beq.w	8002af8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b0:	b2d2      	uxtb	r2, r2
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f003 f84f 	bl	8005a58 <USB_ReadDevInEPInterrupt>
 80029ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d057      	beq.n	8002a76 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	f003 030f 	and.w	r3, r3, #15
 80029cc:	2201      	movs	r2, #1
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	43db      	mvns	r3, r3
 80029e0:	69f9      	ldr	r1, [r7, #28]
 80029e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029e6:	4013      	ands	r3, r2
 80029e8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	015a      	lsls	r2, r3, #5
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	4413      	add	r3, r2
 80029f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029f6:	461a      	mov	r2, r3
 80029f8:	2301      	movs	r3, #1
 80029fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d132      	bne.n	8002a6a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	3348      	adds	r3, #72	; 0x48
 8002a14:	6819      	ldr	r1, [r3, #0]
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4403      	add	r3, r0
 8002a24:	3344      	adds	r3, #68	; 0x44
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4419      	add	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4403      	add	r3, r0
 8002a38:	3348      	adds	r3, #72	; 0x48
 8002a3a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d113      	bne.n	8002a6a <HAL_PCD_IRQHandler+0x31c>
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3350      	adds	r3, #80	; 0x50
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d108      	bne.n	8002a6a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002a62:	461a      	mov	r2, r3
 8002a64:	2101      	movs	r1, #1
 8002a66:	f003 f857 	bl	8005b18 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	4619      	mov	r1, r3
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 fa2a 	bl	8002eca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	015a      	lsls	r2, r3, #5
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	4413      	add	r3, r2
 8002a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2308      	movs	r3, #8
 8002a90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2310      	movs	r3, #16
 8002aac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2340      	movs	r3, #64	; 0x40
 8002ac8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d003      	beq.n	8002af8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002af0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fa53 	bl	8002f9e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	3301      	adds	r3, #1
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f47f af49 	bne.w	800299e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f002 ff3c 	bl	800598e <USB_ReadInterrupts>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b20:	d122      	bne.n	8002b68 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d108      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b48:	2100      	movs	r1, #0
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fc06 	bl	800335c <HAL_PCDEx_LPM_Callback>
 8002b50:	e002      	b.n	8002b58 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f9ed 	bl	8002f32 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002b66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f002 ff0e 	bl	800598e <USB_ReadInterrupts>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b7c:	d112      	bne.n	8002ba4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d102      	bne.n	8002b94 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f9c5 	bl	8002f1e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695a      	ldr	r2, [r3, #20]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ba2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f002 fef0 	bl	800598e <USB_ReadInterrupts>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb8:	f040 80c7 	bne.w	8002d4a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bca:	f023 0301 	bic.w	r3, r3, #1
 8002bce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2110      	movs	r1, #16
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f002 fdd4 	bl	8005784 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002be0:	e056      	b.n	8002c90 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be4:	015a      	lsls	r2, r3, #5
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	4413      	add	r3, r2
 8002bea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bf4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c06:	0151      	lsls	r1, r2, #5
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	440a      	add	r2, r1
 8002c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c14:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c18:	015a      	lsls	r2, r3, #5
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c26:	0151      	lsls	r1, r2, #5
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	440a      	add	r2, r1
 8002c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c30:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	015a      	lsls	r2, r3, #5
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c42:	461a      	mov	r2, r3
 8002c44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c48:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c5a:	0151      	lsls	r1, r2, #5
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	440a      	add	r2, r1
 8002c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c7a:	0151      	lsls	r1, r2, #5
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	440a      	add	r2, r1
 8002c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c88:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d3a3      	bcc.n	8002be2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	69fa      	ldr	r2, [r7, #28]
 8002ca4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ca8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002cac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d016      	beq.n	8002ce4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc6:	f043 030b 	orr.w	r3, r3, #11
 8002cca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cdc:	f043 030b 	orr.w	r3, r3, #11
 8002ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce2:	e015      	b.n	8002d10 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cf6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002cfa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d0a:	f043 030b 	orr.w	r3, r3, #11
 8002d0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69fa      	ldr	r2, [r7, #28]
 8002d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d34:	461a      	mov	r2, r3
 8002d36:	f002 feef 	bl	8005b18 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 fe1d 	bl	800598e <USB_ReadInterrupts>
 8002d54:	4603      	mov	r3, r0
 8002d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d5e:	d124      	bne.n	8002daa <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 feb3 	bl	8005ad0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f002 fd69 	bl	8005846 <USB_GetDevSpeed>
 8002d74:	4603      	mov	r3, r0
 8002d76:	461a      	mov	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681c      	ldr	r4, [r3, #0]
 8002d80:	f000 ff26 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8002d84:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f002 fab6 	bl	8005300 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f8b8 	bl	8002f0a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f002 fded 	bl	800598e <USB_ReadInterrupts>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d10a      	bne.n	8002dd4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f899 	bl	8002ef6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f002 0208 	and.w	r2, r2, #8
 8002dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f002 fdd8 	bl	800598e <USB_ReadInterrupts>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002de4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002de8:	d10f      	bne.n	8002e0a <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002dea:	2300      	movs	r3, #0
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f8b2 	bl	8002f5e <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f002 fdbd 	bl	800598e <USB_ReadInterrupts>
 8002e14:	4603      	mov	r3, r0
 8002e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e1e:	d10f      	bne.n	8002e40 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	4619      	mov	r1, r3
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 f88b 	bl	8002f46 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fda2 	bl	800598e <USB_ReadInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e54:	d10a      	bne.n	8002e6c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f88d 	bl	8002f76 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695a      	ldr	r2, [r3, #20]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f002 fd8c 	bl	800598e <USB_ReadInterrupts>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d115      	bne.n	8002eac <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f879 	bl	8002f8a <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	e000      	b.n	8002eac <HAL_PCD_IRQHandler+0x75e>
      return;
 8002eaa:	bf00      	nop
    }
  }
}
 8002eac:	3734      	adds	r7, #52	; 0x34
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd90      	pop	{r4, r7, pc}

08002eb2 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002f26:	bf00      	nop
 8002f28:	370c      	adds	r7, #12
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b083      	sub	sp, #12
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b083      	sub	sp, #12
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	6078      	str	r0, [r7, #4]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr

08002f5e <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b083      	sub	sp, #12
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
 8002f66:	460b      	mov	r3, r1
 8002f68:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr

08002f76 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b08a      	sub	sp, #40	; 0x28
 8002fa2:	af02      	add	r7, sp, #8
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	3338      	adds	r3, #56	; 0x38
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	699a      	ldr	r2, [r3, #24]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d901      	bls.n	8002fd6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e06c      	b.n	80030b0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	69fa      	ldr	r2, [r7, #28]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d902      	bls.n	8002ff2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3303      	adds	r3, #3
 8002ff6:	089b      	lsrs	r3, r3, #2
 8002ff8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ffa:	e02b      	b.n	8003054 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	69fa      	ldr	r2, [r7, #28]
 800300e:	429a      	cmp	r2, r3
 8003010:	d902      	bls.n	8003018 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	3303      	adds	r3, #3
 800301c:	089b      	lsrs	r3, r3, #2
 800301e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	68d9      	ldr	r1, [r3, #12]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003030:	b2db      	uxtb	r3, r3
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	4603      	mov	r3, r0
 8003036:	6978      	ldr	r0, [r7, #20]
 8003038:	f002 fc2a 	bl	8005890 <USB_WritePacket>

    ep->xfer_buff  += len;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	68da      	ldr	r2, [r3, #12]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	441a      	add	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	699a      	ldr	r2, [r3, #24]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	441a      	add	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	b29b      	uxth	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	429a      	cmp	r2, r3
 8003068:	d809      	bhi.n	800307e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003072:	429a      	cmp	r2, r3
 8003074:	d203      	bcs.n	800307e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1be      	bne.n	8002ffc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	429a      	cmp	r2, r3
 8003088:	d811      	bhi.n	80030ae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	2201      	movs	r2, #1
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	6939      	ldr	r1, [r7, #16]
 80030a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030aa:	4013      	ands	r3, r2
 80030ac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	333c      	adds	r3, #60	; 0x3c
 80030d0:	3304      	adds	r3, #4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	f040 80a0 	bne.w	8003230 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d015      	beq.n	8003126 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4a72      	ldr	r2, [pc, #456]	; (80032c8 <PCD_EP_OutXfrComplete_int+0x210>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	f240 80dd 	bls.w	80032be <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80d7 	beq.w	80032be <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311c:	461a      	mov	r2, r3
 800311e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003122:	6093      	str	r3, [r2, #8]
 8003124:	e0cb      	b.n	80032be <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800313c:	461a      	mov	r2, r3
 800313e:	2320      	movs	r3, #32
 8003140:	6093      	str	r3, [r2, #8]
 8003142:	e0bc      	b.n	80032be <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 80b7 	bne.w	80032be <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4a5d      	ldr	r2, [pc, #372]	; (80032c8 <PCD_EP_OutXfrComplete_int+0x210>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d90f      	bls.n	8003178 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00a      	beq.n	8003178 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	015a      	lsls	r2, r3, #5
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4413      	add	r3, r2
 800316a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316e:	461a      	mov	r2, r3
 8003170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003174:	6093      	str	r3, [r2, #8]
 8003176:	e0a2      	b.n	80032be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800318a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	0159      	lsls	r1, r3, #5
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	440b      	add	r3, r1
 8003194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800319e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4403      	add	r3, r0
 80031ae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80031b2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031c6:	6819      	ldr	r1, [r3, #0]
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	1a9b      	subs	r3, r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4403      	add	r3, r0
 80031d6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4419      	add	r1, r3
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4403      	add	r3, r0
 80031ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031f0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d114      	bne.n	8003222 <PCD_EP_OutXfrComplete_int+0x16a>
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d108      	bne.n	8003222 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800321a:	461a      	mov	r2, r3
 800321c:	2101      	movs	r1, #1
 800321e:	f002 fc7b 	bl	8005b18 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	4619      	mov	r1, r3
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff fe42 	bl	8002eb2 <HAL_PCD_DataOutStageCallback>
 800322e:	e046      	b.n	80032be <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4a26      	ldr	r2, [pc, #152]	; (80032cc <PCD_EP_OutXfrComplete_int+0x214>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d124      	bne.n	8003282 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00a      	beq.n	8003258 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324e:	461a      	mov	r2, r3
 8003250:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003254:	6093      	str	r3, [r2, #8]
 8003256:	e032      	b.n	80032be <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d008      	beq.n	8003274 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326e:	461a      	mov	r2, r3
 8003270:	2320      	movs	r3, #32
 8003272:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	4619      	mov	r1, r3
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff fe19 	bl	8002eb2 <HAL_PCD_DataOutStageCallback>
 8003280:	e01d      	b.n	80032be <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d114      	bne.n	80032b2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d108      	bne.n	80032b2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80032aa:	461a      	mov	r2, r3
 80032ac:	2100      	movs	r1, #0
 80032ae:	f002 fc33 	bl	8005b18 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	4619      	mov	r1, r3
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7ff fdfa 	bl	8002eb2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	4f54300a 	.word	0x4f54300a
 80032cc:	4f54310a 	.word	0x4f54310a

080032d0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	333c      	adds	r3, #60	; 0x3c
 80032e8:	3304      	adds	r3, #4
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a15      	ldr	r2, [pc, #84]	; (8003358 <PCD_EP_OutSetupPacket_int+0x88>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d90e      	bls.n	8003324 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800330c:	2b00      	cmp	r3, #0
 800330e:	d009      	beq.n	8003324 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331c:	461a      	mov	r2, r3
 800331e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003322:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff fddc 	bl	8002ee2 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4a0a      	ldr	r2, [pc, #40]	; (8003358 <PCD_EP_OutSetupPacket_int+0x88>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d90c      	bls.n	800334c <PCD_EP_OutSetupPacket_int+0x7c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d108      	bne.n	800334c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003344:	461a      	mov	r2, r3
 8003346:	2101      	movs	r1, #1
 8003348:	f002 fbe6 	bl	8005b18 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	4f54300a 	.word	0x4f54300a

0800335c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e25b      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d075      	beq.n	800347e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003392:	4ba3      	ldr	r3, [pc, #652]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b04      	cmp	r3, #4
 800339c:	d00c      	beq.n	80033b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339e:	4ba0      	ldr	r3, [pc, #640]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d112      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033aa:	4b9d      	ldr	r3, [pc, #628]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	4b99      	ldr	r3, [pc, #612]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05b      	beq.n	800347c <HAL_RCC_OscConfig+0x108>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d157      	bne.n	800347c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e236      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x74>
 80033da:	4b91      	ldr	r3, [pc, #580]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a90      	ldr	r2, [pc, #576]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x98>
 80033f2:	4b8b      	ldr	r3, [pc, #556]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a8a      	ldr	r2, [pc, #552]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b88      	ldr	r3, [pc, #544]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a87      	ldr	r2, [pc, #540]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 800340c:	4b84      	ldr	r3, [pc, #528]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a83      	ldr	r2, [pc, #524]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b81      	ldr	r3, [pc, #516]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a80      	ldr	r2, [pc, #512]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe fa14 	bl	8001858 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003434:	f7fe fa10 	bl	8001858 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e1fb      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b76      	ldr	r3, [pc, #472]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xc0>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fa00 	bl	8001858 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800345c:	f7fe f9fc 	bl	8001858 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1e7      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	4b6c      	ldr	r3, [pc, #432]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0xe8>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d063      	beq.n	8003552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800348a:	4b65      	ldr	r3, [pc, #404]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003496:	4b62      	ldr	r3, [pc, #392]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d11c      	bne.n	80034dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a2:	4b5f      	ldr	r3, [pc, #380]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d116      	bne.n	80034dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	4b5c      	ldr	r3, [pc, #368]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x152>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1bb      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b56      	ldr	r3, [pc, #344]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4952      	ldr	r1, [pc, #328]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	e03a      	b.n	8003552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e4:	4b4f      	ldr	r3, [pc, #316]	; (8003624 <HAL_RCC_OscConfig+0x2b0>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fe f9b5 	bl	8001858 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f2:	f7fe f9b1 	bl	8001858 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e19c      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	4b46      	ldr	r3, [pc, #280]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b43      	ldr	r3, [pc, #268]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4940      	ldr	r1, [pc, #256]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003526:	4b3f      	ldr	r3, [pc, #252]	; (8003624 <HAL_RCC_OscConfig+0x2b0>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe f994 	bl	8001858 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003534:	f7fe f990 	bl	8001858 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e17b      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	4b36      	ldr	r3, [pc, #216]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d030      	beq.n	80035c0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b30      	ldr	r3, [pc, #192]	; (8003628 <HAL_RCC_OscConfig+0x2b4>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fe f974 	bl	8001858 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003574:	f7fe f970 	bl	8001858 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e15b      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	4b26      	ldr	r3, [pc, #152]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x200>
 8003592:	e015      	b.n	80035c0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003594:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_RCC_OscConfig+0x2b4>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359a:	f7fe f95d 	bl	8001858 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fe f959 	bl	8001858 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e144      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b4:	4b1a      	ldr	r3, [pc, #104]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80035b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f0      	bne.n	80035a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0304 	and.w	r3, r3, #4
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80a0 	beq.w	800370e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d2:	4b13      	ldr	r3, [pc, #76]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10f      	bne.n	80035fe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	4a0e      	ldr	r2, [pc, #56]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ec:	6413      	str	r3, [r2, #64]	; 0x40
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fa:	2301      	movs	r3, #1
 80035fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	4b0b      	ldr	r3, [pc, #44]	; (800362c <HAL_RCC_OscConfig+0x2b8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d121      	bne.n	800364e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <HAL_RCC_OscConfig+0x2b8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a07      	ldr	r2, [pc, #28]	; (800362c <HAL_RCC_OscConfig+0x2b8>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003616:	f7fe f91f 	bl	8001858 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	e011      	b.n	8003642 <HAL_RCC_OscConfig+0x2ce>
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800
 8003624:	42470000 	.word	0x42470000
 8003628:	42470e80 	.word	0x42470e80
 800362c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003630:	f7fe f912 	bl	8001858 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e0fd      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003642:	4b81      	ldr	r3, [pc, #516]	; (8003848 <HAL_RCC_OscConfig+0x4d4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d106      	bne.n	8003664 <HAL_RCC_OscConfig+0x2f0>
 8003656:	4b7d      	ldr	r3, [pc, #500]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365a:	4a7c      	ldr	r2, [pc, #496]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6713      	str	r3, [r2, #112]	; 0x70
 8003662:	e01c      	b.n	800369e <HAL_RCC_OscConfig+0x32a>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b05      	cmp	r3, #5
 800366a:	d10c      	bne.n	8003686 <HAL_RCC_OscConfig+0x312>
 800366c:	4b77      	ldr	r3, [pc, #476]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003670:	4a76      	ldr	r2, [pc, #472]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	6713      	str	r3, [r2, #112]	; 0x70
 8003678:	4b74      	ldr	r3, [pc, #464]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800367a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367c:	4a73      	ldr	r2, [pc, #460]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6713      	str	r3, [r2, #112]	; 0x70
 8003684:	e00b      	b.n	800369e <HAL_RCC_OscConfig+0x32a>
 8003686:	4b71      	ldr	r3, [pc, #452]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 8003688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368a:	4a70      	ldr	r2, [pc, #448]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6713      	str	r3, [r2, #112]	; 0x70
 8003692:	4b6e      	ldr	r3, [pc, #440]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 8003694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003696:	4a6d      	ldr	r2, [pc, #436]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d015      	beq.n	80036d2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fe f8d7 	bl	8001858 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7fe f8d3 	bl	8001858 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0bc      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c4:	4b61      	ldr	r3, [pc, #388]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ee      	beq.n	80036ae <HAL_RCC_OscConfig+0x33a>
 80036d0:	e014      	b.n	80036fc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d2:	f7fe f8c1 	bl	8001858 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7fe f8bd 	bl	8001858 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e0a6      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f0:	4b56      	ldr	r3, [pc, #344]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ee      	bne.n	80036da <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003702:	4b52      	ldr	r3, [pc, #328]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	4a51      	ldr	r2, [pc, #324]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 8003708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8092 	beq.w	800383c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003718:	4b4c      	ldr	r3, [pc, #304]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b08      	cmp	r3, #8
 8003722:	d05c      	beq.n	80037de <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d141      	bne.n	80037b0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372c:	4b48      	ldr	r3, [pc, #288]	; (8003850 <HAL_RCC_OscConfig+0x4dc>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fe f891 	bl	8001858 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe f88d 	bl	8001858 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e078      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374c:	4b3f      	ldr	r3, [pc, #252]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	69da      	ldr	r2, [r3, #28]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	019b      	lsls	r3, r3, #6
 8003768:	431a      	orrs	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	3b01      	subs	r3, #1
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377a:	061b      	lsls	r3, r3, #24
 800377c:	4933      	ldr	r1, [pc, #204]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 800377e:	4313      	orrs	r3, r2
 8003780:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003782:	4b33      	ldr	r3, [pc, #204]	; (8003850 <HAL_RCC_OscConfig+0x4dc>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fe f866 	bl	8001858 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003790:	f7fe f862 	bl	8001858 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e04d      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a2:	4b2a      	ldr	r3, [pc, #168]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0f0      	beq.n	8003790 <HAL_RCC_OscConfig+0x41c>
 80037ae:	e045      	b.n	800383c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b0:	4b27      	ldr	r3, [pc, #156]	; (8003850 <HAL_RCC_OscConfig+0x4dc>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fe f84f 	bl	8001858 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037be:	f7fe f84b 	bl	8001858 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e036      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d0:	4b1e      	ldr	r3, [pc, #120]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f0      	bne.n	80037be <HAL_RCC_OscConfig+0x44a>
 80037dc:	e02e      	b.n	800383c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d101      	bne.n	80037ea <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e029      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037ea:	4b18      	ldr	r3, [pc, #96]	; (800384c <HAL_RCC_OscConfig+0x4d8>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d11c      	bne.n	8003838 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d115      	bne.n	8003838 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003812:	4013      	ands	r3, r2
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003818:	4293      	cmp	r3, r2
 800381a:	d10d      	bne.n	8003838 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003826:	429a      	cmp	r2, r3
 8003828:	d106      	bne.n	8003838 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003834:	429a      	cmp	r2, r3
 8003836:	d001      	beq.n	800383c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	40007000 	.word	0x40007000
 800384c:	40023800 	.word	0x40023800
 8003850:	42470060 	.word	0x42470060

08003854 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0cc      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b68      	ldr	r3, [pc, #416]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d90c      	bls.n	8003890 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b65      	ldr	r3, [pc, #404]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b63      	ldr	r3, [pc, #396]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b8      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a8:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4a58      	ldr	r2, [pc, #352]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c0:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a52      	ldr	r2, [pc, #328]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b50      	ldr	r3, [pc, #320]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	494d      	ldr	r1, [pc, #308]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d044      	beq.n	8003974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d119      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d003      	beq.n	8003912 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800390e:	2b03      	cmp	r3, #3
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b3f      	ldr	r3, [pc, #252]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e06f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003922:	4b3b      	ldr	r3, [pc, #236]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e067      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003932:	4b37      	ldr	r3, [pc, #220]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f023 0203 	bic.w	r2, r3, #3
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4934      	ldr	r1, [pc, #208]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	4313      	orrs	r3, r2
 8003942:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003944:	f7fd ff88 	bl	8001858 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	e00a      	b.n	8003962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7fd ff84 	bl	8001858 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e04f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	4b2b      	ldr	r3, [pc, #172]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 020c 	and.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d1eb      	bne.n	800394c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b25      	ldr	r3, [pc, #148]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d20c      	bcs.n	800399c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <HAL_RCC_ClockConfig+0x1b8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e032      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4916      	ldr	r1, [pc, #88]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	490e      	ldr	r1, [pc, #56]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039da:	f000 f821 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039de:	4601      	mov	r1, r0
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 80039ec:	5cd3      	ldrb	r3, [r2, r3]
 80039ee:	fa21 f303 	lsr.w	r3, r1, r3
 80039f2:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fd fe30 	bl	8001660 <HAL_InitTick>

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023c00 	.word	0x40023c00
 8003a10:	40023800 	.word	0x40023800
 8003a14:	08008904 	.word	0x08008904
 8003a18:	20000000 	.word	0x20000000
 8003a1c:	20000004 	.word	0x20000004

08003a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
 8003a2e:	2300      	movs	r3, #0
 8003a30:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a36:	4b63      	ldr	r3, [pc, #396]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d007      	beq.n	8003a52 <HAL_RCC_GetSysClockFreq+0x32>
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d008      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x38>
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f040 80b4 	bne.w	8003bb4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a4c:	4b5e      	ldr	r3, [pc, #376]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a4e:	60bb      	str	r3, [r7, #8]
       break;
 8003a50:	e0b3      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a52:	4b5e      	ldr	r3, [pc, #376]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003a54:	60bb      	str	r3, [r7, #8]
      break;
 8003a56:	e0b0      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a58:	4b5a      	ldr	r3, [pc, #360]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a60:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a62:	4b58      	ldr	r3, [pc, #352]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d04a      	beq.n	8003b04 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a6e:	4b55      	ldr	r3, [pc, #340]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	099b      	lsrs	r3, r3, #6
 8003a74:	f04f 0400 	mov.w	r4, #0
 8003a78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	ea03 0501 	and.w	r5, r3, r1
 8003a84:	ea04 0602 	and.w	r6, r4, r2
 8003a88:	4629      	mov	r1, r5
 8003a8a:	4632      	mov	r2, r6
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	f04f 0400 	mov.w	r4, #0
 8003a94:	0154      	lsls	r4, r2, #5
 8003a96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a9a:	014b      	lsls	r3, r1, #5
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4622      	mov	r2, r4
 8003aa0:	1b49      	subs	r1, r1, r5
 8003aa2:	eb62 0206 	sbc.w	r2, r2, r6
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	f04f 0400 	mov.w	r4, #0
 8003aae:	0194      	lsls	r4, r2, #6
 8003ab0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ab4:	018b      	lsls	r3, r1, #6
 8003ab6:	1a5b      	subs	r3, r3, r1
 8003ab8:	eb64 0402 	sbc.w	r4, r4, r2
 8003abc:	f04f 0100 	mov.w	r1, #0
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	00e2      	lsls	r2, r4, #3
 8003ac6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003aca:	00d9      	lsls	r1, r3, #3
 8003acc:	460b      	mov	r3, r1
 8003ace:	4614      	mov	r4, r2
 8003ad0:	195b      	adds	r3, r3, r5
 8003ad2:	eb44 0406 	adc.w	r4, r4, r6
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	0262      	lsls	r2, r4, #9
 8003ae0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003ae4:	0259      	lsls	r1, r3, #9
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	4614      	mov	r4, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	4621      	mov	r1, r4
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f04f 0400 	mov.w	r4, #0
 8003af4:	461a      	mov	r2, r3
 8003af6:	4623      	mov	r3, r4
 8003af8:	f7fc fb6a 	bl	80001d0 <__aeabi_uldivmod>
 8003afc:	4603      	mov	r3, r0
 8003afe:	460c      	mov	r4, r1
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	e049      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b04:	4b2f      	ldr	r3, [pc, #188]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	099b      	lsrs	r3, r3, #6
 8003b0a:	f04f 0400 	mov.w	r4, #0
 8003b0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	ea03 0501 	and.w	r5, r3, r1
 8003b1a:	ea04 0602 	and.w	r6, r4, r2
 8003b1e:	4629      	mov	r1, r5
 8003b20:	4632      	mov	r2, r6
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	f04f 0400 	mov.w	r4, #0
 8003b2a:	0154      	lsls	r4, r2, #5
 8003b2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b30:	014b      	lsls	r3, r1, #5
 8003b32:	4619      	mov	r1, r3
 8003b34:	4622      	mov	r2, r4
 8003b36:	1b49      	subs	r1, r1, r5
 8003b38:	eb62 0206 	sbc.w	r2, r2, r6
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	f04f 0400 	mov.w	r4, #0
 8003b44:	0194      	lsls	r4, r2, #6
 8003b46:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b4a:	018b      	lsls	r3, r1, #6
 8003b4c:	1a5b      	subs	r3, r3, r1
 8003b4e:	eb64 0402 	sbc.w	r4, r4, r2
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	00e2      	lsls	r2, r4, #3
 8003b5c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b60:	00d9      	lsls	r1, r3, #3
 8003b62:	460b      	mov	r3, r1
 8003b64:	4614      	mov	r4, r2
 8003b66:	195b      	adds	r3, r3, r5
 8003b68:	eb44 0406 	adc.w	r4, r4, r6
 8003b6c:	f04f 0100 	mov.w	r1, #0
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	02a2      	lsls	r2, r4, #10
 8003b76:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b7a:	0299      	lsls	r1, r3, #10
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4614      	mov	r4, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	4621      	mov	r1, r4
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f04f 0400 	mov.w	r4, #0
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4623      	mov	r3, r4
 8003b8e:	f7fc fb1f 	bl	80001d0 <__aeabi_uldivmod>
 8003b92:	4603      	mov	r3, r0
 8003b94:	460c      	mov	r4, r1
 8003b96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b98:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb0:	60bb      	str	r3, [r7, #8]
      break;
 8003bb2:	e002      	b.n	8003bba <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003bb6:	60bb      	str	r3, [r7, #8]
      break;
 8003bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bba:	68bb      	ldr	r3, [r7, #8]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc4:	40023800 	.word	0x40023800
 8003bc8:	00f42400 	.word	0x00f42400
 8003bcc:	007a1200 	.word	0x007a1200

08003bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20000000 	.word	0x20000000

08003be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003bec:	f7ff fff0 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003bf0:	4601      	mov	r1, r0
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	0a9b      	lsrs	r3, r3, #10
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	4a03      	ldr	r2, [pc, #12]	; (8003c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bfe:	5cd3      	ldrb	r3, [r2, r3]
 8003c00:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	08008914 	.word	0x08008914

08003c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c14:	f7ff ffdc 	bl	8003bd0 <HAL_RCC_GetHCLKFreq>
 8003c18:	4601      	mov	r1, r0
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	0b5b      	lsrs	r3, r3, #13
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	4a03      	ldr	r2, [pc, #12]	; (8003c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c26:	5cd3      	ldrb	r3, [r2, r3]
 8003c28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40023800 	.word	0x40023800
 8003c34:	08008914 	.word	0x08008914

08003c38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	220f      	movs	r2, #15
 8003c46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c48:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <HAL_RCC_GetClockConfig+0x5c>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 0203 	and.w	r2, r3, #3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c54:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <HAL_RCC_GetClockConfig+0x5c>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <HAL_RCC_GetClockConfig+0x5c>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <HAL_RCC_GetClockConfig+0x5c>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	08db      	lsrs	r3, r3, #3
 8003c72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c7a:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <HAL_RCC_GetClockConfig+0x60>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 020f 	and.w	r2, r3, #15
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	601a      	str	r2, [r3, #0]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40023c00 	.word	0x40023c00

08003c9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e056      	b.n	8003d5c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d106      	bne.n	8003cce <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f7fd fa27 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ce4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	431a      	orrs	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	431a      	orrs	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	ea42 0103 	orr.w	r1, r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	0c1b      	lsrs	r3, r3, #16
 8003d2c:	f003 0104 	and.w	r1, r3, #4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d4a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e01d      	b.n	8003db2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d106      	bne.n	8003d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd fa7c 	bl	8001288 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	3304      	adds	r3, #4
 8003da0:	4619      	mov	r1, r3
 8003da2:	4610      	mov	r0, r2
 8003da4:	f000 fb06 	bl	80043b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b06      	cmp	r3, #6
 8003de2:	d007      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3714      	adds	r7, #20
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e01d      	b.n	8003e50 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d106      	bne.n	8003e2e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f7fd fa4d 	bl	80012c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2202      	movs	r2, #2
 8003e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3304      	adds	r3, #4
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f000 fab7 	bl	80043b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d122      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f003 0302 	and.w	r3, r3, #2
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d11b      	bne.n	8003eb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f06f 0202 	mvn.w	r2, #2
 8003e84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fa6b 	bl	8004376 <HAL_TIM_IC_CaptureCallback>
 8003ea0:	e005      	b.n	8003eae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 fa5d 	bl	8004362 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 fa6e 	bl	800438a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d122      	bne.n	8003f08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d11b      	bne.n	8003f08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f06f 0204 	mvn.w	r2, #4
 8003ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 fa41 	bl	8004376 <HAL_TIM_IC_CaptureCallback>
 8003ef4:	e005      	b.n	8003f02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 fa33 	bl	8004362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fa44 	bl	800438a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d122      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d11b      	bne.n	8003f5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0208 	mvn.w	r2, #8
 8003f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2204      	movs	r2, #4
 8003f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fa17 	bl	8004376 <HAL_TIM_IC_CaptureCallback>
 8003f48:	e005      	b.n	8003f56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 fa09 	bl	8004362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fa1a 	bl	800438a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d122      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d11b      	bne.n	8003fb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f06f 0210 	mvn.w	r2, #16
 8003f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2208      	movs	r2, #8
 8003f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f9ed 	bl	8004376 <HAL_TIM_IC_CaptureCallback>
 8003f9c:	e005      	b.n	8003faa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f9df 	bl	8004362 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 f9f0 	bl	800438a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d10e      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d107      	bne.n	8003fdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f06f 0201 	mvn.w	r2, #1
 8003fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7fc ffbe 	bl	8000f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	2b80      	cmp	r3, #128	; 0x80
 8003fe8:	d10e      	bne.n	8004008 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff4:	2b80      	cmp	r3, #128	; 0x80
 8003ff6:	d107      	bne.n	8004008 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fd46 	bl	8004a94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b40      	cmp	r3, #64	; 0x40
 8004014:	d10e      	bne.n	8004034 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	d107      	bne.n	8004034 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800402c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f9b5 	bl	800439e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b20      	cmp	r3, #32
 8004040:	d10e      	bne.n	8004060 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b20      	cmp	r3, #32
 800404e:	d107      	bne.n	8004060 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0220 	mvn.w	r2, #32
 8004058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fd10 	bl	8004a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800407a:	2b01      	cmp	r3, #1
 800407c:	d101      	bne.n	8004082 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800407e:	2302      	movs	r3, #2
 8004080:	e0b4      	b.n	80041ec <HAL_TIM_PWM_ConfigChannel+0x184>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2202      	movs	r2, #2
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b0c      	cmp	r3, #12
 8004096:	f200 809f 	bhi.w	80041d8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800409a:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a0:	080040d5 	.word	0x080040d5
 80040a4:	080041d9 	.word	0x080041d9
 80040a8:	080041d9 	.word	0x080041d9
 80040ac:	080041d9 	.word	0x080041d9
 80040b0:	08004115 	.word	0x08004115
 80040b4:	080041d9 	.word	0x080041d9
 80040b8:	080041d9 	.word	0x080041d9
 80040bc:	080041d9 	.word	0x080041d9
 80040c0:	08004157 	.word	0x08004157
 80040c4:	080041d9 	.word	0x080041d9
 80040c8:	080041d9 	.word	0x080041d9
 80040cc:	080041d9 	.word	0x080041d9
 80040d0:	08004197 	.word	0x08004197
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68b9      	ldr	r1, [r7, #8]
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fa0a 	bl	80044f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699a      	ldr	r2, [r3, #24]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f042 0208 	orr.w	r2, r2, #8
 80040ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	699a      	ldr	r2, [r3, #24]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0204 	bic.w	r2, r2, #4
 80040fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6999      	ldr	r1, [r3, #24]
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	691a      	ldr	r2, [r3, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	619a      	str	r2, [r3, #24]
      break;
 8004112:	e062      	b.n	80041da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fa5a 	bl	80045d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800412e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6999      	ldr	r1, [r3, #24]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	021a      	lsls	r2, r3, #8
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	619a      	str	r2, [r3, #24]
      break;
 8004154:	e041      	b.n	80041da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	4618      	mov	r0, r3
 800415e:	f000 faaf 	bl	80046c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69da      	ldr	r2, [r3, #28]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f042 0208 	orr.w	r2, r2, #8
 8004170:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0204 	bic.w	r2, r2, #4
 8004180:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69d9      	ldr	r1, [r3, #28]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	691a      	ldr	r2, [r3, #16]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	61da      	str	r2, [r3, #28]
      break;
 8004194:	e021      	b.n	80041da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fb03 	bl	80047a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69d9      	ldr	r1, [r3, #28]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	691b      	ldr	r3, [r3, #16]
 80041cc:	021a      	lsls	r2, r3, #8
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	61da      	str	r2, [r3, #28]
      break;
 80041d6:	e000      	b.n	80041da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80041d8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_TIM_ConfigClockSource+0x18>
 8004208:	2302      	movs	r3, #2
 800420a:	e0a6      	b.n	800435a <HAL_TIM_ConfigClockSource+0x166>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800422a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004232:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b40      	cmp	r3, #64	; 0x40
 8004242:	d067      	beq.n	8004314 <HAL_TIM_ConfigClockSource+0x120>
 8004244:	2b40      	cmp	r3, #64	; 0x40
 8004246:	d80b      	bhi.n	8004260 <HAL_TIM_ConfigClockSource+0x6c>
 8004248:	2b10      	cmp	r3, #16
 800424a:	d073      	beq.n	8004334 <HAL_TIM_ConfigClockSource+0x140>
 800424c:	2b10      	cmp	r3, #16
 800424e:	d802      	bhi.n	8004256 <HAL_TIM_ConfigClockSource+0x62>
 8004250:	2b00      	cmp	r3, #0
 8004252:	d06f      	beq.n	8004334 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004254:	e078      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004256:	2b20      	cmp	r3, #32
 8004258:	d06c      	beq.n	8004334 <HAL_TIM_ConfigClockSource+0x140>
 800425a:	2b30      	cmp	r3, #48	; 0x30
 800425c:	d06a      	beq.n	8004334 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800425e:	e073      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004260:	2b70      	cmp	r3, #112	; 0x70
 8004262:	d00d      	beq.n	8004280 <HAL_TIM_ConfigClockSource+0x8c>
 8004264:	2b70      	cmp	r3, #112	; 0x70
 8004266:	d804      	bhi.n	8004272 <HAL_TIM_ConfigClockSource+0x7e>
 8004268:	2b50      	cmp	r3, #80	; 0x50
 800426a:	d033      	beq.n	80042d4 <HAL_TIM_ConfigClockSource+0xe0>
 800426c:	2b60      	cmp	r3, #96	; 0x60
 800426e:	d041      	beq.n	80042f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004270:	e06a      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d066      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0x152>
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427c:	d017      	beq.n	80042ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800427e:	e063      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	6899      	ldr	r1, [r3, #8]
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f000 fb5a 	bl	8004948 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	609a      	str	r2, [r3, #8]
      break;
 80042ac:	e04c      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6818      	ldr	r0, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	6899      	ldr	r1, [r3, #8]
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f000 fb43 	bl	8004948 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042d0:	609a      	str	r2, [r3, #8]
      break;
 80042d2:	e039      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	461a      	mov	r2, r3
 80042e2:	f000 fab7 	bl	8004854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2150      	movs	r1, #80	; 0x50
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 fb10 	bl	8004912 <TIM_ITRx_SetConfig>
      break;
 80042f2:	e029      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	461a      	mov	r2, r3
 8004302:	f000 fad6 	bl	80048b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2160      	movs	r1, #96	; 0x60
 800430c:	4618      	mov	r0, r3
 800430e:	f000 fb00 	bl	8004912 <TIM_ITRx_SetConfig>
      break;
 8004312:	e019      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	6859      	ldr	r1, [r3, #4]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	461a      	mov	r2, r3
 8004322:	f000 fa97 	bl	8004854 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2140      	movs	r1, #64	; 0x40
 800432c:	4618      	mov	r0, r3
 800432e:	f000 faf0 	bl	8004912 <TIM_ITRx_SetConfig>
      break;
 8004332:	e009      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4619      	mov	r1, r3
 800433e:	4610      	mov	r0, r2
 8004340:	f000 fae7 	bl	8004912 <TIM_ITRx_SetConfig>
      break;
 8004344:	e000      	b.n	8004348 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004346:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004376:	b480      	push	{r7}
 8004378:	b083      	sub	sp, #12
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800437e:	bf00      	nop
 8004380:	370c      	adds	r7, #12
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800438a:	b480      	push	{r7}
 800438c:	b083      	sub	sp, #12
 800438e:	af00      	add	r7, sp, #0
 8004390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
	...

080043b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a40      	ldr	r2, [pc, #256]	; (80044c8 <TIM_Base_SetConfig+0x114>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d013      	beq.n	80043f4 <TIM_Base_SetConfig+0x40>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d2:	d00f      	beq.n	80043f4 <TIM_Base_SetConfig+0x40>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a3d      	ldr	r2, [pc, #244]	; (80044cc <TIM_Base_SetConfig+0x118>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00b      	beq.n	80043f4 <TIM_Base_SetConfig+0x40>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a3c      	ldr	r2, [pc, #240]	; (80044d0 <TIM_Base_SetConfig+0x11c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d007      	beq.n	80043f4 <TIM_Base_SetConfig+0x40>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a3b      	ldr	r2, [pc, #236]	; (80044d4 <TIM_Base_SetConfig+0x120>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_Base_SetConfig+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a3a      	ldr	r2, [pc, #232]	; (80044d8 <TIM_Base_SetConfig+0x124>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d108      	bne.n	8004406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4313      	orrs	r3, r2
 8004404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a2f      	ldr	r2, [pc, #188]	; (80044c8 <TIM_Base_SetConfig+0x114>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d02b      	beq.n	8004466 <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004414:	d027      	beq.n	8004466 <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a2c      	ldr	r2, [pc, #176]	; (80044cc <TIM_Base_SetConfig+0x118>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d023      	beq.n	8004466 <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a2b      	ldr	r2, [pc, #172]	; (80044d0 <TIM_Base_SetConfig+0x11c>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d01f      	beq.n	8004466 <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <TIM_Base_SetConfig+0x120>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d01b      	beq.n	8004466 <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a29      	ldr	r2, [pc, #164]	; (80044d8 <TIM_Base_SetConfig+0x124>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d017      	beq.n	8004466 <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a28      	ldr	r2, [pc, #160]	; (80044dc <TIM_Base_SetConfig+0x128>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <TIM_Base_SetConfig+0xb2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a27      	ldr	r2, [pc, #156]	; (80044e0 <TIM_Base_SetConfig+0x12c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d00f      	beq.n	8004466 <TIM_Base_SetConfig+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a26      	ldr	r2, [pc, #152]	; (80044e4 <TIM_Base_SetConfig+0x130>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00b      	beq.n	8004466 <TIM_Base_SetConfig+0xb2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a25      	ldr	r2, [pc, #148]	; (80044e8 <TIM_Base_SetConfig+0x134>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d007      	beq.n	8004466 <TIM_Base_SetConfig+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a24      	ldr	r2, [pc, #144]	; (80044ec <TIM_Base_SetConfig+0x138>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d003      	beq.n	8004466 <TIM_Base_SetConfig+0xb2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a23      	ldr	r2, [pc, #140]	; (80044f0 <TIM_Base_SetConfig+0x13c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d108      	bne.n	8004478 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800446c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a0a      	ldr	r2, [pc, #40]	; (80044c8 <TIM_Base_SetConfig+0x114>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d003      	beq.n	80044ac <TIM_Base_SetConfig+0xf8>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a0c      	ldr	r2, [pc, #48]	; (80044d8 <TIM_Base_SetConfig+0x124>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d103      	bne.n	80044b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	691a      	ldr	r2, [r3, #16]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	615a      	str	r2, [r3, #20]
}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800
 80044d4:	40000c00 	.word	0x40000c00
 80044d8:	40010400 	.word	0x40010400
 80044dc:	40014000 	.word	0x40014000
 80044e0:	40014400 	.word	0x40014400
 80044e4:	40014800 	.word	0x40014800
 80044e8:	40001800 	.word	0x40001800
 80044ec:	40001c00 	.word	0x40001c00
 80044f0:	40002000 	.word	0x40002000

080044f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	f023 0201 	bic.w	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f023 0303 	bic.w	r3, r3, #3
 800452a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f023 0302 	bic.w	r3, r3, #2
 800453c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a20      	ldr	r2, [pc, #128]	; (80045cc <TIM_OC1_SetConfig+0xd8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d003      	beq.n	8004558 <TIM_OC1_SetConfig+0x64>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a1f      	ldr	r2, [pc, #124]	; (80045d0 <TIM_OC1_SetConfig+0xdc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d10c      	bne.n	8004572 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f023 0308 	bic.w	r3, r3, #8
 800455e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4313      	orrs	r3, r2
 8004568:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f023 0304 	bic.w	r3, r3, #4
 8004570:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <TIM_OC1_SetConfig+0xd8>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d003      	beq.n	8004582 <TIM_OC1_SetConfig+0x8e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a14      	ldr	r2, [pc, #80]	; (80045d0 <TIM_OC1_SetConfig+0xdc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d111      	bne.n	80045a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	4313      	orrs	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	621a      	str	r2, [r3, #32]
}
 80045c0:	bf00      	nop
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40010400 	.word	0x40010400

080045d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f023 0210 	bic.w	r2, r3, #16
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f023 0320 	bic.w	r3, r3, #32
 800461e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a22      	ldr	r2, [pc, #136]	; (80046b8 <TIM_OC2_SetConfig+0xe4>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d003      	beq.n	800463c <TIM_OC2_SetConfig+0x68>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a21      	ldr	r2, [pc, #132]	; (80046bc <TIM_OC2_SetConfig+0xe8>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d10d      	bne.n	8004658 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004656:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a17      	ldr	r2, [pc, #92]	; (80046b8 <TIM_OC2_SetConfig+0xe4>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d003      	beq.n	8004668 <TIM_OC2_SetConfig+0x94>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a16      	ldr	r2, [pc, #88]	; (80046bc <TIM_OC2_SetConfig+0xe8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d113      	bne.n	8004690 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800466e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004676:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40010400 	.word	0x40010400

080046c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 0303 	bic.w	r3, r3, #3
 80046f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4313      	orrs	r3, r2
 8004700:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004708:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	697a      	ldr	r2, [r7, #20]
 8004712:	4313      	orrs	r3, r2
 8004714:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a21      	ldr	r2, [pc, #132]	; (80047a0 <TIM_OC3_SetConfig+0xe0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d003      	beq.n	8004726 <TIM_OC3_SetConfig+0x66>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a20      	ldr	r2, [pc, #128]	; (80047a4 <TIM_OC3_SetConfig+0xe4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d10d      	bne.n	8004742 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800472c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a16      	ldr	r2, [pc, #88]	; (80047a0 <TIM_OC3_SetConfig+0xe0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d003      	beq.n	8004752 <TIM_OC3_SetConfig+0x92>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a15      	ldr	r2, [pc, #84]	; (80047a4 <TIM_OC3_SetConfig+0xe4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d113      	bne.n	800477a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	621a      	str	r2, [r3, #32]
}
 8004794:	bf00      	nop
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40010000 	.word	0x40010000
 80047a4:	40010400 	.word	0x40010400

080047a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
 80047b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	021b      	lsls	r3, r3, #8
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	031b      	lsls	r3, r3, #12
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a12      	ldr	r2, [pc, #72]	; (800484c <TIM_OC4_SetConfig+0xa4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d003      	beq.n	8004810 <TIM_OC4_SetConfig+0x68>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a11      	ldr	r2, [pc, #68]	; (8004850 <TIM_OC4_SetConfig+0xa8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d109      	bne.n	8004824 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004816:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	019b      	lsls	r3, r3, #6
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	4313      	orrs	r3, r2
 8004822:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	621a      	str	r2, [r3, #32]
}
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40010000 	.word	0x40010000
 8004850:	40010400 	.word	0x40010400

08004854 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004854:	b480      	push	{r7}
 8004856:	b087      	sub	sp, #28
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	f023 0201 	bic.w	r2, r3, #1
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800487e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f023 030a 	bic.w	r3, r3, #10
 8004890:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	621a      	str	r2, [r3, #32]
}
 80048a6:	bf00      	nop
 80048a8:	371c      	adds	r7, #28
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048b2:	b480      	push	{r7}
 80048b4:	b087      	sub	sp, #28
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	60f8      	str	r0, [r7, #12]
 80048ba:	60b9      	str	r1, [r7, #8]
 80048bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f023 0210 	bic.w	r2, r3, #16
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	031b      	lsls	r3, r3, #12
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	621a      	str	r2, [r3, #32]
}
 8004906:	bf00      	nop
 8004908:	371c      	adds	r7, #28
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004912:	b480      	push	{r7}
 8004914:	b085      	sub	sp, #20
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004928:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4313      	orrs	r3, r2
 8004930:	f043 0307 	orr.w	r3, r3, #7
 8004934:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	609a      	str	r2, [r3, #8]
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
 8004954:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004962:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	021a      	lsls	r2, r3, #8
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	431a      	orrs	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	4313      	orrs	r3, r2
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	609a      	str	r2, [r3, #8]
}
 800497c:	bf00      	nop
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800499c:	2302      	movs	r3, #2
 800499e:	e05a      	b.n	8004a56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2202      	movs	r2, #2
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a21      	ldr	r2, [pc, #132]	; (8004a64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d022      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ec:	d01d      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d018      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1b      	ldr	r2, [pc, #108]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a1a      	ldr	r2, [pc, #104]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00e      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a18      	ldr	r2, [pc, #96]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d009      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a17      	ldr	r2, [pc, #92]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d004      	beq.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a15      	ldr	r2, [pc, #84]	; (8004a7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d10c      	bne.n	8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40010000 	.word	0x40010000
 8004a68:	40000400 	.word	0x40000400
 8004a6c:	40000800 	.word	0x40000800
 8004a70:	40000c00 	.word	0x40000c00
 8004a74:	40010400 	.word	0x40010400
 8004a78:	40014000 	.word	0x40014000
 8004a7c:	40001800 	.word	0x40001800

08004a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e03f      	b.n	8004b3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d106      	bne.n	8004ad4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fc fc7c 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2224      	movs	r2, #36	; 0x24
 8004ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004aea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f829 	bl	8004b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	691a      	ldr	r2, [r3, #16]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695a      	ldr	r2, [r3, #20]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68da      	ldr	r2, [r3, #12]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2220      	movs	r2, #32
 8004b34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b48:	b085      	sub	sp, #20
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	430a      	orrs	r2, r1
 8004b62:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	69db      	ldr	r3, [r3, #28]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b86:	f023 030c 	bic.w	r3, r3, #12
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	68f9      	ldr	r1, [r7, #12]
 8004b90:	430b      	orrs	r3, r1
 8004b92:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699a      	ldr	r2, [r3, #24]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bb2:	f040 818b 	bne.w	8004ecc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4ac1      	ldr	r2, [pc, #772]	; (8004ec0 <UART_SetConfig+0x37c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d005      	beq.n	8004bcc <UART_SetConfig+0x88>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4abf      	ldr	r2, [pc, #764]	; (8004ec4 <UART_SetConfig+0x380>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	f040 80bd 	bne.w	8004d46 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bcc:	f7ff f820 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 8004bd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	461d      	mov	r5, r3
 8004bd6:	f04f 0600 	mov.w	r6, #0
 8004bda:	46a8      	mov	r8, r5
 8004bdc:	46b1      	mov	r9, r6
 8004bde:	eb18 0308 	adds.w	r3, r8, r8
 8004be2:	eb49 0409 	adc.w	r4, r9, r9
 8004be6:	4698      	mov	r8, r3
 8004be8:	46a1      	mov	r9, r4
 8004bea:	eb18 0805 	adds.w	r8, r8, r5
 8004bee:	eb49 0906 	adc.w	r9, r9, r6
 8004bf2:	f04f 0100 	mov.w	r1, #0
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bfe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c06:	4688      	mov	r8, r1
 8004c08:	4691      	mov	r9, r2
 8004c0a:	eb18 0005 	adds.w	r0, r8, r5
 8004c0e:	eb49 0106 	adc.w	r1, r9, r6
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	461d      	mov	r5, r3
 8004c18:	f04f 0600 	mov.w	r6, #0
 8004c1c:	196b      	adds	r3, r5, r5
 8004c1e:	eb46 0406 	adc.w	r4, r6, r6
 8004c22:	461a      	mov	r2, r3
 8004c24:	4623      	mov	r3, r4
 8004c26:	f7fb fad3 	bl	80001d0 <__aeabi_uldivmod>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	461a      	mov	r2, r3
 8004c30:	4ba5      	ldr	r3, [pc, #660]	; (8004ec8 <UART_SetConfig+0x384>)
 8004c32:	fba3 2302 	umull	r2, r3, r3, r2
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	461d      	mov	r5, r3
 8004c40:	f04f 0600 	mov.w	r6, #0
 8004c44:	46a9      	mov	r9, r5
 8004c46:	46b2      	mov	sl, r6
 8004c48:	eb19 0309 	adds.w	r3, r9, r9
 8004c4c:	eb4a 040a 	adc.w	r4, sl, sl
 8004c50:	4699      	mov	r9, r3
 8004c52:	46a2      	mov	sl, r4
 8004c54:	eb19 0905 	adds.w	r9, r9, r5
 8004c58:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c5c:	f04f 0100 	mov.w	r1, #0
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c70:	4689      	mov	r9, r1
 8004c72:	4692      	mov	sl, r2
 8004c74:	eb19 0005 	adds.w	r0, r9, r5
 8004c78:	eb4a 0106 	adc.w	r1, sl, r6
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	461d      	mov	r5, r3
 8004c82:	f04f 0600 	mov.w	r6, #0
 8004c86:	196b      	adds	r3, r5, r5
 8004c88:	eb46 0406 	adc.w	r4, r6, r6
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4623      	mov	r3, r4
 8004c90:	f7fb fa9e 	bl	80001d0 <__aeabi_uldivmod>
 8004c94:	4603      	mov	r3, r0
 8004c96:	460c      	mov	r4, r1
 8004c98:	461a      	mov	r2, r3
 8004c9a:	4b8b      	ldr	r3, [pc, #556]	; (8004ec8 <UART_SetConfig+0x384>)
 8004c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	2164      	movs	r1, #100	; 0x64
 8004ca4:	fb01 f303 	mul.w	r3, r1, r3
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	3332      	adds	r3, #50	; 0x32
 8004cae:	4a86      	ldr	r2, [pc, #536]	; (8004ec8 <UART_SetConfig+0x384>)
 8004cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	005b      	lsls	r3, r3, #1
 8004cb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cbc:	4498      	add	r8, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	461d      	mov	r5, r3
 8004cc2:	f04f 0600 	mov.w	r6, #0
 8004cc6:	46a9      	mov	r9, r5
 8004cc8:	46b2      	mov	sl, r6
 8004cca:	eb19 0309 	adds.w	r3, r9, r9
 8004cce:	eb4a 040a 	adc.w	r4, sl, sl
 8004cd2:	4699      	mov	r9, r3
 8004cd4:	46a2      	mov	sl, r4
 8004cd6:	eb19 0905 	adds.w	r9, r9, r5
 8004cda:	eb4a 0a06 	adc.w	sl, sl, r6
 8004cde:	f04f 0100 	mov.w	r1, #0
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cf2:	4689      	mov	r9, r1
 8004cf4:	4692      	mov	sl, r2
 8004cf6:	eb19 0005 	adds.w	r0, r9, r5
 8004cfa:	eb4a 0106 	adc.w	r1, sl, r6
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	461d      	mov	r5, r3
 8004d04:	f04f 0600 	mov.w	r6, #0
 8004d08:	196b      	adds	r3, r5, r5
 8004d0a:	eb46 0406 	adc.w	r4, r6, r6
 8004d0e:	461a      	mov	r2, r3
 8004d10:	4623      	mov	r3, r4
 8004d12:	f7fb fa5d 	bl	80001d0 <__aeabi_uldivmod>
 8004d16:	4603      	mov	r3, r0
 8004d18:	460c      	mov	r4, r1
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	4b6a      	ldr	r3, [pc, #424]	; (8004ec8 <UART_SetConfig+0x384>)
 8004d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	2164      	movs	r1, #100	; 0x64
 8004d26:	fb01 f303 	mul.w	r3, r1, r3
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	00db      	lsls	r3, r3, #3
 8004d2e:	3332      	adds	r3, #50	; 0x32
 8004d30:	4a65      	ldr	r2, [pc, #404]	; (8004ec8 <UART_SetConfig+0x384>)
 8004d32:	fba2 2303 	umull	r2, r3, r2, r3
 8004d36:	095b      	lsrs	r3, r3, #5
 8004d38:	f003 0207 	and.w	r2, r3, #7
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4442      	add	r2, r8
 8004d42:	609a      	str	r2, [r3, #8]
 8004d44:	e26f      	b.n	8005226 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d46:	f7fe ff4f 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 8004d4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	461d      	mov	r5, r3
 8004d50:	f04f 0600 	mov.w	r6, #0
 8004d54:	46a8      	mov	r8, r5
 8004d56:	46b1      	mov	r9, r6
 8004d58:	eb18 0308 	adds.w	r3, r8, r8
 8004d5c:	eb49 0409 	adc.w	r4, r9, r9
 8004d60:	4698      	mov	r8, r3
 8004d62:	46a1      	mov	r9, r4
 8004d64:	eb18 0805 	adds.w	r8, r8, r5
 8004d68:	eb49 0906 	adc.w	r9, r9, r6
 8004d6c:	f04f 0100 	mov.w	r1, #0
 8004d70:	f04f 0200 	mov.w	r2, #0
 8004d74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d80:	4688      	mov	r8, r1
 8004d82:	4691      	mov	r9, r2
 8004d84:	eb18 0005 	adds.w	r0, r8, r5
 8004d88:	eb49 0106 	adc.w	r1, r9, r6
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	461d      	mov	r5, r3
 8004d92:	f04f 0600 	mov.w	r6, #0
 8004d96:	196b      	adds	r3, r5, r5
 8004d98:	eb46 0406 	adc.w	r4, r6, r6
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4623      	mov	r3, r4
 8004da0:	f7fb fa16 	bl	80001d0 <__aeabi_uldivmod>
 8004da4:	4603      	mov	r3, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	461a      	mov	r2, r3
 8004daa:	4b47      	ldr	r3, [pc, #284]	; (8004ec8 <UART_SetConfig+0x384>)
 8004dac:	fba3 2302 	umull	r2, r3, r3, r2
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	461d      	mov	r5, r3
 8004dba:	f04f 0600 	mov.w	r6, #0
 8004dbe:	46a9      	mov	r9, r5
 8004dc0:	46b2      	mov	sl, r6
 8004dc2:	eb19 0309 	adds.w	r3, r9, r9
 8004dc6:	eb4a 040a 	adc.w	r4, sl, sl
 8004dca:	4699      	mov	r9, r3
 8004dcc:	46a2      	mov	sl, r4
 8004dce:	eb19 0905 	adds.w	r9, r9, r5
 8004dd2:	eb4a 0a06 	adc.w	sl, sl, r6
 8004dd6:	f04f 0100 	mov.w	r1, #0
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004de2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004de6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dea:	4689      	mov	r9, r1
 8004dec:	4692      	mov	sl, r2
 8004dee:	eb19 0005 	adds.w	r0, r9, r5
 8004df2:	eb4a 0106 	adc.w	r1, sl, r6
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	461d      	mov	r5, r3
 8004dfc:	f04f 0600 	mov.w	r6, #0
 8004e00:	196b      	adds	r3, r5, r5
 8004e02:	eb46 0406 	adc.w	r4, r6, r6
 8004e06:	461a      	mov	r2, r3
 8004e08:	4623      	mov	r3, r4
 8004e0a:	f7fb f9e1 	bl	80001d0 <__aeabi_uldivmod>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	460c      	mov	r4, r1
 8004e12:	461a      	mov	r2, r3
 8004e14:	4b2c      	ldr	r3, [pc, #176]	; (8004ec8 <UART_SetConfig+0x384>)
 8004e16:	fba3 1302 	umull	r1, r3, r3, r2
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2164      	movs	r1, #100	; 0x64
 8004e1e:	fb01 f303 	mul.w	r3, r1, r3
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	3332      	adds	r3, #50	; 0x32
 8004e28:	4a27      	ldr	r2, [pc, #156]	; (8004ec8 <UART_SetConfig+0x384>)
 8004e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e36:	4498      	add	r8, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	461d      	mov	r5, r3
 8004e3c:	f04f 0600 	mov.w	r6, #0
 8004e40:	46a9      	mov	r9, r5
 8004e42:	46b2      	mov	sl, r6
 8004e44:	eb19 0309 	adds.w	r3, r9, r9
 8004e48:	eb4a 040a 	adc.w	r4, sl, sl
 8004e4c:	4699      	mov	r9, r3
 8004e4e:	46a2      	mov	sl, r4
 8004e50:	eb19 0905 	adds.w	r9, r9, r5
 8004e54:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e58:	f04f 0100 	mov.w	r1, #0
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e6c:	4689      	mov	r9, r1
 8004e6e:	4692      	mov	sl, r2
 8004e70:	eb19 0005 	adds.w	r0, r9, r5
 8004e74:	eb4a 0106 	adc.w	r1, sl, r6
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	461d      	mov	r5, r3
 8004e7e:	f04f 0600 	mov.w	r6, #0
 8004e82:	196b      	adds	r3, r5, r5
 8004e84:	eb46 0406 	adc.w	r4, r6, r6
 8004e88:	461a      	mov	r2, r3
 8004e8a:	4623      	mov	r3, r4
 8004e8c:	f7fb f9a0 	bl	80001d0 <__aeabi_uldivmod>
 8004e90:	4603      	mov	r3, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	461a      	mov	r2, r3
 8004e96:	4b0c      	ldr	r3, [pc, #48]	; (8004ec8 <UART_SetConfig+0x384>)
 8004e98:	fba3 1302 	umull	r1, r3, r3, r2
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	2164      	movs	r1, #100	; 0x64
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	3332      	adds	r3, #50	; 0x32
 8004eaa:	4a07      	ldr	r2, [pc, #28]	; (8004ec8 <UART_SetConfig+0x384>)
 8004eac:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb0:	095b      	lsrs	r3, r3, #5
 8004eb2:	f003 0207 	and.w	r2, r3, #7
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4442      	add	r2, r8
 8004ebc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004ebe:	e1b2      	b.n	8005226 <UART_SetConfig+0x6e2>
 8004ec0:	40011000 	.word	0x40011000
 8004ec4:	40011400 	.word	0x40011400
 8004ec8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4ad7      	ldr	r2, [pc, #860]	; (8005230 <UART_SetConfig+0x6ec>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d005      	beq.n	8004ee2 <UART_SetConfig+0x39e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4ad6      	ldr	r2, [pc, #856]	; (8005234 <UART_SetConfig+0x6f0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	f040 80d1 	bne.w	8005084 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004ee2:	f7fe fe95 	bl	8003c10 <HAL_RCC_GetPCLK2Freq>
 8004ee6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	469a      	mov	sl, r3
 8004eec:	f04f 0b00 	mov.w	fp, #0
 8004ef0:	46d0      	mov	r8, sl
 8004ef2:	46d9      	mov	r9, fp
 8004ef4:	eb18 0308 	adds.w	r3, r8, r8
 8004ef8:	eb49 0409 	adc.w	r4, r9, r9
 8004efc:	4698      	mov	r8, r3
 8004efe:	46a1      	mov	r9, r4
 8004f00:	eb18 080a 	adds.w	r8, r8, sl
 8004f04:	eb49 090b 	adc.w	r9, r9, fp
 8004f08:	f04f 0100 	mov.w	r1, #0
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f1c:	4688      	mov	r8, r1
 8004f1e:	4691      	mov	r9, r2
 8004f20:	eb1a 0508 	adds.w	r5, sl, r8
 8004f24:	eb4b 0609 	adc.w	r6, fp, r9
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	f04f 0400 	mov.w	r4, #0
 8004f3a:	0094      	lsls	r4, r2, #2
 8004f3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f40:	008b      	lsls	r3, r1, #2
 8004f42:	461a      	mov	r2, r3
 8004f44:	4623      	mov	r3, r4
 8004f46:	4628      	mov	r0, r5
 8004f48:	4631      	mov	r1, r6
 8004f4a:	f7fb f941 	bl	80001d0 <__aeabi_uldivmod>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	460c      	mov	r4, r1
 8004f52:	461a      	mov	r2, r3
 8004f54:	4bb8      	ldr	r3, [pc, #736]	; (8005238 <UART_SetConfig+0x6f4>)
 8004f56:	fba3 2302 	umull	r2, r3, r3, r2
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	469b      	mov	fp, r3
 8004f64:	f04f 0c00 	mov.w	ip, #0
 8004f68:	46d9      	mov	r9, fp
 8004f6a:	46e2      	mov	sl, ip
 8004f6c:	eb19 0309 	adds.w	r3, r9, r9
 8004f70:	eb4a 040a 	adc.w	r4, sl, sl
 8004f74:	4699      	mov	r9, r3
 8004f76:	46a2      	mov	sl, r4
 8004f78:	eb19 090b 	adds.w	r9, r9, fp
 8004f7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f80:	f04f 0100 	mov.w	r1, #0
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f94:	4689      	mov	r9, r1
 8004f96:	4692      	mov	sl, r2
 8004f98:	eb1b 0509 	adds.w	r5, fp, r9
 8004f9c:	eb4c 060a 	adc.w	r6, ip, sl
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	f04f 0400 	mov.w	r4, #0
 8004fb2:	0094      	lsls	r4, r2, #2
 8004fb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fb8:	008b      	lsls	r3, r1, #2
 8004fba:	461a      	mov	r2, r3
 8004fbc:	4623      	mov	r3, r4
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	f7fb f905 	bl	80001d0 <__aeabi_uldivmod>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	460c      	mov	r4, r1
 8004fca:	461a      	mov	r2, r3
 8004fcc:	4b9a      	ldr	r3, [pc, #616]	; (8005238 <UART_SetConfig+0x6f4>)
 8004fce:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	2164      	movs	r1, #100	; 0x64
 8004fd6:	fb01 f303 	mul.w	r3, r1, r3
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	3332      	adds	r3, #50	; 0x32
 8004fe0:	4a95      	ldr	r2, [pc, #596]	; (8005238 <UART_SetConfig+0x6f4>)
 8004fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe6:	095b      	lsrs	r3, r3, #5
 8004fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fec:	4498      	add	r8, r3
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	469b      	mov	fp, r3
 8004ff2:	f04f 0c00 	mov.w	ip, #0
 8004ff6:	46d9      	mov	r9, fp
 8004ff8:	46e2      	mov	sl, ip
 8004ffa:	eb19 0309 	adds.w	r3, r9, r9
 8004ffe:	eb4a 040a 	adc.w	r4, sl, sl
 8005002:	4699      	mov	r9, r3
 8005004:	46a2      	mov	sl, r4
 8005006:	eb19 090b 	adds.w	r9, r9, fp
 800500a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800500e:	f04f 0100 	mov.w	r1, #0
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800501a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800501e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005022:	4689      	mov	r9, r1
 8005024:	4692      	mov	sl, r2
 8005026:	eb1b 0509 	adds.w	r5, fp, r9
 800502a:	eb4c 060a 	adc.w	r6, ip, sl
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4619      	mov	r1, r3
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	f04f 0400 	mov.w	r4, #0
 8005040:	0094      	lsls	r4, r2, #2
 8005042:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005046:	008b      	lsls	r3, r1, #2
 8005048:	461a      	mov	r2, r3
 800504a:	4623      	mov	r3, r4
 800504c:	4628      	mov	r0, r5
 800504e:	4631      	mov	r1, r6
 8005050:	f7fb f8be 	bl	80001d0 <__aeabi_uldivmod>
 8005054:	4603      	mov	r3, r0
 8005056:	460c      	mov	r4, r1
 8005058:	461a      	mov	r2, r3
 800505a:	4b77      	ldr	r3, [pc, #476]	; (8005238 <UART_SetConfig+0x6f4>)
 800505c:	fba3 1302 	umull	r1, r3, r3, r2
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	2164      	movs	r1, #100	; 0x64
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	3332      	adds	r3, #50	; 0x32
 800506e:	4a72      	ldr	r2, [pc, #456]	; (8005238 <UART_SetConfig+0x6f4>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	f003 020f 	and.w	r2, r3, #15
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4442      	add	r2, r8
 8005080:	609a      	str	r2, [r3, #8]
 8005082:	e0d0      	b.n	8005226 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005084:	f7fe fdb0 	bl	8003be8 <HAL_RCC_GetPCLK1Freq>
 8005088:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	469a      	mov	sl, r3
 800508e:	f04f 0b00 	mov.w	fp, #0
 8005092:	46d0      	mov	r8, sl
 8005094:	46d9      	mov	r9, fp
 8005096:	eb18 0308 	adds.w	r3, r8, r8
 800509a:	eb49 0409 	adc.w	r4, r9, r9
 800509e:	4698      	mov	r8, r3
 80050a0:	46a1      	mov	r9, r4
 80050a2:	eb18 080a 	adds.w	r8, r8, sl
 80050a6:	eb49 090b 	adc.w	r9, r9, fp
 80050aa:	f04f 0100 	mov.w	r1, #0
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050be:	4688      	mov	r8, r1
 80050c0:	4691      	mov	r9, r2
 80050c2:	eb1a 0508 	adds.w	r5, sl, r8
 80050c6:	eb4b 0609 	adc.w	r6, fp, r9
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	4619      	mov	r1, r3
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f04f 0300 	mov.w	r3, #0
 80050d8:	f04f 0400 	mov.w	r4, #0
 80050dc:	0094      	lsls	r4, r2, #2
 80050de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050e2:	008b      	lsls	r3, r1, #2
 80050e4:	461a      	mov	r2, r3
 80050e6:	4623      	mov	r3, r4
 80050e8:	4628      	mov	r0, r5
 80050ea:	4631      	mov	r1, r6
 80050ec:	f7fb f870 	bl	80001d0 <__aeabi_uldivmod>
 80050f0:	4603      	mov	r3, r0
 80050f2:	460c      	mov	r4, r1
 80050f4:	461a      	mov	r2, r3
 80050f6:	4b50      	ldr	r3, [pc, #320]	; (8005238 <UART_SetConfig+0x6f4>)
 80050f8:	fba3 2302 	umull	r2, r3, r3, r2
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	469b      	mov	fp, r3
 8005106:	f04f 0c00 	mov.w	ip, #0
 800510a:	46d9      	mov	r9, fp
 800510c:	46e2      	mov	sl, ip
 800510e:	eb19 0309 	adds.w	r3, r9, r9
 8005112:	eb4a 040a 	adc.w	r4, sl, sl
 8005116:	4699      	mov	r9, r3
 8005118:	46a2      	mov	sl, r4
 800511a:	eb19 090b 	adds.w	r9, r9, fp
 800511e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005122:	f04f 0100 	mov.w	r1, #0
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800512e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005132:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005136:	4689      	mov	r9, r1
 8005138:	4692      	mov	sl, r2
 800513a:	eb1b 0509 	adds.w	r5, fp, r9
 800513e:	eb4c 060a 	adc.w	r6, ip, sl
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	4619      	mov	r1, r3
 8005148:	f04f 0200 	mov.w	r2, #0
 800514c:	f04f 0300 	mov.w	r3, #0
 8005150:	f04f 0400 	mov.w	r4, #0
 8005154:	0094      	lsls	r4, r2, #2
 8005156:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800515a:	008b      	lsls	r3, r1, #2
 800515c:	461a      	mov	r2, r3
 800515e:	4623      	mov	r3, r4
 8005160:	4628      	mov	r0, r5
 8005162:	4631      	mov	r1, r6
 8005164:	f7fb f834 	bl	80001d0 <__aeabi_uldivmod>
 8005168:	4603      	mov	r3, r0
 800516a:	460c      	mov	r4, r1
 800516c:	461a      	mov	r2, r3
 800516e:	4b32      	ldr	r3, [pc, #200]	; (8005238 <UART_SetConfig+0x6f4>)
 8005170:	fba3 1302 	umull	r1, r3, r3, r2
 8005174:	095b      	lsrs	r3, r3, #5
 8005176:	2164      	movs	r1, #100	; 0x64
 8005178:	fb01 f303 	mul.w	r3, r1, r3
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	3332      	adds	r3, #50	; 0x32
 8005182:	4a2d      	ldr	r2, [pc, #180]	; (8005238 <UART_SetConfig+0x6f4>)
 8005184:	fba2 2303 	umull	r2, r3, r2, r3
 8005188:	095b      	lsrs	r3, r3, #5
 800518a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800518e:	4498      	add	r8, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	469b      	mov	fp, r3
 8005194:	f04f 0c00 	mov.w	ip, #0
 8005198:	46d9      	mov	r9, fp
 800519a:	46e2      	mov	sl, ip
 800519c:	eb19 0309 	adds.w	r3, r9, r9
 80051a0:	eb4a 040a 	adc.w	r4, sl, sl
 80051a4:	4699      	mov	r9, r3
 80051a6:	46a2      	mov	sl, r4
 80051a8:	eb19 090b 	adds.w	r9, r9, fp
 80051ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051b0:	f04f 0100 	mov.w	r1, #0
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051c4:	4689      	mov	r9, r1
 80051c6:	4692      	mov	sl, r2
 80051c8:	eb1b 0509 	adds.w	r5, fp, r9
 80051cc:	eb4c 060a 	adc.w	r6, ip, sl
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4619      	mov	r1, r3
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	f04f 0400 	mov.w	r4, #0
 80051e2:	0094      	lsls	r4, r2, #2
 80051e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051e8:	008b      	lsls	r3, r1, #2
 80051ea:	461a      	mov	r2, r3
 80051ec:	4623      	mov	r3, r4
 80051ee:	4628      	mov	r0, r5
 80051f0:	4631      	mov	r1, r6
 80051f2:	f7fa ffed 	bl	80001d0 <__aeabi_uldivmod>
 80051f6:	4603      	mov	r3, r0
 80051f8:	460c      	mov	r4, r1
 80051fa:	461a      	mov	r2, r3
 80051fc:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <UART_SetConfig+0x6f4>)
 80051fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	2164      	movs	r1, #100	; 0x64
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	3332      	adds	r3, #50	; 0x32
 8005210:	4a09      	ldr	r2, [pc, #36]	; (8005238 <UART_SetConfig+0x6f4>)
 8005212:	fba2 2303 	umull	r2, r3, r2, r3
 8005216:	095b      	lsrs	r3, r3, #5
 8005218:	f003 020f 	and.w	r2, r3, #15
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4442      	add	r2, r8
 8005222:	609a      	str	r2, [r3, #8]
}
 8005224:	e7ff      	b.n	8005226 <UART_SetConfig+0x6e2>
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005230:	40011000 	.word	0x40011000
 8005234:	40011400 	.word	0x40011400
 8005238:	51eb851f 	.word	0x51eb851f

0800523c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800523c:	b084      	sub	sp, #16
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	f107 001c 	add.w	r0, r7, #28
 800524a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	2b01      	cmp	r3, #1
 8005252:	d122      	bne.n	800529a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005258:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800527c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800527e:	2b01      	cmp	r3, #1
 8005280:	d105      	bne.n	800528e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fca0 	bl	8005bd4 <USB_CoreReset>
 8005294:	4603      	mov	r3, r0
 8005296:	73fb      	strb	r3, [r7, #15]
 8005298:	e01a      	b.n	80052d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fc94 	bl	8005bd4 <USB_CoreReset>
 80052ac:	4603      	mov	r3, r0
 80052ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80052b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d106      	bne.n	80052c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
 80052c2:	e005      	b.n	80052d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d10b      	bne.n	80052ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f043 0206 	orr.w	r2, r3, #6
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f043 0220 	orr.w	r2, r3, #32
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052fa:	b004      	add	sp, #16
 80052fc:	4770      	bx	lr
	...

08005300 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	4613      	mov	r3, r2
 800530c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800530e:	79fb      	ldrb	r3, [r7, #7]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d165      	bne.n	80053e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4a41      	ldr	r2, [pc, #260]	; (800541c <USB_SetTurnaroundTime+0x11c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d906      	bls.n	800532a <USB_SetTurnaroundTime+0x2a>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4a40      	ldr	r2, [pc, #256]	; (8005420 <USB_SetTurnaroundTime+0x120>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d802      	bhi.n	800532a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005324:	230f      	movs	r3, #15
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	e062      	b.n	80053f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4a3c      	ldr	r2, [pc, #240]	; (8005420 <USB_SetTurnaroundTime+0x120>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d906      	bls.n	8005340 <USB_SetTurnaroundTime+0x40>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	4a3b      	ldr	r2, [pc, #236]	; (8005424 <USB_SetTurnaroundTime+0x124>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d802      	bhi.n	8005340 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800533a:	230e      	movs	r3, #14
 800533c:	617b      	str	r3, [r7, #20]
 800533e:	e057      	b.n	80053f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4a38      	ldr	r2, [pc, #224]	; (8005424 <USB_SetTurnaroundTime+0x124>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d906      	bls.n	8005356 <USB_SetTurnaroundTime+0x56>
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	4a37      	ldr	r2, [pc, #220]	; (8005428 <USB_SetTurnaroundTime+0x128>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d802      	bhi.n	8005356 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005350:	230d      	movs	r3, #13
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	e04c      	b.n	80053f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4a33      	ldr	r2, [pc, #204]	; (8005428 <USB_SetTurnaroundTime+0x128>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d906      	bls.n	800536c <USB_SetTurnaroundTime+0x6c>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	4a32      	ldr	r2, [pc, #200]	; (800542c <USB_SetTurnaroundTime+0x12c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d802      	bhi.n	800536c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005366:	230c      	movs	r3, #12
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	e041      	b.n	80053f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4a2f      	ldr	r2, [pc, #188]	; (800542c <USB_SetTurnaroundTime+0x12c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d906      	bls.n	8005382 <USB_SetTurnaroundTime+0x82>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	4a2e      	ldr	r2, [pc, #184]	; (8005430 <USB_SetTurnaroundTime+0x130>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d802      	bhi.n	8005382 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800537c:	230b      	movs	r3, #11
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	e036      	b.n	80053f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	4a2a      	ldr	r2, [pc, #168]	; (8005430 <USB_SetTurnaroundTime+0x130>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d906      	bls.n	8005398 <USB_SetTurnaroundTime+0x98>
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4a29      	ldr	r2, [pc, #164]	; (8005434 <USB_SetTurnaroundTime+0x134>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d802      	bhi.n	8005398 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005392:	230a      	movs	r3, #10
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	e02b      	b.n	80053f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	4a26      	ldr	r2, [pc, #152]	; (8005434 <USB_SetTurnaroundTime+0x134>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d906      	bls.n	80053ae <USB_SetTurnaroundTime+0xae>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	4a25      	ldr	r2, [pc, #148]	; (8005438 <USB_SetTurnaroundTime+0x138>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d802      	bhi.n	80053ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80053a8:	2309      	movs	r3, #9
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	e020      	b.n	80053f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	4a21      	ldr	r2, [pc, #132]	; (8005438 <USB_SetTurnaroundTime+0x138>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d906      	bls.n	80053c4 <USB_SetTurnaroundTime+0xc4>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4a20      	ldr	r2, [pc, #128]	; (800543c <USB_SetTurnaroundTime+0x13c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d802      	bhi.n	80053c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80053be:	2308      	movs	r3, #8
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	e015      	b.n	80053f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	4a1d      	ldr	r2, [pc, #116]	; (800543c <USB_SetTurnaroundTime+0x13c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d906      	bls.n	80053da <USB_SetTurnaroundTime+0xda>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4a1c      	ldr	r2, [pc, #112]	; (8005440 <USB_SetTurnaroundTime+0x140>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d802      	bhi.n	80053da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053d4:	2307      	movs	r3, #7
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	e00a      	b.n	80053f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053da:	2306      	movs	r3, #6
 80053dc:	617b      	str	r3, [r7, #20]
 80053de:	e007      	b.n	80053f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80053e0:	79fb      	ldrb	r3, [r7, #7]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d102      	bne.n	80053ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80053e6:	2309      	movs	r3, #9
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	e001      	b.n	80053f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80053ec:	2309      	movs	r3, #9
 80053ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	029b      	lsls	r3, r3, #10
 8005404:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005408:	431a      	orrs	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	00d8acbf 	.word	0x00d8acbf
 8005420:	00e4e1bf 	.word	0x00e4e1bf
 8005424:	00f423ff 	.word	0x00f423ff
 8005428:	0106737f 	.word	0x0106737f
 800542c:	011a499f 	.word	0x011a499f
 8005430:	01312cff 	.word	0x01312cff
 8005434:	014ca43f 	.word	0x014ca43f
 8005438:	016e35ff 	.word	0x016e35ff
 800543c:	01a6ab1f 	.word	0x01a6ab1f
 8005440:	01e847ff 	.word	0x01e847ff

08005444 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f023 0201 	bic.w	r2, r3, #1
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	460b      	mov	r3, r1
 8005470:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d106      	bne.n	8005492 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	60da      	str	r2, [r3, #12]
 8005490:	e00b      	b.n	80054aa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005492:	78fb      	ldrb	r3, [r7, #3]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	60da      	str	r2, [r3, #12]
 80054a4:	e001      	b.n	80054aa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e003      	b.n	80054b2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80054aa:	2032      	movs	r0, #50	; 0x32
 80054ac:	f7fc f9e0 	bl	8001870 <HAL_Delay>

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
	...

080054bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054bc:	b084      	sub	sp, #16
 80054be:	b580      	push	{r7, lr}
 80054c0:	b086      	sub	sp, #24
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
 80054c6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054d6:	2300      	movs	r3, #0
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	e009      	b.n	80054f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	3340      	adds	r3, #64	; 0x40
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	4413      	add	r3, r2
 80054e6:	2200      	movs	r2, #0
 80054e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	3301      	adds	r3, #1
 80054ee:	613b      	str	r3, [r7, #16]
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b0e      	cmp	r3, #14
 80054f4:	d9f2      	bls.n	80054dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d11c      	bne.n	8005536 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800550a:	f043 0302 	orr.w	r3, r3, #2
 800550e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38
 8005534:	e00b      	b.n	800554e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005546:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005554:	461a      	mov	r2, r3
 8005556:	2300      	movs	r3, #0
 8005558:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005560:	4619      	mov	r1, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005568:	461a      	mov	r2, r3
 800556a:	680b      	ldr	r3, [r1, #0]
 800556c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	2b01      	cmp	r3, #1
 8005572:	d10c      	bne.n	800558e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005576:	2b00      	cmp	r3, #0
 8005578:	d104      	bne.n	8005584 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800557a:	2100      	movs	r1, #0
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f949 	bl	8005814 <USB_SetDevSpeed>
 8005582:	e008      	b.n	8005596 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005584:	2101      	movs	r1, #1
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f944 	bl	8005814 <USB_SetDevSpeed>
 800558c:	e003      	b.n	8005596 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800558e:	2103      	movs	r1, #3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f93f 	bl	8005814 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005596:	2110      	movs	r1, #16
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f000 f8f3 	bl	8005784 <USB_FlushTxFifo>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f911 	bl	80057d0 <USB_FlushRxFifo>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055be:	461a      	mov	r2, r3
 80055c0:	2300      	movs	r3, #0
 80055c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	461a      	mov	r2, r3
 80055cc:	2300      	movs	r3, #0
 80055ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	461a      	mov	r2, r3
 80055d8:	2300      	movs	r3, #0
 80055da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055dc:	2300      	movs	r3, #0
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	e043      	b.n	800566a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	015a      	lsls	r2, r3, #5
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	4413      	add	r3, r2
 80055ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f8:	d118      	bne.n	800562c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10a      	bne.n	8005616 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560c:	461a      	mov	r2, r3
 800560e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	e013      	b.n	800563e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005622:	461a      	mov	r2, r3
 8005624:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	e008      	b.n	800563e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005638:	461a      	mov	r2, r3
 800563a:	2300      	movs	r3, #0
 800563c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800564a:	461a      	mov	r2, r3
 800564c:	2300      	movs	r3, #0
 800564e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565c:	461a      	mov	r2, r3
 800565e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005662:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	3301      	adds	r3, #1
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	429a      	cmp	r2, r3
 8005670:	d3b7      	bcc.n	80055e2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005672:	2300      	movs	r3, #0
 8005674:	613b      	str	r3, [r7, #16]
 8005676:	e043      	b.n	8005700 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800568a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800568e:	d118      	bne.n	80056c2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10a      	bne.n	80056ac <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a2:	461a      	mov	r2, r3
 80056a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056a8:	6013      	str	r3, [r2, #0]
 80056aa:	e013      	b.n	80056d4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b8:	461a      	mov	r2, r3
 80056ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	e008      	b.n	80056d4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ce:	461a      	mov	r2, r3
 80056d0:	2300      	movs	r3, #0
 80056d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e0:	461a      	mov	r2, r3
 80056e2:	2300      	movs	r3, #0
 80056e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f2:	461a      	mov	r2, r3
 80056f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	3301      	adds	r3, #1
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	429a      	cmp	r2, r3
 8005706:	d3b7      	bcc.n	8005678 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005716:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800571a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005728:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	2b00      	cmp	r3, #0
 800572e:	d105      	bne.n	800573c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	f043 0210 	orr.w	r2, r3, #16
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699a      	ldr	r2, [r3, #24]
 8005740:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <USB_DevInit+0x2c4>)
 8005742:	4313      	orrs	r3, r2
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d005      	beq.n	800575a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	f043 0208 	orr.w	r2, r3, #8
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800575a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575c:	2b01      	cmp	r3, #1
 800575e:	d107      	bne.n	8005770 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005768:	f043 0304 	orr.w	r3, r3, #4
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005770:	7dfb      	ldrb	r3, [r7, #23]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800577c:	b004      	add	sp, #16
 800577e:	4770      	bx	lr
 8005780:	803c3800 	.word	0x803c3800

08005784 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800578e:	2300      	movs	r3, #0
 8005790:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	019b      	lsls	r3, r3, #6
 8005796:	f043 0220 	orr.w	r2, r3, #32
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3301      	adds	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4a09      	ldr	r2, [pc, #36]	; (80057cc <USB_FlushTxFifo+0x48>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d901      	bls.n	80057b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e006      	b.n	80057be <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d0f0      	beq.n	800579e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	00030d40 	.word	0x00030d40

080057d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2210      	movs	r2, #16
 80057e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	3301      	adds	r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4a09      	ldr	r2, [pc, #36]	; (8005810 <USB_FlushRxFifo+0x40>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d901      	bls.n	80057f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e006      	b.n	8005802 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f003 0310 	and.w	r3, r3, #16
 80057fc:	2b10      	cmp	r3, #16
 80057fe:	d0f0      	beq.n	80057e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3714      	adds	r7, #20
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	00030d40 	.word	0x00030d40

08005814 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	68f9      	ldr	r1, [r7, #12]
 8005830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005834:	4313      	orrs	r3, r2
 8005836:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005846:	b480      	push	{r7}
 8005848:	b087      	sub	sp, #28
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f003 0306 	and.w	r3, r3, #6
 800585e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d102      	bne.n	800586c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005866:	2300      	movs	r3, #0
 8005868:	75fb      	strb	r3, [r7, #23]
 800586a:	e00a      	b.n	8005882 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d002      	beq.n	8005878 <USB_GetDevSpeed+0x32>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b06      	cmp	r3, #6
 8005876:	d102      	bne.n	800587e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005878:	2302      	movs	r3, #2
 800587a:	75fb      	strb	r3, [r7, #23]
 800587c:	e001      	b.n	8005882 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800587e:	230f      	movs	r3, #15
 8005880:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005882:	7dfb      	ldrb	r3, [r7, #23]
}
 8005884:	4618      	mov	r0, r3
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005890:	b480      	push	{r7}
 8005892:	b089      	sub	sp, #36	; 0x24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	4611      	mov	r1, r2
 800589c:	461a      	mov	r2, r3
 800589e:	460b      	mov	r3, r1
 80058a0:	71fb      	strb	r3, [r7, #7]
 80058a2:	4613      	mov	r3, r2
 80058a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80058ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d11a      	bne.n	80058ec <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80058b6:	88bb      	ldrh	r3, [r7, #4]
 80058b8:	3303      	adds	r3, #3
 80058ba:	089b      	lsrs	r3, r3, #2
 80058bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80058be:	2300      	movs	r3, #0
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	e00f      	b.n	80058e4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80058c4:	79fb      	ldrb	r3, [r7, #7]
 80058c6:	031a      	lsls	r2, r3, #12
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	4413      	add	r3, r2
 80058cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058d0:	461a      	mov	r2, r3
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	3304      	adds	r3, #4
 80058dc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	3301      	adds	r3, #1
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d3eb      	bcc.n	80058c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3724      	adds	r7, #36	; 0x24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b089      	sub	sp, #36	; 0x24
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	4613      	mov	r3, r2
 8005906:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005910:	88fb      	ldrh	r3, [r7, #6]
 8005912:	3303      	adds	r3, #3
 8005914:	089b      	lsrs	r3, r3, #2
 8005916:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005918:	2300      	movs	r3, #0
 800591a:	61bb      	str	r3, [r7, #24]
 800591c:	e00b      	b.n	8005936 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	601a      	str	r2, [r3, #0]
    pDest++;
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	3304      	adds	r3, #4
 800592e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	3301      	adds	r3, #1
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	429a      	cmp	r2, r3
 800593c:	d3ef      	bcc.n	800591e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800593e:	69fb      	ldr	r3, [r7, #28]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3724      	adds	r7, #36	; 0x24
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005966:	f023 0303 	bic.w	r3, r3, #3
 800596a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800597a:	f043 0302 	orr.w	r3, r3, #2
 800597e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4013      	ands	r3, r2
 80059a4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059a6:	68fb      	ldr	r3, [r7, #12]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	4013      	ands	r3, r2
 80059d6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	0c1b      	lsrs	r3, r3, #16
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	4013      	ands	r3, r2
 8005a0a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	b29b      	uxth	r3, r3
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3714      	adds	r7, #20
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	460b      	mov	r3, r1
 8005a26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	015a      	lsls	r2, r3, #5
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	4013      	ands	r3, r2
 8005a48:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	460b      	mov	r3, r1
 8005a62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
 8005a88:	01db      	lsls	r3, r3, #7
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005a92:	78fb      	ldrb	r3, [r7, #3]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aea:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005aee:	f023 0307 	bic.w	r3, r3, #7
 8005af2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b06:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
	...

08005b18 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	460b      	mov	r3, r1
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	333c      	adds	r3, #60	; 0x3c
 8005b2e:	3304      	adds	r3, #4
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	4a26      	ldr	r2, [pc, #152]	; (8005bd0 <USB_EP0_OutStart+0xb8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d90a      	bls.n	8005b52 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b4c:	d101      	bne.n	8005b52 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e037      	b.n	8005bc2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b58:	461a      	mov	r2, r3
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b70:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b80:	f043 0318 	orr.w	r3, r3, #24
 8005b84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b94:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b98:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b9a:	7afb      	ldrb	r3, [r7, #11]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d10f      	bne.n	8005bc0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005bbe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	4f54300a 	.word	0x4f54300a

08005bd4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3301      	adds	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	4a13      	ldr	r2, [pc, #76]	; (8005c38 <USB_CoreReset+0x64>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d901      	bls.n	8005bf2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	e01b      	b.n	8005c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	daf2      	bge.n	8005be0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f043 0201 	orr.w	r2, r3, #1
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4a09      	ldr	r2, [pc, #36]	; (8005c38 <USB_CoreReset+0x64>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d901      	bls.n	8005c1c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e006      	b.n	8005c2a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	f003 0301 	and.w	r3, r3, #1
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d0f0      	beq.n	8005c0a <USB_CoreReset+0x36>

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	00030d40 	.word	0x00030d40

08005c3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005c3c:	b480      	push	{r7}
 8005c3e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005c40:	bf00      	nop
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
	...

08005c4c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c52:	f3ef 8305 	mrs	r3, IPSR
 8005c56:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c58:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10f      	bne.n	8005c7e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c62:	607b      	str	r3, [r7, #4]
  return(result);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d105      	bne.n	8005c76 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c6e:	603b      	str	r3, [r7, #0]
  return(result);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <osKernelInitialize+0x3a>
 8005c76:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <osKernelInitialize+0x64>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d103      	bne.n	8005c86 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005c7e:	f06f 0305 	mvn.w	r3, #5
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	e00c      	b.n	8005ca0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005c86:	4b0a      	ldr	r3, [pc, #40]	; (8005cb0 <osKernelInitialize+0x64>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d105      	bne.n	8005c9a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005c8e:	4b08      	ldr	r3, [pc, #32]	; (8005cb0 <osKernelInitialize+0x64>)
 8005c90:	2201      	movs	r2, #1
 8005c92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
 8005c98:	e002      	b.n	8005ca0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c9e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	2000002c 	.word	0x2000002c

08005cb4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cba:	f3ef 8305 	mrs	r3, IPSR
 8005cbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005cc0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10f      	bne.n	8005ce6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cca:	607b      	str	r3, [r7, #4]
  return(result);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d105      	bne.n	8005cde <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cd2:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd6:	603b      	str	r3, [r7, #0]
  return(result);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <osKernelStart+0x3a>
 8005cde:	4b0f      	ldr	r3, [pc, #60]	; (8005d1c <osKernelStart+0x68>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d103      	bne.n	8005cee <osKernelStart+0x3a>
    stat = osErrorISR;
 8005ce6:	f06f 0305 	mvn.w	r3, #5
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	e010      	b.n	8005d10 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005cee:	4b0b      	ldr	r3, [pc, #44]	; (8005d1c <osKernelStart+0x68>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d109      	bne.n	8005d0a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005cf6:	f7ff ffa1 	bl	8005c3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005cfa:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <osKernelStart+0x68>)
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d00:	f001 f872 	bl	8006de8 <vTaskStartScheduler>
      stat = osOK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	e002      	b.n	8005d10 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d0e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005d10:	68fb      	ldr	r3, [r7, #12]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	2000002c 	.word	0x2000002c

08005d20 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b090      	sub	sp, #64	; 0x40
 8005d24:	af04      	add	r7, sp, #16
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d30:	f3ef 8305 	mrs	r3, IPSR
 8005d34:	61fb      	str	r3, [r7, #28]
  return(result);
 8005d36:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f040 808f 	bne.w	8005e5c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d42:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d105      	bne.n	8005d56 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d4a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d4e:	617b      	str	r3, [r7, #20]
  return(result);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d003      	beq.n	8005d5e <osThreadNew+0x3e>
 8005d56:	4b44      	ldr	r3, [pc, #272]	; (8005e68 <osThreadNew+0x148>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d07e      	beq.n	8005e5c <osThreadNew+0x13c>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d07b      	beq.n	8005e5c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005d64:	2380      	movs	r3, #128	; 0x80
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005d68:	2318      	movs	r3, #24
 8005d6a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8005d70:	f04f 33ff 	mov.w	r3, #4294967295
 8005d74:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d045      	beq.n	8005e08 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <osThreadNew+0x6a>
        name = attr->name;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d008      	beq.n	8005db0 <osThreadNew+0x90>
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da0:	2b38      	cmp	r3, #56	; 0x38
 8005da2:	d805      	bhi.n	8005db0 <osThreadNew+0x90>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <osThreadNew+0x94>
        return (NULL);
 8005db0:	2300      	movs	r3, #0
 8005db2:	e054      	b.n	8005e5e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	089b      	lsrs	r3, r3, #2
 8005dc2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00e      	beq.n	8005dea <osThreadNew+0xca>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	2b5f      	cmp	r3, #95	; 0x5f
 8005dd2:	d90a      	bls.n	8005dea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d006      	beq.n	8005dea <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <osThreadNew+0xca>
        mem = 1;
 8005de4:	2301      	movs	r3, #1
 8005de6:	623b      	str	r3, [r7, #32]
 8005de8:	e010      	b.n	8005e0c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10c      	bne.n	8005e0c <osThreadNew+0xec>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d108      	bne.n	8005e0c <osThreadNew+0xec>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d104      	bne.n	8005e0c <osThreadNew+0xec>
          mem = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	623b      	str	r3, [r7, #32]
 8005e06:	e001      	b.n	8005e0c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d110      	bne.n	8005e34 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e1a:	9202      	str	r2, [sp, #8]
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e20:	9300      	str	r3, [sp, #0]
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 fe09 	bl	8006a40 <xTaskCreateStatic>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	e013      	b.n	8005e5c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d110      	bne.n	8005e5c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	f107 0310 	add.w	r3, r7, #16
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f000 fe51 	bl	8006af4 <xTaskCreate>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d001      	beq.n	8005e5c <osThreadNew+0x13c>
          hTask = NULL;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e5c:	693b      	ldr	r3, [r7, #16]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3730      	adds	r7, #48	; 0x30
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	2000002c 	.word	0x2000002c

08005e6c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e74:	f3ef 8305 	mrs	r3, IPSR
 8005e78:	613b      	str	r3, [r7, #16]
  return(result);
 8005e7a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10f      	bne.n	8005ea0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e80:	f3ef 8310 	mrs	r3, PRIMASK
 8005e84:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d105      	bne.n	8005e98 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e8c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e90:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d007      	beq.n	8005ea8 <osDelay+0x3c>
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <osDelay+0x58>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d103      	bne.n	8005ea8 <osDelay+0x3c>
    stat = osErrorISR;
 8005ea0:	f06f 0305 	mvn.w	r3, #5
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e007      	b.n	8005eb8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 ff64 	bl	8006d80 <vTaskDelay>
    }
  }

  return (stat);
 8005eb8:	697b      	ldr	r3, [r7, #20]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	2000002c 	.word	0x2000002c

08005ec8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4a07      	ldr	r2, [pc, #28]	; (8005ef4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ed8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4a06      	ldr	r2, [pc, #24]	; (8005ef8 <vApplicationGetIdleTaskMemory+0x30>)
 8005ede:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2280      	movs	r2, #128	; 0x80
 8005ee4:	601a      	str	r2, [r3, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20000030 	.word	0x20000030
 8005ef8:	20000090 	.word	0x20000090

08005efc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4a07      	ldr	r2, [pc, #28]	; (8005f28 <vApplicationGetTimerTaskMemory+0x2c>)
 8005f0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	4a06      	ldr	r2, [pc, #24]	; (8005f2c <vApplicationGetTimerTaskMemory+0x30>)
 8005f12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f1a:	601a      	str	r2, [r3, #0]
}
 8005f1c:	bf00      	nop
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	20000290 	.word	0x20000290
 8005f2c:	200002f0 	.word	0x200002f0

08005f30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f103 0208 	add.w	r2, r3, #8
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f04f 32ff 	mov.w	r2, #4294967295
 8005f48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f103 0208 	add.w	r2, r3, #8
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f103 0208 	add.w	r2, r3, #8
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f7e:	bf00      	nop
 8005f80:	370c      	adds	r7, #12
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	683a      	ldr	r2, [r7, #0]
 8005fb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	1c5a      	adds	r2, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	601a      	str	r2, [r3, #0]
}
 8005fc6:	bf00      	nop
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b085      	sub	sp, #20
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe8:	d103      	bne.n	8005ff2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	e00c      	b.n	800600c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	e002      	b.n	8006000 <vListInsert+0x2e>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	60fb      	str	r3, [r7, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	429a      	cmp	r2, r3
 800600a:	d2f6      	bcs.n	8005ffa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	683a      	ldr	r2, [r7, #0]
 8006026:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	1c5a      	adds	r2, r3, #1
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	601a      	str	r2, [r3, #0]
}
 8006038:	bf00      	nop
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6892      	ldr	r2, [r2, #8]
 800605a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6852      	ldr	r2, [r2, #4]
 8006064:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	429a      	cmp	r2, r3
 800606e:	d103      	bne.n	8006078 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	1e5a      	subs	r2, r3, #1
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b084      	sub	sp, #16
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d109      	bne.n	80060c0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	e7fe      	b.n	80060be <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80060c0:	f002 f814 	bl	80080ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060cc:	68f9      	ldr	r1, [r7, #12]
 80060ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	441a      	add	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f0:	3b01      	subs	r3, #1
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060f6:	fb01 f303 	mul.w	r3, r1, r3
 80060fa:	441a      	add	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	22ff      	movs	r2, #255	; 0xff
 8006104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	22ff      	movs	r2, #255	; 0xff
 800610c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d114      	bne.n	8006140 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01a      	beq.n	8006154 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	3310      	adds	r3, #16
 8006122:	4618      	mov	r0, r3
 8006124:	f001 f8e0 	bl	80072e8 <xTaskRemoveFromEventList>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d012      	beq.n	8006154 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800612e:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <xQueueGenericReset+0xcc>)
 8006130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006134:	601a      	str	r2, [r3, #0]
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	e009      	b.n	8006154 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	3310      	adds	r3, #16
 8006144:	4618      	mov	r0, r3
 8006146:	f7ff fef3 	bl	8005f30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3324      	adds	r3, #36	; 0x24
 800614e:	4618      	mov	r0, r3
 8006150:	f7ff feee 	bl	8005f30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006154:	f001 fff8 	bl	8008148 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006158:	2301      	movs	r3, #1
}
 800615a:	4618      	mov	r0, r3
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08e      	sub	sp, #56	; 0x38
 800616c:	af02      	add	r7, sp, #8
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d109      	bne.n	8006190 <xQueueGenericCreateStatic+0x28>
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	62bb      	str	r3, [r7, #40]	; 0x28
 800618e:	e7fe      	b.n	800618e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <xQueueGenericCreateStatic+0x42>
 8006196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619a:	f383 8811 	msr	BASEPRI, r3
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	627b      	str	r3, [r7, #36]	; 0x24
 80061a8:	e7fe      	b.n	80061a8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <xQueueGenericCreateStatic+0x4e>
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <xQueueGenericCreateStatic+0x52>
 80061b6:	2301      	movs	r3, #1
 80061b8:	e000      	b.n	80061bc <xQueueGenericCreateStatic+0x54>
 80061ba:	2300      	movs	r3, #0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d109      	bne.n	80061d4 <xQueueGenericCreateStatic+0x6c>
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	623b      	str	r3, [r7, #32]
 80061d2:	e7fe      	b.n	80061d2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d102      	bne.n	80061e0 <xQueueGenericCreateStatic+0x78>
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d101      	bne.n	80061e4 <xQueueGenericCreateStatic+0x7c>
 80061e0:	2301      	movs	r3, #1
 80061e2:	e000      	b.n	80061e6 <xQueueGenericCreateStatic+0x7e>
 80061e4:	2300      	movs	r3, #0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d109      	bne.n	80061fe <xQueueGenericCreateStatic+0x96>
 80061ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	61fb      	str	r3, [r7, #28]
 80061fc:	e7fe      	b.n	80061fc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061fe:	2350      	movs	r3, #80	; 0x50
 8006200:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	2b50      	cmp	r3, #80	; 0x50
 8006206:	d009      	beq.n	800621c <xQueueGenericCreateStatic+0xb4>
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	e7fe      	b.n	800621a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800621c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00d      	beq.n	8006244 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006230:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	4613      	mov	r3, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f805 	bl	800624e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006246:	4618      	mov	r0, r3
 8006248:	3730      	adds	r7, #48	; 0x30
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	60f8      	str	r0, [r7, #12]
 8006256:	60b9      	str	r1, [r7, #8]
 8006258:	607a      	str	r2, [r7, #4]
 800625a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d103      	bne.n	800626a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	e002      	b.n	8006270 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800627c:	2101      	movs	r1, #1
 800627e:	69b8      	ldr	r0, [r7, #24]
 8006280:	f7ff ff0a 	bl	8006098 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	78fa      	ldrb	r2, [r7, #3]
 8006288:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800628c:	bf00      	nop
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08e      	sub	sp, #56	; 0x38
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80062a2:	2300      	movs	r3, #0
 80062a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80062aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d109      	bne.n	80062c4 <xQueueGenericSend+0x30>
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c2:	e7fe      	b.n	80062c2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d103      	bne.n	80062d2 <xQueueGenericSend+0x3e>
 80062ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <xQueueGenericSend+0x42>
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <xQueueGenericSend+0x44>
 80062d6:	2300      	movs	r3, #0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d109      	bne.n	80062f0 <xQueueGenericSend+0x5c>
 80062dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
 80062ee:	e7fe      	b.n	80062ee <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d103      	bne.n	80062fe <xQueueGenericSend+0x6a>
 80062f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <xQueueGenericSend+0x6e>
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <xQueueGenericSend+0x70>
 8006302:	2300      	movs	r3, #0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d109      	bne.n	800631c <xQueueGenericSend+0x88>
 8006308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	623b      	str	r3, [r7, #32]
 800631a:	e7fe      	b.n	800631a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800631c:	f001 f99a 	bl	8007654 <xTaskGetSchedulerState>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d102      	bne.n	800632c <xQueueGenericSend+0x98>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <xQueueGenericSend+0x9c>
 800632c:	2301      	movs	r3, #1
 800632e:	e000      	b.n	8006332 <xQueueGenericSend+0x9e>
 8006330:	2300      	movs	r3, #0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d109      	bne.n	800634a <xQueueGenericSend+0xb6>
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	e7fe      	b.n	8006348 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800634a:	f001 fecf 	bl	80080ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006356:	429a      	cmp	r2, r3
 8006358:	d302      	bcc.n	8006360 <xQueueGenericSend+0xcc>
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	2b02      	cmp	r3, #2
 800635e:	d129      	bne.n	80063b4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006360:	683a      	ldr	r2, [r7, #0]
 8006362:	68b9      	ldr	r1, [r7, #8]
 8006364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006366:	f000 f9ff 	bl	8006768 <prvCopyDataToQueue>
 800636a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800636c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	2b00      	cmp	r3, #0
 8006372:	d010      	beq.n	8006396 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	3324      	adds	r3, #36	; 0x24
 8006378:	4618      	mov	r0, r3
 800637a:	f000 ffb5 	bl	80072e8 <xTaskRemoveFromEventList>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d013      	beq.n	80063ac <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006384:	4b3f      	ldr	r3, [pc, #252]	; (8006484 <xQueueGenericSend+0x1f0>)
 8006386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	e00a      	b.n	80063ac <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006398:	2b00      	cmp	r3, #0
 800639a:	d007      	beq.n	80063ac <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800639c:	4b39      	ldr	r3, [pc, #228]	; (8006484 <xQueueGenericSend+0x1f0>)
 800639e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063a2:	601a      	str	r2, [r3, #0]
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80063ac:	f001 fecc 	bl	8008148 <vPortExitCritical>
				return pdPASS;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e063      	b.n	800647c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d103      	bne.n	80063c2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063ba:	f001 fec5 	bl	8008148 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	e05c      	b.n	800647c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d106      	bne.n	80063d6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063c8:	f107 0314 	add.w	r3, r7, #20
 80063cc:	4618      	mov	r0, r3
 80063ce:	f000 ffed 	bl	80073ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063d2:	2301      	movs	r3, #1
 80063d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063d6:	f001 feb7 	bl	8008148 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063da:	f000 fd69 	bl	8006eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063de:	f001 fe85 	bl	80080ec <vPortEnterCritical>
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063e8:	b25b      	sxtb	r3, r3
 80063ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ee:	d103      	bne.n	80063f8 <xQueueGenericSend+0x164>
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063fe:	b25b      	sxtb	r3, r3
 8006400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006404:	d103      	bne.n	800640e <xQueueGenericSend+0x17a>
 8006406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800640e:	f001 fe9b 	bl	8008148 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006412:	1d3a      	adds	r2, r7, #4
 8006414:	f107 0314 	add.w	r3, r7, #20
 8006418:	4611      	mov	r1, r2
 800641a:	4618      	mov	r0, r3
 800641c:	f000 ffdc 	bl	80073d8 <xTaskCheckForTimeOut>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d124      	bne.n	8006470 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006426:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006428:	f000 fa96 	bl	8006958 <prvIsQueueFull>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d018      	beq.n	8006464 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006434:	3310      	adds	r3, #16
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	4611      	mov	r1, r2
 800643a:	4618      	mov	r0, r3
 800643c:	f000 ff06 	bl	800724c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006442:	f000 fa21 	bl	8006888 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006446:	f000 fd41 	bl	8006ecc <xTaskResumeAll>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	f47f af7c 	bne.w	800634a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8006452:	4b0c      	ldr	r3, [pc, #48]	; (8006484 <xQueueGenericSend+0x1f0>)
 8006454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	e772      	b.n	800634a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006466:	f000 fa0f 	bl	8006888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800646a:	f000 fd2f 	bl	8006ecc <xTaskResumeAll>
 800646e:	e76c      	b.n	800634a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006472:	f000 fa09 	bl	8006888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006476:	f000 fd29 	bl	8006ecc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800647a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800647c:	4618      	mov	r0, r3
 800647e:	3738      	adds	r7, #56	; 0x38
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	e000ed04 	.word	0xe000ed04

08006488 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b08e      	sub	sp, #56	; 0x38
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	2b00      	cmp	r3, #0
 800649e:	d109      	bne.n	80064b4 <xQueueGenericSendFromISR+0x2c>
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	627b      	str	r3, [r7, #36]	; 0x24
 80064b2:	e7fe      	b.n	80064b2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d103      	bne.n	80064c2 <xQueueGenericSendFromISR+0x3a>
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <xQueueGenericSendFromISR+0x3e>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <xQueueGenericSendFromISR+0x40>
 80064c6:	2300      	movs	r3, #0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d109      	bne.n	80064e0 <xQueueGenericSendFromISR+0x58>
 80064cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d0:	f383 8811 	msr	BASEPRI, r3
 80064d4:	f3bf 8f6f 	isb	sy
 80064d8:	f3bf 8f4f 	dsb	sy
 80064dc:	623b      	str	r3, [r7, #32]
 80064de:	e7fe      	b.n	80064de <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d103      	bne.n	80064ee <xQueueGenericSendFromISR+0x66>
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <xQueueGenericSendFromISR+0x6a>
 80064ee:	2301      	movs	r3, #1
 80064f0:	e000      	b.n	80064f4 <xQueueGenericSendFromISR+0x6c>
 80064f2:	2300      	movs	r3, #0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d109      	bne.n	800650c <xQueueGenericSendFromISR+0x84>
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	61fb      	str	r3, [r7, #28]
 800650a:	e7fe      	b.n	800650a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800650c:	f001 feca 	bl	80082a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006510:	f3ef 8211 	mrs	r2, BASEPRI
 8006514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	61ba      	str	r2, [r7, #24]
 8006526:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006528:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800652a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800652c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006534:	429a      	cmp	r2, r3
 8006536:	d302      	bcc.n	800653e <xQueueGenericSendFromISR+0xb6>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b02      	cmp	r3, #2
 800653c:	d12c      	bne.n	8006598 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800653e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800654e:	f000 f90b 	bl	8006768 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006552:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655a:	d112      	bne.n	8006582 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800655c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	2b00      	cmp	r3, #0
 8006562:	d016      	beq.n	8006592 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006566:	3324      	adds	r3, #36	; 0x24
 8006568:	4618      	mov	r0, r3
 800656a:	f000 febd 	bl	80072e8 <xTaskRemoveFromEventList>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00e      	beq.n	8006592 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00b      	beq.n	8006592 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2201      	movs	r2, #1
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	e007      	b.n	8006592 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006582:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006586:	3301      	adds	r3, #1
 8006588:	b2db      	uxtb	r3, r3
 800658a:	b25a      	sxtb	r2, r3
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006592:	2301      	movs	r3, #1
 8006594:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006596:	e001      	b.n	800659c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006598:	2300      	movs	r3, #0
 800659a:	637b      	str	r3, [r7, #52]	; 0x34
 800659c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3738      	adds	r7, #56	; 0x38
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b08c      	sub	sp, #48	; 0x30
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80065bc:	2300      	movs	r3, #0
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d109      	bne.n	80065de <xQueueReceive+0x2e>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	623b      	str	r3, [r7, #32]
 80065dc:	e7fe      	b.n	80065dc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d103      	bne.n	80065ec <xQueueReceive+0x3c>
 80065e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <xQueueReceive+0x40>
 80065ec:	2301      	movs	r3, #1
 80065ee:	e000      	b.n	80065f2 <xQueueReceive+0x42>
 80065f0:	2300      	movs	r3, #0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <xQueueReceive+0x5a>
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	61fb      	str	r3, [r7, #28]
 8006608:	e7fe      	b.n	8006608 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800660a:	f001 f823 	bl	8007654 <xTaskGetSchedulerState>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d102      	bne.n	800661a <xQueueReceive+0x6a>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <xQueueReceive+0x6e>
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <xQueueReceive+0x70>
 800661e:	2300      	movs	r3, #0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d109      	bne.n	8006638 <xQueueReceive+0x88>
 8006624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006628:	f383 8811 	msr	BASEPRI, r3
 800662c:	f3bf 8f6f 	isb	sy
 8006630:	f3bf 8f4f 	dsb	sy
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	e7fe      	b.n	8006636 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006638:	f001 fd58 	bl	80080ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800663c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800663e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006640:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006644:	2b00      	cmp	r3, #0
 8006646:	d01f      	beq.n	8006688 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006648:	68b9      	ldr	r1, [r7, #8]
 800664a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800664c:	f000 f8f6 	bl	800683c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	1e5a      	subs	r2, r3, #1
 8006654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006656:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00f      	beq.n	8006680 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006662:	3310      	adds	r3, #16
 8006664:	4618      	mov	r0, r3
 8006666:	f000 fe3f 	bl	80072e8 <xTaskRemoveFromEventList>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d007      	beq.n	8006680 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006670:	4b3c      	ldr	r3, [pc, #240]	; (8006764 <xQueueReceive+0x1b4>)
 8006672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006680:	f001 fd62 	bl	8008148 <vPortExitCritical>
				return pdPASS;
 8006684:	2301      	movs	r3, #1
 8006686:	e069      	b.n	800675c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d103      	bne.n	8006696 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800668e:	f001 fd5b 	bl	8008148 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006692:	2300      	movs	r3, #0
 8006694:	e062      	b.n	800675c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006698:	2b00      	cmp	r3, #0
 800669a:	d106      	bne.n	80066aa <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800669c:	f107 0310 	add.w	r3, r7, #16
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fe83 	bl	80073ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066a6:	2301      	movs	r3, #1
 80066a8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066aa:	f001 fd4d 	bl	8008148 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066ae:	f000 fbff 	bl	8006eb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066b2:	f001 fd1b 	bl	80080ec <vPortEnterCritical>
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066bc:	b25b      	sxtb	r3, r3
 80066be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c2:	d103      	bne.n	80066cc <xQueueReceive+0x11c>
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066d2:	b25b      	sxtb	r3, r3
 80066d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d8:	d103      	bne.n	80066e2 <xQueueReceive+0x132>
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066e2:	f001 fd31 	bl	8008148 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066e6:	1d3a      	adds	r2, r7, #4
 80066e8:	f107 0310 	add.w	r3, r7, #16
 80066ec:	4611      	mov	r1, r2
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fe72 	bl	80073d8 <xTaskCheckForTimeOut>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d123      	bne.n	8006742 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066fc:	f000 f916 	bl	800692c <prvIsQueueEmpty>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d017      	beq.n	8006736 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	3324      	adds	r3, #36	; 0x24
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	4611      	mov	r1, r2
 800670e:	4618      	mov	r0, r3
 8006710:	f000 fd9c 	bl	800724c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006714:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006716:	f000 f8b7 	bl	8006888 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800671a:	f000 fbd7 	bl	8006ecc <xTaskResumeAll>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d189      	bne.n	8006638 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006724:	4b0f      	ldr	r3, [pc, #60]	; (8006764 <xQueueReceive+0x1b4>)
 8006726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	f3bf 8f6f 	isb	sy
 8006734:	e780      	b.n	8006638 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006736:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006738:	f000 f8a6 	bl	8006888 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800673c:	f000 fbc6 	bl	8006ecc <xTaskResumeAll>
 8006740:	e77a      	b.n	8006638 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006744:	f000 f8a0 	bl	8006888 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006748:	f000 fbc0 	bl	8006ecc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800674c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800674e:	f000 f8ed 	bl	800692c <prvIsQueueEmpty>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	f43f af6f 	beq.w	8006638 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800675a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800675c:	4618      	mov	r0, r3
 800675e:	3730      	adds	r7, #48	; 0x30
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	e000ed04 	.word	0xe000ed04

08006768 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10d      	bne.n	80067a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d14d      	bne.n	800682a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	4618      	mov	r0, r3
 8006794:	f000 ff7c 	bl	8007690 <xTaskPriorityDisinherit>
 8006798:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	609a      	str	r2, [r3, #8]
 80067a0:	e043      	b.n	800682a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d119      	bne.n	80067dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6858      	ldr	r0, [r3, #4]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	461a      	mov	r2, r3
 80067b2:	68b9      	ldr	r1, [r7, #8]
 80067b4:	f001 ffae 	bl	8008714 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	441a      	add	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d32b      	bcc.n	800682a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	e026      	b.n	800682a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	68d8      	ldr	r0, [r3, #12]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e4:	461a      	mov	r2, r3
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	f001 ff94 	bl	8008714 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f4:	425b      	negs	r3, r3
 80067f6:	441a      	add	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	429a      	cmp	r2, r3
 8006806:	d207      	bcs.n	8006818 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	689a      	ldr	r2, [r3, #8]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	425b      	negs	r3, r3
 8006812:	441a      	add	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d105      	bne.n	800682a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d002      	beq.n	800682a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	3b01      	subs	r3, #1
 8006828:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006832:	697b      	ldr	r3, [r7, #20]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684a:	2b00      	cmp	r3, #0
 800684c:	d018      	beq.n	8006880 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	441a      	add	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68da      	ldr	r2, [r3, #12]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	429a      	cmp	r2, r3
 8006866:	d303      	bcc.n	8006870 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68d9      	ldr	r1, [r3, #12]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	461a      	mov	r2, r3
 800687a:	6838      	ldr	r0, [r7, #0]
 800687c:	f001 ff4a 	bl	8008714 <memcpy>
	}
}
 8006880:	bf00      	nop
 8006882:	3708      	adds	r7, #8
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006890:	f001 fc2c 	bl	80080ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800689a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800689c:	e011      	b.n	80068c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d012      	beq.n	80068cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3324      	adds	r3, #36	; 0x24
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fd1c 	bl	80072e8 <xTaskRemoveFromEventList>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80068b6:	f000 fdef 	bl	8007498 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	3b01      	subs	r3, #1
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	dce9      	bgt.n	800689e <prvUnlockQueue+0x16>
 80068ca:	e000      	b.n	80068ce <prvUnlockQueue+0x46>
					break;
 80068cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	22ff      	movs	r2, #255	; 0xff
 80068d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80068d6:	f001 fc37 	bl	8008148 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80068da:	f001 fc07 	bl	80080ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068e6:	e011      	b.n	800690c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d012      	beq.n	8006916 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	3310      	adds	r3, #16
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 fcf7 	bl	80072e8 <xTaskRemoveFromEventList>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006900:	f000 fdca 	bl	8007498 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006904:	7bbb      	ldrb	r3, [r7, #14]
 8006906:	3b01      	subs	r3, #1
 8006908:	b2db      	uxtb	r3, r3
 800690a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800690c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006910:	2b00      	cmp	r3, #0
 8006912:	dce9      	bgt.n	80068e8 <prvUnlockQueue+0x60>
 8006914:	e000      	b.n	8006918 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006916:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	22ff      	movs	r2, #255	; 0xff
 800691c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006920:	f001 fc12 	bl	8008148 <vPortExitCritical>
}
 8006924:	bf00      	nop
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006934:	f001 fbda 	bl	80080ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693c:	2b00      	cmp	r3, #0
 800693e:	d102      	bne.n	8006946 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006940:	2301      	movs	r3, #1
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	e001      	b.n	800694a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800694a:	f001 fbfd 	bl	8008148 <vPortExitCritical>

	return xReturn;
 800694e:	68fb      	ldr	r3, [r7, #12]
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006960:	f001 fbc4 	bl	80080ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696c:	429a      	cmp	r2, r3
 800696e:	d102      	bne.n	8006976 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006970:	2301      	movs	r3, #1
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e001      	b.n	800697a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800697a:	f001 fbe5 	bl	8008148 <vPortExitCritical>

	return xReturn;
 800697e:	68fb      	ldr	r3, [r7, #12]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	e014      	b.n	80069c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006998:	4a0e      	ldr	r2, [pc, #56]	; (80069d4 <vQueueAddToRegistry+0x4c>)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10b      	bne.n	80069bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80069a4:	490b      	ldr	r1, [pc, #44]	; (80069d4 <vQueueAddToRegistry+0x4c>)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	683a      	ldr	r2, [r7, #0]
 80069aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80069ae:	4a09      	ldr	r2, [pc, #36]	; (80069d4 <vQueueAddToRegistry+0x4c>)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	00db      	lsls	r3, r3, #3
 80069b4:	4413      	add	r3, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80069ba:	e005      	b.n	80069c8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3301      	adds	r3, #1
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2b07      	cmp	r3, #7
 80069c6:	d9e7      	bls.n	8006998 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069c8:	bf00      	nop
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	20005f5c 	.word	0x20005f5c

080069d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b086      	sub	sp, #24
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069e8:	f001 fb80 	bl	80080ec <vPortEnterCritical>
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069f2:	b25b      	sxtb	r3, r3
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d103      	bne.n	8006a02 <vQueueWaitForMessageRestricted+0x2a>
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a08:	b25b      	sxtb	r3, r3
 8006a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a0e:	d103      	bne.n	8006a18 <vQueueWaitForMessageRestricted+0x40>
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a18:	f001 fb96 	bl	8008148 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	3324      	adds	r3, #36	; 0x24
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	68b9      	ldr	r1, [r7, #8]
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fc31 	bl	8007294 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a32:	6978      	ldr	r0, [r7, #20]
 8006a34:	f7ff ff28 	bl	8006888 <prvUnlockQueue>
	}
 8006a38:	bf00      	nop
 8006a3a:	3718      	adds	r7, #24
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08e      	sub	sp, #56	; 0x38
 8006a44:	af04      	add	r7, sp, #16
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
 8006a4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d109      	bne.n	8006a68 <xTaskCreateStatic+0x28>
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	623b      	str	r3, [r7, #32]
 8006a66:	e7fe      	b.n	8006a66 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <xTaskCreateStatic+0x42>
 8006a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a72:	f383 8811 	msr	BASEPRI, r3
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	f3bf 8f4f 	dsb	sy
 8006a7e:	61fb      	str	r3, [r7, #28]
 8006a80:	e7fe      	b.n	8006a80 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a82:	2360      	movs	r3, #96	; 0x60
 8006a84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2b60      	cmp	r3, #96	; 0x60
 8006a8a:	d009      	beq.n	8006aa0 <xTaskCreateStatic+0x60>
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	61bb      	str	r3, [r7, #24]
 8006a9e:	e7fe      	b.n	8006a9e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006aa0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d01e      	beq.n	8006ae6 <xTaskCreateStatic+0xa6>
 8006aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d01b      	beq.n	8006ae6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ab6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	9303      	str	r3, [sp, #12]
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac6:	9302      	str	r3, [sp, #8]
 8006ac8:	f107 0314 	add.w	r3, r7, #20
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	9300      	str	r3, [sp, #0]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	68b9      	ldr	r1, [r7, #8]
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f000 f850 	bl	8006b7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ae0:	f000 f8de 	bl	8006ca0 <prvAddNewTaskToReadyList>
 8006ae4:	e001      	b.n	8006aea <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006aea:	697b      	ldr	r3, [r7, #20]
	}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3728      	adds	r7, #40	; 0x28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08c      	sub	sp, #48	; 0x30
 8006af8:	af04      	add	r7, sp, #16
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	4613      	mov	r3, r2
 8006b02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b04:	88fb      	ldrh	r3, [r7, #6]
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f001 fc09 	bl	8008320 <pvPortMalloc>
 8006b0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00e      	beq.n	8006b34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b16:	2060      	movs	r0, #96	; 0x60
 8006b18:	f001 fc02 	bl	8008320 <pvPortMalloc>
 8006b1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	631a      	str	r2, [r3, #48]	; 0x30
 8006b2a:	e005      	b.n	8006b38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b2c:	6978      	ldr	r0, [r7, #20]
 8006b2e:	f001 fcb9 	bl	80084a4 <vPortFree>
 8006b32:	e001      	b.n	8006b38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d017      	beq.n	8006b6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b46:	88fa      	ldrh	r2, [r7, #6]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	9303      	str	r3, [sp, #12]
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	9302      	str	r3, [sp, #8]
 8006b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68b9      	ldr	r1, [r7, #8]
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 f80e 	bl	8006b7e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b62:	69f8      	ldr	r0, [r7, #28]
 8006b64:	f000 f89c 	bl	8006ca0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	e002      	b.n	8006b74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b74:	69bb      	ldr	r3, [r7, #24]
	}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3720      	adds	r7, #32
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b088      	sub	sp, #32
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	60f8      	str	r0, [r7, #12]
 8006b86:	60b9      	str	r1, [r7, #8]
 8006b88:	607a      	str	r2, [r7, #4]
 8006b8a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	461a      	mov	r2, r3
 8006b96:	21a5      	movs	r1, #165	; 0xa5
 8006b98:	f001 fdc7 	bl	800872a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	f023 0307 	bic.w	r3, r3, #7
 8006bb4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	f003 0307 	and.w	r3, r3, #7
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d009      	beq.n	8006bd4 <prvInitialiseNewTask+0x56>
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	e7fe      	b.n	8006bd2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d01f      	beq.n	8006c1a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bda:	2300      	movs	r3, #0
 8006bdc:	61fb      	str	r3, [r7, #28]
 8006bde:	e012      	b.n	8006c06 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006be0:	68ba      	ldr	r2, [r7, #8]
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	7819      	ldrb	r1, [r3, #0]
 8006be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	4413      	add	r3, r2
 8006bee:	3334      	adds	r3, #52	; 0x34
 8006bf0:	460a      	mov	r2, r1
 8006bf2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d006      	beq.n	8006c0e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	3301      	adds	r3, #1
 8006c04:	61fb      	str	r3, [r7, #28]
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	2b0f      	cmp	r3, #15
 8006c0a:	d9e9      	bls.n	8006be0 <prvInitialiseNewTask+0x62>
 8006c0c:	e000      	b.n	8006c10 <prvInitialiseNewTask+0x92>
			{
				break;
 8006c0e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c18:	e003      	b.n	8006c22 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	2b37      	cmp	r3, #55	; 0x37
 8006c26:	d901      	bls.n	8006c2c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c28:	2337      	movs	r3, #55	; 0x37
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c36:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	3304      	adds	r3, #4
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7ff f994 	bl	8005f70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	3318      	adds	r3, #24
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff f98f 	bl	8005f70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8006c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	2200      	movs	r2, #0
 8006c72:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	68f9      	ldr	r1, [r7, #12]
 8006c80:	69b8      	ldr	r0, [r7, #24]
 8006c82:	f001 f90b 	bl	8007e9c <pxPortInitialiseStack>
 8006c86:	4602      	mov	r2, r0
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d002      	beq.n	8006c98 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c98:	bf00      	nop
 8006c9a:	3720      	adds	r7, #32
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ca8:	f001 fa20 	bl	80080ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cac:	4b2d      	ldr	r3, [pc, #180]	; (8006d64 <prvAddNewTaskToReadyList+0xc4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	4a2c      	ldr	r2, [pc, #176]	; (8006d64 <prvAddNewTaskToReadyList+0xc4>)
 8006cb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cb6:	4b2c      	ldr	r3, [pc, #176]	; (8006d68 <prvAddNewTaskToReadyList+0xc8>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d109      	bne.n	8006cd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cbe:	4a2a      	ldr	r2, [pc, #168]	; (8006d68 <prvAddNewTaskToReadyList+0xc8>)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cc4:	4b27      	ldr	r3, [pc, #156]	; (8006d64 <prvAddNewTaskToReadyList+0xc4>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d110      	bne.n	8006cee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ccc:	f000 fc08 	bl	80074e0 <prvInitialiseTaskLists>
 8006cd0:	e00d      	b.n	8006cee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006cd2:	4b26      	ldr	r3, [pc, #152]	; (8006d6c <prvAddNewTaskToReadyList+0xcc>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d109      	bne.n	8006cee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cda:	4b23      	ldr	r3, [pc, #140]	; (8006d68 <prvAddNewTaskToReadyList+0xc8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d802      	bhi.n	8006cee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ce8:	4a1f      	ldr	r2, [pc, #124]	; (8006d68 <prvAddNewTaskToReadyList+0xc8>)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cee:	4b20      	ldr	r3, [pc, #128]	; (8006d70 <prvAddNewTaskToReadyList+0xd0>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	4a1e      	ldr	r2, [pc, #120]	; (8006d70 <prvAddNewTaskToReadyList+0xd0>)
 8006cf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cf8:	4b1d      	ldr	r3, [pc, #116]	; (8006d70 <prvAddNewTaskToReadyList+0xd0>)
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d04:	4b1b      	ldr	r3, [pc, #108]	; (8006d74 <prvAddNewTaskToReadyList+0xd4>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d903      	bls.n	8006d14 <prvAddNewTaskToReadyList+0x74>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d10:	4a18      	ldr	r2, [pc, #96]	; (8006d74 <prvAddNewTaskToReadyList+0xd4>)
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d18:	4613      	mov	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	4413      	add	r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	4a15      	ldr	r2, [pc, #84]	; (8006d78 <prvAddNewTaskToReadyList+0xd8>)
 8006d22:	441a      	add	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f7ff f92d 	bl	8005f8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d30:	f001 fa0a 	bl	8008148 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d34:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <prvAddNewTaskToReadyList+0xcc>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00e      	beq.n	8006d5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d3c:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <prvAddNewTaskToReadyList+0xc8>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d207      	bcs.n	8006d5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d4a:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <prvAddNewTaskToReadyList+0xdc>)
 8006d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000bc4 	.word	0x20000bc4
 8006d68:	200006f0 	.word	0x200006f0
 8006d6c:	20000bd0 	.word	0x20000bd0
 8006d70:	20000be0 	.word	0x20000be0
 8006d74:	20000bcc 	.word	0x20000bcc
 8006d78:	200006f4 	.word	0x200006f4
 8006d7c:	e000ed04 	.word	0xe000ed04

08006d80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d016      	beq.n	8006dc0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d92:	4b13      	ldr	r3, [pc, #76]	; (8006de0 <vTaskDelay+0x60>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d009      	beq.n	8006dae <vTaskDelay+0x2e>
 8006d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	60bb      	str	r3, [r7, #8]
 8006dac:	e7fe      	b.n	8006dac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006dae:	f000 f87f 	bl	8006eb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006db2:	2100      	movs	r1, #0
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fcd7 	bl	8007768 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006dba:	f000 f887 	bl	8006ecc <xTaskResumeAll>
 8006dbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d107      	bne.n	8006dd6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006dc6:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <vTaskDelay+0x64>)
 8006dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dcc:	601a      	str	r2, [r3, #0]
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dd6:	bf00      	nop
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20000bec 	.word	0x20000bec
 8006de4:	e000ed04 	.word	0xe000ed04

08006de8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08a      	sub	sp, #40	; 0x28
 8006dec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dee:	2300      	movs	r3, #0
 8006df0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006df6:	463a      	mov	r2, r7
 8006df8:	1d39      	adds	r1, r7, #4
 8006dfa:	f107 0308 	add.w	r3, r7, #8
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7ff f862 	bl	8005ec8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68ba      	ldr	r2, [r7, #8]
 8006e0a:	9202      	str	r2, [sp, #8]
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	2300      	movs	r3, #0
 8006e14:	460a      	mov	r2, r1
 8006e16:	4920      	ldr	r1, [pc, #128]	; (8006e98 <vTaskStartScheduler+0xb0>)
 8006e18:	4820      	ldr	r0, [pc, #128]	; (8006e9c <vTaskStartScheduler+0xb4>)
 8006e1a:	f7ff fe11 	bl	8006a40 <xTaskCreateStatic>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	4b1f      	ldr	r3, [pc, #124]	; (8006ea0 <vTaskStartScheduler+0xb8>)
 8006e22:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e24:	4b1e      	ldr	r3, [pc, #120]	; (8006ea0 <vTaskStartScheduler+0xb8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	e001      	b.n	8006e36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d102      	bne.n	8006e42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e3c:	f000 fce8 	bl	8007810 <xTimerCreateTimerTask>
 8006e40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d115      	bne.n	8006e74 <vTaskStartScheduler+0x8c>
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e5a:	4b12      	ldr	r3, [pc, #72]	; (8006ea4 <vTaskStartScheduler+0xbc>)
 8006e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e62:	4b11      	ldr	r3, [pc, #68]	; (8006ea8 <vTaskStartScheduler+0xc0>)
 8006e64:	2201      	movs	r2, #1
 8006e66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e68:	4b10      	ldr	r3, [pc, #64]	; (8006eac <vTaskStartScheduler+0xc4>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e6e:	f001 f89f 	bl	8007fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e72:	e00d      	b.n	8006e90 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7a:	d109      	bne.n	8006e90 <vTaskStartScheduler+0xa8>
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	60fb      	str	r3, [r7, #12]
 8006e8e:	e7fe      	b.n	8006e8e <vTaskStartScheduler+0xa6>
}
 8006e90:	bf00      	nop
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	080087f0 	.word	0x080087f0
 8006e9c:	080074b1 	.word	0x080074b1
 8006ea0:	20000be8 	.word	0x20000be8
 8006ea4:	20000be4 	.word	0x20000be4
 8006ea8:	20000bd0 	.word	0x20000bd0
 8006eac:	20000bc8 	.word	0x20000bc8

08006eb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006eb4:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <vTaskSuspendAll+0x18>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3301      	adds	r3, #1
 8006eba:	4a03      	ldr	r2, [pc, #12]	; (8006ec8 <vTaskSuspendAll+0x18>)
 8006ebc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006ebe:	bf00      	nop
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr
 8006ec8:	20000bec 	.word	0x20000bec

08006ecc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006eda:	4b41      	ldr	r3, [pc, #260]	; (8006fe0 <xTaskResumeAll+0x114>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d109      	bne.n	8006ef6 <xTaskResumeAll+0x2a>
 8006ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee6:	f383 8811 	msr	BASEPRI, r3
 8006eea:	f3bf 8f6f 	isb	sy
 8006eee:	f3bf 8f4f 	dsb	sy
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	e7fe      	b.n	8006ef4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ef6:	f001 f8f9 	bl	80080ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006efa:	4b39      	ldr	r3, [pc, #228]	; (8006fe0 <xTaskResumeAll+0x114>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	3b01      	subs	r3, #1
 8006f00:	4a37      	ldr	r2, [pc, #220]	; (8006fe0 <xTaskResumeAll+0x114>)
 8006f02:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f04:	4b36      	ldr	r3, [pc, #216]	; (8006fe0 <xTaskResumeAll+0x114>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d162      	bne.n	8006fd2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f0c:	4b35      	ldr	r3, [pc, #212]	; (8006fe4 <xTaskResumeAll+0x118>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d05e      	beq.n	8006fd2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f14:	e02f      	b.n	8006f76 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f16:	4b34      	ldr	r3, [pc, #208]	; (8006fe8 <xTaskResumeAll+0x11c>)
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3318      	adds	r3, #24
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff f88e 	bl	8006044 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff f889 	bl	8006044 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f36:	4b2d      	ldr	r3, [pc, #180]	; (8006fec <xTaskResumeAll+0x120>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d903      	bls.n	8006f46 <xTaskResumeAll+0x7a>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	4a2a      	ldr	r2, [pc, #168]	; (8006fec <xTaskResumeAll+0x120>)
 8006f44:	6013      	str	r3, [r2, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4a27      	ldr	r2, [pc, #156]	; (8006ff0 <xTaskResumeAll+0x124>)
 8006f54:	441a      	add	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	4610      	mov	r0, r2
 8006f5e:	f7ff f814 	bl	8005f8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f66:	4b23      	ldr	r3, [pc, #140]	; (8006ff4 <xTaskResumeAll+0x128>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d302      	bcc.n	8006f76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006f70:	4b21      	ldr	r3, [pc, #132]	; (8006ff8 <xTaskResumeAll+0x12c>)
 8006f72:	2201      	movs	r2, #1
 8006f74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f76:	4b1c      	ldr	r3, [pc, #112]	; (8006fe8 <xTaskResumeAll+0x11c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1cb      	bne.n	8006f16 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d001      	beq.n	8006f88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f84:	f000 fb46 	bl	8007614 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f88:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <xTaskResumeAll+0x130>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d010      	beq.n	8006fb6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f94:	f000 f846 	bl	8007024 <xTaskIncrementTick>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006f9e:	4b16      	ldr	r3, [pc, #88]	; (8006ff8 <xTaskResumeAll+0x12c>)
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1f1      	bne.n	8006f94 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006fb0:	4b12      	ldr	r3, [pc, #72]	; (8006ffc <xTaskResumeAll+0x130>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006fb6:	4b10      	ldr	r3, [pc, #64]	; (8006ff8 <xTaskResumeAll+0x12c>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d009      	beq.n	8006fd2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fc2:	4b0f      	ldr	r3, [pc, #60]	; (8007000 <xTaskResumeAll+0x134>)
 8006fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc8:	601a      	str	r2, [r3, #0]
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fd2:	f001 f8b9 	bl	8008148 <vPortExitCritical>

	return xAlreadyYielded;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	20000bec 	.word	0x20000bec
 8006fe4:	20000bc4 	.word	0x20000bc4
 8006fe8:	20000b84 	.word	0x20000b84
 8006fec:	20000bcc 	.word	0x20000bcc
 8006ff0:	200006f4 	.word	0x200006f4
 8006ff4:	200006f0 	.word	0x200006f0
 8006ff8:	20000bd8 	.word	0x20000bd8
 8006ffc:	20000bd4 	.word	0x20000bd4
 8007000:	e000ed04 	.word	0xe000ed04

08007004 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <xTaskGetTickCount+0x1c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007010:	687b      	ldr	r3, [r7, #4]
}
 8007012:	4618      	mov	r0, r3
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	20000bc8 	.word	0x20000bc8

08007024 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800702e:	4b4e      	ldr	r3, [pc, #312]	; (8007168 <xTaskIncrementTick+0x144>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	f040 8088 	bne.w	8007148 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007038:	4b4c      	ldr	r3, [pc, #304]	; (800716c <xTaskIncrementTick+0x148>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	3301      	adds	r3, #1
 800703e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007040:	4a4a      	ldr	r2, [pc, #296]	; (800716c <xTaskIncrementTick+0x148>)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d11f      	bne.n	800708c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800704c:	4b48      	ldr	r3, [pc, #288]	; (8007170 <xTaskIncrementTick+0x14c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d009      	beq.n	800706a <xTaskIncrementTick+0x46>
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	e7fe      	b.n	8007068 <xTaskIncrementTick+0x44>
 800706a:	4b41      	ldr	r3, [pc, #260]	; (8007170 <xTaskIncrementTick+0x14c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	60fb      	str	r3, [r7, #12]
 8007070:	4b40      	ldr	r3, [pc, #256]	; (8007174 <xTaskIncrementTick+0x150>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a3e      	ldr	r2, [pc, #248]	; (8007170 <xTaskIncrementTick+0x14c>)
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	4a3e      	ldr	r2, [pc, #248]	; (8007174 <xTaskIncrementTick+0x150>)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	4b3e      	ldr	r3, [pc, #248]	; (8007178 <xTaskIncrementTick+0x154>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	3301      	adds	r3, #1
 8007084:	4a3c      	ldr	r2, [pc, #240]	; (8007178 <xTaskIncrementTick+0x154>)
 8007086:	6013      	str	r3, [r2, #0]
 8007088:	f000 fac4 	bl	8007614 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800708c:	4b3b      	ldr	r3, [pc, #236]	; (800717c <xTaskIncrementTick+0x158>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	429a      	cmp	r2, r3
 8007094:	d349      	bcc.n	800712a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007096:	4b36      	ldr	r3, [pc, #216]	; (8007170 <xTaskIncrementTick+0x14c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d104      	bne.n	80070aa <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070a0:	4b36      	ldr	r3, [pc, #216]	; (800717c <xTaskIncrementTick+0x158>)
 80070a2:	f04f 32ff 	mov.w	r2, #4294967295
 80070a6:	601a      	str	r2, [r3, #0]
					break;
 80070a8:	e03f      	b.n	800712a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070aa:	4b31      	ldr	r3, [pc, #196]	; (8007170 <xTaskIncrementTick+0x14c>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d203      	bcs.n	80070ca <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070c2:	4a2e      	ldr	r2, [pc, #184]	; (800717c <xTaskIncrementTick+0x158>)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070c8:	e02f      	b.n	800712a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fe ffb8 	bl	8006044 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d004      	beq.n	80070e6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	3318      	adds	r3, #24
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe ffaf 	bl	8006044 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ea:	4b25      	ldr	r3, [pc, #148]	; (8007180 <xTaskIncrementTick+0x15c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d903      	bls.n	80070fa <xTaskIncrementTick+0xd6>
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f6:	4a22      	ldr	r2, [pc, #136]	; (8007180 <xTaskIncrementTick+0x15c>)
 80070f8:	6013      	str	r3, [r2, #0]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4a1f      	ldr	r2, [pc, #124]	; (8007184 <xTaskIncrementTick+0x160>)
 8007108:	441a      	add	r2, r3
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	3304      	adds	r3, #4
 800710e:	4619      	mov	r1, r3
 8007110:	4610      	mov	r0, r2
 8007112:	f7fe ff3a 	bl	8005f8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711a:	4b1b      	ldr	r3, [pc, #108]	; (8007188 <xTaskIncrementTick+0x164>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	429a      	cmp	r2, r3
 8007122:	d3b8      	bcc.n	8007096 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007124:	2301      	movs	r3, #1
 8007126:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007128:	e7b5      	b.n	8007096 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800712a:	4b17      	ldr	r3, [pc, #92]	; (8007188 <xTaskIncrementTick+0x164>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007130:	4914      	ldr	r1, [pc, #80]	; (8007184 <xTaskIncrementTick+0x160>)
 8007132:	4613      	mov	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4413      	add	r3, r2
 8007138:	009b      	lsls	r3, r3, #2
 800713a:	440b      	add	r3, r1
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d907      	bls.n	8007152 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8007142:	2301      	movs	r3, #1
 8007144:	617b      	str	r3, [r7, #20]
 8007146:	e004      	b.n	8007152 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007148:	4b10      	ldr	r3, [pc, #64]	; (800718c <xTaskIncrementTick+0x168>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	3301      	adds	r3, #1
 800714e:	4a0f      	ldr	r2, [pc, #60]	; (800718c <xTaskIncrementTick+0x168>)
 8007150:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007152:	4b0f      	ldr	r3, [pc, #60]	; (8007190 <xTaskIncrementTick+0x16c>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800715a:	2301      	movs	r3, #1
 800715c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800715e:	697b      	ldr	r3, [r7, #20]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	20000bec 	.word	0x20000bec
 800716c:	20000bc8 	.word	0x20000bc8
 8007170:	20000b7c 	.word	0x20000b7c
 8007174:	20000b80 	.word	0x20000b80
 8007178:	20000bdc 	.word	0x20000bdc
 800717c:	20000be4 	.word	0x20000be4
 8007180:	20000bcc 	.word	0x20000bcc
 8007184:	200006f4 	.word	0x200006f4
 8007188:	200006f0 	.word	0x200006f0
 800718c:	20000bd4 	.word	0x20000bd4
 8007190:	20000bd8 	.word	0x20000bd8

08007194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007194:	b480      	push	{r7}
 8007196:	b085      	sub	sp, #20
 8007198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800719a:	4b27      	ldr	r3, [pc, #156]	; (8007238 <vTaskSwitchContext+0xa4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80071a2:	4b26      	ldr	r3, [pc, #152]	; (800723c <vTaskSwitchContext+0xa8>)
 80071a4:	2201      	movs	r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80071a8:	e040      	b.n	800722c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80071aa:	4b24      	ldr	r3, [pc, #144]	; (800723c <vTaskSwitchContext+0xa8>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071b0:	4b23      	ldr	r3, [pc, #140]	; (8007240 <vTaskSwitchContext+0xac>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	e00f      	b.n	80071d8 <vTaskSwitchContext+0x44>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d109      	bne.n	80071d2 <vTaskSwitchContext+0x3e>
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	607b      	str	r3, [r7, #4]
 80071d0:	e7fe      	b.n	80071d0 <vTaskSwitchContext+0x3c>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	491a      	ldr	r1, [pc, #104]	; (8007244 <vTaskSwitchContext+0xb0>)
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4613      	mov	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4413      	add	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	440b      	add	r3, r1
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d0e5      	beq.n	80071b8 <vTaskSwitchContext+0x24>
 80071ec:	68fa      	ldr	r2, [r7, #12]
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4a13      	ldr	r2, [pc, #76]	; (8007244 <vTaskSwitchContext+0xb0>)
 80071f8:	4413      	add	r3, r2
 80071fa:	60bb      	str	r3, [r7, #8]
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	685a      	ldr	r2, [r3, #4]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	605a      	str	r2, [r3, #4]
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	685a      	ldr	r2, [r3, #4]
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	3308      	adds	r3, #8
 800720e:	429a      	cmp	r2, r3
 8007210:	d104      	bne.n	800721c <vTaskSwitchContext+0x88>
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	605a      	str	r2, [r3, #4]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	4a09      	ldr	r2, [pc, #36]	; (8007248 <vTaskSwitchContext+0xb4>)
 8007224:	6013      	str	r3, [r2, #0]
 8007226:	4a06      	ldr	r2, [pc, #24]	; (8007240 <vTaskSwitchContext+0xac>)
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6013      	str	r3, [r2, #0]
}
 800722c:	bf00      	nop
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr
 8007238:	20000bec 	.word	0x20000bec
 800723c:	20000bd8 	.word	0x20000bd8
 8007240:	20000bcc 	.word	0x20000bcc
 8007244:	200006f4 	.word	0x200006f4
 8007248:	200006f0 	.word	0x200006f0

0800724c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d109      	bne.n	8007270 <vTaskPlaceOnEventList+0x24>
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	f383 8811 	msr	BASEPRI, r3
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	f3bf 8f4f 	dsb	sy
 800726c:	60fb      	str	r3, [r7, #12]
 800726e:	e7fe      	b.n	800726e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007270:	4b07      	ldr	r3, [pc, #28]	; (8007290 <vTaskPlaceOnEventList+0x44>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3318      	adds	r3, #24
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7fe feaa 	bl	8005fd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800727e:	2101      	movs	r1, #1
 8007280:	6838      	ldr	r0, [r7, #0]
 8007282:	f000 fa71 	bl	8007768 <prvAddCurrentTaskToDelayedList>
}
 8007286:	bf00      	nop
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	200006f0 	.word	0x200006f0

08007294 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d109      	bne.n	80072ba <vTaskPlaceOnEventListRestricted+0x26>
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	617b      	str	r3, [r7, #20]
 80072b8:	e7fe      	b.n	80072b8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072ba:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <vTaskPlaceOnEventListRestricted+0x50>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3318      	adds	r3, #24
 80072c0:	4619      	mov	r1, r3
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f7fe fe61 	bl	8005f8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d002      	beq.n	80072d4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80072ce:	f04f 33ff 	mov.w	r3, #4294967295
 80072d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	68b8      	ldr	r0, [r7, #8]
 80072d8:	f000 fa46 	bl	8007768 <prvAddCurrentTaskToDelayedList>
	}
 80072dc:	bf00      	nop
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	200006f0 	.word	0x200006f0

080072e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d109      	bne.n	8007312 <xTaskRemoveFromEventList+0x2a>
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	e7fe      	b.n	8007310 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	3318      	adds	r3, #24
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe fe94 	bl	8006044 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800731c:	4b1d      	ldr	r3, [pc, #116]	; (8007394 <xTaskRemoveFromEventList+0xac>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d11d      	bne.n	8007360 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	3304      	adds	r3, #4
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe fe8b 	bl	8006044 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007332:	4b19      	ldr	r3, [pc, #100]	; (8007398 <xTaskRemoveFromEventList+0xb0>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d903      	bls.n	8007342 <xTaskRemoveFromEventList+0x5a>
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733e:	4a16      	ldr	r2, [pc, #88]	; (8007398 <xTaskRemoveFromEventList+0xb0>)
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4a13      	ldr	r2, [pc, #76]	; (800739c <xTaskRemoveFromEventList+0xb4>)
 8007350:	441a      	add	r2, r3
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	3304      	adds	r3, #4
 8007356:	4619      	mov	r1, r3
 8007358:	4610      	mov	r0, r2
 800735a:	f7fe fe16 	bl	8005f8a <vListInsertEnd>
 800735e:	e005      	b.n	800736c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	3318      	adds	r3, #24
 8007364:	4619      	mov	r1, r3
 8007366:	480e      	ldr	r0, [pc, #56]	; (80073a0 <xTaskRemoveFromEventList+0xb8>)
 8007368:	f7fe fe0f 	bl	8005f8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007370:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <xTaskRemoveFromEventList+0xbc>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007376:	429a      	cmp	r2, r3
 8007378:	d905      	bls.n	8007386 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800737a:	2301      	movs	r3, #1
 800737c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800737e:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <xTaskRemoveFromEventList+0xc0>)
 8007380:	2201      	movs	r2, #1
 8007382:	601a      	str	r2, [r3, #0]
 8007384:	e001      	b.n	800738a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007386:	2300      	movs	r3, #0
 8007388:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800738a:	697b      	ldr	r3, [r7, #20]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}
 8007394:	20000bec 	.word	0x20000bec
 8007398:	20000bcc 	.word	0x20000bcc
 800739c:	200006f4 	.word	0x200006f4
 80073a0:	20000b84 	.word	0x20000b84
 80073a4:	200006f0 	.word	0x200006f0
 80073a8:	20000bd8 	.word	0x20000bd8

080073ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073b4:	4b06      	ldr	r3, [pc, #24]	; (80073d0 <vTaskInternalSetTimeOutState+0x24>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073bc:	4b05      	ldr	r3, [pc, #20]	; (80073d4 <vTaskInternalSetTimeOutState+0x28>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	605a      	str	r2, [r3, #4]
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	20000bdc 	.word	0x20000bdc
 80073d4:	20000bc8 	.word	0x20000bc8

080073d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b088      	sub	sp, #32
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d109      	bne.n	80073fc <xTaskCheckForTimeOut+0x24>
 80073e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ec:	f383 8811 	msr	BASEPRI, r3
 80073f0:	f3bf 8f6f 	isb	sy
 80073f4:	f3bf 8f4f 	dsb	sy
 80073f8:	613b      	str	r3, [r7, #16]
 80073fa:	e7fe      	b.n	80073fa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <xTaskCheckForTimeOut+0x3e>
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	e7fe      	b.n	8007414 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8007416:	f000 fe69 	bl	80080ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800741a:	4b1d      	ldr	r3, [pc, #116]	; (8007490 <xTaskCheckForTimeOut+0xb8>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007432:	d102      	bne.n	800743a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007434:	2300      	movs	r3, #0
 8007436:	61fb      	str	r3, [r7, #28]
 8007438:	e023      	b.n	8007482 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	4b15      	ldr	r3, [pc, #84]	; (8007494 <xTaskCheckForTimeOut+0xbc>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d007      	beq.n	8007456 <xTaskCheckForTimeOut+0x7e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	429a      	cmp	r2, r3
 800744e:	d302      	bcc.n	8007456 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007450:	2301      	movs	r3, #1
 8007452:	61fb      	str	r3, [r7, #28]
 8007454:	e015      	b.n	8007482 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	429a      	cmp	r2, r3
 800745e:	d20b      	bcs.n	8007478 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	1ad2      	subs	r2, r2, r3
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7ff ff9d 	bl	80073ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007472:	2300      	movs	r3, #0
 8007474:	61fb      	str	r3, [r7, #28]
 8007476:	e004      	b.n	8007482 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2200      	movs	r2, #0
 800747c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800747e:	2301      	movs	r3, #1
 8007480:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007482:	f000 fe61 	bl	8008148 <vPortExitCritical>

	return xReturn;
 8007486:	69fb      	ldr	r3, [r7, #28]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3720      	adds	r7, #32
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	20000bc8 	.word	0x20000bc8
 8007494:	20000bdc 	.word	0x20000bdc

08007498 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800749c:	4b03      	ldr	r3, [pc, #12]	; (80074ac <vTaskMissedYield+0x14>)
 800749e:	2201      	movs	r2, #1
 80074a0:	601a      	str	r2, [r3, #0]
}
 80074a2:	bf00      	nop
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	20000bd8 	.word	0x20000bd8

080074b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074b8:	f000 f852 	bl	8007560 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074bc:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <prvIdleTask+0x28>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d9f9      	bls.n	80074b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074c4:	4b05      	ldr	r3, [pc, #20]	; (80074dc <prvIdleTask+0x2c>)
 80074c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074d4:	e7f0      	b.n	80074b8 <prvIdleTask+0x8>
 80074d6:	bf00      	nop
 80074d8:	200006f4 	.word	0x200006f4
 80074dc:	e000ed04 	.word	0xe000ed04

080074e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074e6:	2300      	movs	r3, #0
 80074e8:	607b      	str	r3, [r7, #4]
 80074ea:	e00c      	b.n	8007506 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4a12      	ldr	r2, [pc, #72]	; (8007540 <prvInitialiseTaskLists+0x60>)
 80074f8:	4413      	add	r3, r2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fd18 	bl	8005f30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3301      	adds	r3, #1
 8007504:	607b      	str	r3, [r7, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b37      	cmp	r3, #55	; 0x37
 800750a:	d9ef      	bls.n	80074ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800750c:	480d      	ldr	r0, [pc, #52]	; (8007544 <prvInitialiseTaskLists+0x64>)
 800750e:	f7fe fd0f 	bl	8005f30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007512:	480d      	ldr	r0, [pc, #52]	; (8007548 <prvInitialiseTaskLists+0x68>)
 8007514:	f7fe fd0c 	bl	8005f30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007518:	480c      	ldr	r0, [pc, #48]	; (800754c <prvInitialiseTaskLists+0x6c>)
 800751a:	f7fe fd09 	bl	8005f30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800751e:	480c      	ldr	r0, [pc, #48]	; (8007550 <prvInitialiseTaskLists+0x70>)
 8007520:	f7fe fd06 	bl	8005f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007524:	480b      	ldr	r0, [pc, #44]	; (8007554 <prvInitialiseTaskLists+0x74>)
 8007526:	f7fe fd03 	bl	8005f30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800752a:	4b0b      	ldr	r3, [pc, #44]	; (8007558 <prvInitialiseTaskLists+0x78>)
 800752c:	4a05      	ldr	r2, [pc, #20]	; (8007544 <prvInitialiseTaskLists+0x64>)
 800752e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007530:	4b0a      	ldr	r3, [pc, #40]	; (800755c <prvInitialiseTaskLists+0x7c>)
 8007532:	4a05      	ldr	r2, [pc, #20]	; (8007548 <prvInitialiseTaskLists+0x68>)
 8007534:	601a      	str	r2, [r3, #0]
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	200006f4 	.word	0x200006f4
 8007544:	20000b54 	.word	0x20000b54
 8007548:	20000b68 	.word	0x20000b68
 800754c:	20000b84 	.word	0x20000b84
 8007550:	20000b98 	.word	0x20000b98
 8007554:	20000bb0 	.word	0x20000bb0
 8007558:	20000b7c 	.word	0x20000b7c
 800755c:	20000b80 	.word	0x20000b80

08007560 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007566:	e019      	b.n	800759c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007568:	f000 fdc0 	bl	80080ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <prvCheckTasksWaitingTermination+0x4c>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3304      	adds	r3, #4
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe fd63 	bl	8006044 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800757e:	4b0c      	ldr	r3, [pc, #48]	; (80075b0 <prvCheckTasksWaitingTermination+0x50>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3b01      	subs	r3, #1
 8007584:	4a0a      	ldr	r2, [pc, #40]	; (80075b0 <prvCheckTasksWaitingTermination+0x50>)
 8007586:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007588:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <prvCheckTasksWaitingTermination+0x54>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3b01      	subs	r3, #1
 800758e:	4a09      	ldr	r2, [pc, #36]	; (80075b4 <prvCheckTasksWaitingTermination+0x54>)
 8007590:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007592:	f000 fdd9 	bl	8008148 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f80e 	bl	80075b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800759c:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <prvCheckTasksWaitingTermination+0x54>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e1      	bne.n	8007568 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075a4:	bf00      	nop
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000b98 	.word	0x20000b98
 80075b0:	20000bc4 	.word	0x20000bc4
 80075b4:	20000bac 	.word	0x20000bac

080075b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d108      	bne.n	80075dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 ff68 	bl	80084a4 <vPortFree>
				vPortFree( pxTCB );
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 ff65 	bl	80084a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075da:	e017      	b.n	800760c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d103      	bne.n	80075ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 ff5c 	bl	80084a4 <vPortFree>
	}
 80075ec:	e00e      	b.n	800760c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d009      	beq.n	800760c <prvDeleteTCB+0x54>
 80075f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	e7fe      	b.n	800760a <prvDeleteTCB+0x52>
	}
 800760c:	bf00      	nop
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800761a:	4b0c      	ldr	r3, [pc, #48]	; (800764c <prvResetNextTaskUnblockTime+0x38>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d104      	bne.n	800762e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007624:	4b0a      	ldr	r3, [pc, #40]	; (8007650 <prvResetNextTaskUnblockTime+0x3c>)
 8007626:	f04f 32ff 	mov.w	r2, #4294967295
 800762a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800762c:	e008      	b.n	8007640 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800762e:	4b07      	ldr	r3, [pc, #28]	; (800764c <prvResetNextTaskUnblockTime+0x38>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	4a04      	ldr	r2, [pc, #16]	; (8007650 <prvResetNextTaskUnblockTime+0x3c>)
 800763e:	6013      	str	r3, [r2, #0]
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	20000b7c 	.word	0x20000b7c
 8007650:	20000be4 	.word	0x20000be4

08007654 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800765a:	4b0b      	ldr	r3, [pc, #44]	; (8007688 <xTaskGetSchedulerState+0x34>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d102      	bne.n	8007668 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007662:	2301      	movs	r3, #1
 8007664:	607b      	str	r3, [r7, #4]
 8007666:	e008      	b.n	800767a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007668:	4b08      	ldr	r3, [pc, #32]	; (800768c <xTaskGetSchedulerState+0x38>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007670:	2302      	movs	r3, #2
 8007672:	607b      	str	r3, [r7, #4]
 8007674:	e001      	b.n	800767a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007676:	2300      	movs	r3, #0
 8007678:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800767a:	687b      	ldr	r3, [r7, #4]
	}
 800767c:	4618      	mov	r0, r3
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	20000bd0 	.word	0x20000bd0
 800768c:	20000bec 	.word	0x20000bec

08007690 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800769c:	2300      	movs	r3, #0
 800769e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d054      	beq.n	8007750 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076a6:	4b2d      	ldr	r3, [pc, #180]	; (800775c <xTaskPriorityDisinherit+0xcc>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d009      	beq.n	80076c4 <xTaskPriorityDisinherit+0x34>
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	f383 8811 	msr	BASEPRI, r3
 80076b8:	f3bf 8f6f 	isb	sy
 80076bc:	f3bf 8f4f 	dsb	sy
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	e7fe      	b.n	80076c2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d109      	bne.n	80076e0 <xTaskPriorityDisinherit+0x50>
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	60bb      	str	r3, [r7, #8]
 80076de:	e7fe      	b.n	80076de <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e4:	1e5a      	subs	r2, r3, #1
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d02c      	beq.n	8007750 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d128      	bne.n	8007750 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	3304      	adds	r3, #4
 8007702:	4618      	mov	r0, r3
 8007704:	f7fe fc9e 	bl	8006044 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007720:	4b0f      	ldr	r3, [pc, #60]	; (8007760 <xTaskPriorityDisinherit+0xd0>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	429a      	cmp	r2, r3
 8007726:	d903      	bls.n	8007730 <xTaskPriorityDisinherit+0xa0>
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772c:	4a0c      	ldr	r2, [pc, #48]	; (8007760 <xTaskPriorityDisinherit+0xd0>)
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007734:	4613      	mov	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	4413      	add	r3, r2
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4a09      	ldr	r2, [pc, #36]	; (8007764 <xTaskPriorityDisinherit+0xd4>)
 800773e:	441a      	add	r2, r3
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	3304      	adds	r3, #4
 8007744:	4619      	mov	r1, r3
 8007746:	4610      	mov	r0, r2
 8007748:	f7fe fc1f 	bl	8005f8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800774c:	2301      	movs	r3, #1
 800774e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007750:	697b      	ldr	r3, [r7, #20]
	}
 8007752:	4618      	mov	r0, r3
 8007754:	3718      	adds	r7, #24
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	200006f0 	.word	0x200006f0
 8007760:	20000bcc 	.word	0x20000bcc
 8007764:	200006f4 	.word	0x200006f4

08007768 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007772:	4b21      	ldr	r3, [pc, #132]	; (80077f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007778:	4b20      	ldr	r3, [pc, #128]	; (80077fc <prvAddCurrentTaskToDelayedList+0x94>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3304      	adds	r3, #4
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe fc60 	bl	8006044 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800778a:	d10a      	bne.n	80077a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d007      	beq.n	80077a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007792:	4b1a      	ldr	r3, [pc, #104]	; (80077fc <prvAddCurrentTaskToDelayedList+0x94>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3304      	adds	r3, #4
 8007798:	4619      	mov	r1, r3
 800779a:	4819      	ldr	r0, [pc, #100]	; (8007800 <prvAddCurrentTaskToDelayedList+0x98>)
 800779c:	f7fe fbf5 	bl	8005f8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077a0:	e026      	b.n	80077f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4413      	add	r3, r2
 80077a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077aa:	4b14      	ldr	r3, [pc, #80]	; (80077fc <prvAddCurrentTaskToDelayedList+0x94>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d209      	bcs.n	80077ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ba:	4b12      	ldr	r3, [pc, #72]	; (8007804 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	4b0f      	ldr	r3, [pc, #60]	; (80077fc <prvAddCurrentTaskToDelayedList+0x94>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3304      	adds	r3, #4
 80077c4:	4619      	mov	r1, r3
 80077c6:	4610      	mov	r0, r2
 80077c8:	f7fe fc03 	bl	8005fd2 <vListInsert>
}
 80077cc:	e010      	b.n	80077f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ce:	4b0e      	ldr	r3, [pc, #56]	; (8007808 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <prvAddCurrentTaskToDelayedList+0x94>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3304      	adds	r3, #4
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f7fe fbf9 	bl	8005fd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077e0:	4b0a      	ldr	r3, [pc, #40]	; (800780c <prvAddCurrentTaskToDelayedList+0xa4>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d202      	bcs.n	80077f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077ea:	4a08      	ldr	r2, [pc, #32]	; (800780c <prvAddCurrentTaskToDelayedList+0xa4>)
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	6013      	str	r3, [r2, #0]
}
 80077f0:	bf00      	nop
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	20000bc8 	.word	0x20000bc8
 80077fc:	200006f0 	.word	0x200006f0
 8007800:	20000bb0 	.word	0x20000bb0
 8007804:	20000b80 	.word	0x20000b80
 8007808:	20000b7c 	.word	0x20000b7c
 800780c:	20000be4 	.word	0x20000be4

08007810 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08a      	sub	sp, #40	; 0x28
 8007814:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007816:	2300      	movs	r3, #0
 8007818:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800781a:	f000 faff 	bl	8007e1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800781e:	4b1c      	ldr	r3, [pc, #112]	; (8007890 <xTimerCreateTimerTask+0x80>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d021      	beq.n	800786a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800782a:	2300      	movs	r3, #0
 800782c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800782e:	1d3a      	adds	r2, r7, #4
 8007830:	f107 0108 	add.w	r1, r7, #8
 8007834:	f107 030c 	add.w	r3, r7, #12
 8007838:	4618      	mov	r0, r3
 800783a:	f7fe fb5f 	bl	8005efc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800783e:	6879      	ldr	r1, [r7, #4]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	9202      	str	r2, [sp, #8]
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	2302      	movs	r3, #2
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	2300      	movs	r3, #0
 800784e:	460a      	mov	r2, r1
 8007850:	4910      	ldr	r1, [pc, #64]	; (8007894 <xTimerCreateTimerTask+0x84>)
 8007852:	4811      	ldr	r0, [pc, #68]	; (8007898 <xTimerCreateTimerTask+0x88>)
 8007854:	f7ff f8f4 	bl	8006a40 <xTaskCreateStatic>
 8007858:	4602      	mov	r2, r0
 800785a:	4b10      	ldr	r3, [pc, #64]	; (800789c <xTimerCreateTimerTask+0x8c>)
 800785c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800785e:	4b0f      	ldr	r3, [pc, #60]	; (800789c <xTimerCreateTimerTask+0x8c>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007866:	2301      	movs	r3, #1
 8007868:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d109      	bne.n	8007884 <xTimerCreateTimerTask+0x74>
 8007870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	613b      	str	r3, [r7, #16]
 8007882:	e7fe      	b.n	8007882 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007884:	697b      	ldr	r3, [r7, #20]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3718      	adds	r7, #24
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20000c20 	.word	0x20000c20
 8007894:	080087f8 	.word	0x080087f8
 8007898:	080079d1 	.word	0x080079d1
 800789c:	20000c24 	.word	0x20000c24

080078a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b08a      	sub	sp, #40	; 0x28
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d109      	bne.n	80078cc <xTimerGenericCommand+0x2c>
 80078b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078bc:	f383 8811 	msr	BASEPRI, r3
 80078c0:	f3bf 8f6f 	isb	sy
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	623b      	str	r3, [r7, #32]
 80078ca:	e7fe      	b.n	80078ca <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078cc:	4b19      	ldr	r3, [pc, #100]	; (8007934 <xTimerGenericCommand+0x94>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d02a      	beq.n	800792a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2b05      	cmp	r3, #5
 80078e4:	dc18      	bgt.n	8007918 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078e6:	f7ff feb5 	bl	8007654 <xTaskGetSchedulerState>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d109      	bne.n	8007904 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078f0:	4b10      	ldr	r3, [pc, #64]	; (8007934 <xTimerGenericCommand+0x94>)
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	f107 0110 	add.w	r1, r7, #16
 80078f8:	2300      	movs	r3, #0
 80078fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078fc:	f7fe fcca 	bl	8006294 <xQueueGenericSend>
 8007900:	6278      	str	r0, [r7, #36]	; 0x24
 8007902:	e012      	b.n	800792a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007904:	4b0b      	ldr	r3, [pc, #44]	; (8007934 <xTimerGenericCommand+0x94>)
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	f107 0110 	add.w	r1, r7, #16
 800790c:	2300      	movs	r3, #0
 800790e:	2200      	movs	r2, #0
 8007910:	f7fe fcc0 	bl	8006294 <xQueueGenericSend>
 8007914:	6278      	str	r0, [r7, #36]	; 0x24
 8007916:	e008      	b.n	800792a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007918:	4b06      	ldr	r3, [pc, #24]	; (8007934 <xTimerGenericCommand+0x94>)
 800791a:	6818      	ldr	r0, [r3, #0]
 800791c:	f107 0110 	add.w	r1, r7, #16
 8007920:	2300      	movs	r3, #0
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	f7fe fdb0 	bl	8006488 <xQueueGenericSendFromISR>
 8007928:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800792c:	4618      	mov	r0, r3
 800792e:	3728      	adds	r7, #40	; 0x28
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20000c20 	.word	0x20000c20

08007938 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b088      	sub	sp, #32
 800793c:	af02      	add	r7, sp, #8
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007942:	4b22      	ldr	r3, [pc, #136]	; (80079cc <prvProcessExpiredTimer+0x94>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	3304      	adds	r3, #4
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe fb77 	bl	8006044 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800795c:	f003 0304 	and.w	r3, r3, #4
 8007960:	2b00      	cmp	r3, #0
 8007962:	d021      	beq.n	80079a8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	699a      	ldr	r2, [r3, #24]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	18d1      	adds	r1, r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	6978      	ldr	r0, [r7, #20]
 8007972:	f000 f8d1 	bl	8007b18 <prvInsertTimerInActiveList>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d01e      	beq.n	80079ba <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800797c:	2300      	movs	r3, #0
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	2300      	movs	r3, #0
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	2100      	movs	r1, #0
 8007986:	6978      	ldr	r0, [r7, #20]
 8007988:	f7ff ff8a 	bl	80078a0 <xTimerGenericCommand>
 800798c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d112      	bne.n	80079ba <prvProcessExpiredTimer+0x82>
 8007994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	60fb      	str	r3, [r7, #12]
 80079a6:	e7fe      	b.n	80079a6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079ae:	f023 0301 	bic.w	r3, r3, #1
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	6978      	ldr	r0, [r7, #20]
 80079c0:	4798      	blx	r3
}
 80079c2:	bf00      	nop
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20000c18 	.word	0x20000c18

080079d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079d8:	f107 0308 	add.w	r3, r7, #8
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 f857 	bl	8007a90 <prvGetNextExpireTime>
 80079e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	4619      	mov	r1, r3
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 f803 	bl	80079f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079ee:	f000 f8d5 	bl	8007b9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079f2:	e7f1      	b.n	80079d8 <prvTimerTask+0x8>

080079f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079fe:	f7ff fa57 	bl	8006eb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a02:	f107 0308 	add.w	r3, r7, #8
 8007a06:	4618      	mov	r0, r3
 8007a08:	f000 f866 	bl	8007ad8 <prvSampleTimeNow>
 8007a0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d130      	bne.n	8007a76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d10a      	bne.n	8007a30 <prvProcessTimerOrBlockTask+0x3c>
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d806      	bhi.n	8007a30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a22:	f7ff fa53 	bl	8006ecc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a26:	68f9      	ldr	r1, [r7, #12]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff ff85 	bl	8007938 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a2e:	e024      	b.n	8007a7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d008      	beq.n	8007a48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a36:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <prvProcessTimerOrBlockTask+0x90>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <prvProcessTimerOrBlockTask+0x50>
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <prvProcessTimerOrBlockTask+0x52>
 8007a44:	2300      	movs	r3, #0
 8007a46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a48:	4b0f      	ldr	r3, [pc, #60]	; (8007a88 <prvProcessTimerOrBlockTask+0x94>)
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	683a      	ldr	r2, [r7, #0]
 8007a54:	4619      	mov	r1, r3
 8007a56:	f7fe ffbf 	bl	80069d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a5a:	f7ff fa37 	bl	8006ecc <xTaskResumeAll>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d10a      	bne.n	8007a7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a64:	4b09      	ldr	r3, [pc, #36]	; (8007a8c <prvProcessTimerOrBlockTask+0x98>)
 8007a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	f3bf 8f6f 	isb	sy
}
 8007a74:	e001      	b.n	8007a7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a76:	f7ff fa29 	bl	8006ecc <xTaskResumeAll>
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000c1c 	.word	0x20000c1c
 8007a88:	20000c20 	.word	0x20000c20
 8007a8c:	e000ed04 	.word	0xe000ed04

08007a90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a90:	b480      	push	{r7}
 8007a92:	b085      	sub	sp, #20
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a98:	4b0e      	ldr	r3, [pc, #56]	; (8007ad4 <prvGetNextExpireTime+0x44>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <prvGetNextExpireTime+0x16>
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	e000      	b.n	8007aa8 <prvGetNextExpireTime+0x18>
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d105      	bne.n	8007ac0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ab4:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <prvGetNextExpireTime+0x44>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	60fb      	str	r3, [r7, #12]
 8007abe:	e001      	b.n	8007ac4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	20000c18 	.word	0x20000c18

08007ad8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ae0:	f7ff fa90 	bl	8007004 <xTaskGetTickCount>
 8007ae4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	; (8007b14 <prvSampleTimeNow+0x3c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d205      	bcs.n	8007afc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007af0:	f000 f930 	bl	8007d54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	e002      	b.n	8007b02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b02:	4a04      	ldr	r2, [pc, #16]	; (8007b14 <prvSampleTimeNow+0x3c>)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b08:	68fb      	ldr	r3, [r7, #12]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000c28 	.word	0x20000c28

08007b18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
 8007b24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b26:	2300      	movs	r3, #0
 8007b28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d812      	bhi.n	8007b64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	1ad2      	subs	r2, r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d302      	bcc.n	8007b52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	617b      	str	r3, [r7, #20]
 8007b50:	e01b      	b.n	8007b8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b52:	4b10      	ldr	r3, [pc, #64]	; (8007b94 <prvInsertTimerInActiveList+0x7c>)
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3304      	adds	r3, #4
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	f7fe fa38 	bl	8005fd2 <vListInsert>
 8007b62:	e012      	b.n	8007b8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d206      	bcs.n	8007b7a <prvInsertTimerInActiveList+0x62>
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d302      	bcc.n	8007b7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b74:	2301      	movs	r3, #1
 8007b76:	617b      	str	r3, [r7, #20]
 8007b78:	e007      	b.n	8007b8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b7a:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <prvInsertTimerInActiveList+0x80>)
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3304      	adds	r3, #4
 8007b82:	4619      	mov	r1, r3
 8007b84:	4610      	mov	r0, r2
 8007b86:	f7fe fa24 	bl	8005fd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b8a:	697b      	ldr	r3, [r7, #20]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3718      	adds	r7, #24
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	20000c1c 	.word	0x20000c1c
 8007b98:	20000c18 	.word	0x20000c18

08007b9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08e      	sub	sp, #56	; 0x38
 8007ba0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ba2:	e0c6      	b.n	8007d32 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	da17      	bge.n	8007bda <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007baa:	1d3b      	adds	r3, r7, #4
 8007bac:	3304      	adds	r3, #4
 8007bae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d109      	bne.n	8007bca <prvProcessReceivedCommands+0x2e>
 8007bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bba:	f383 8811 	msr	BASEPRI, r3
 8007bbe:	f3bf 8f6f 	isb	sy
 8007bc2:	f3bf 8f4f 	dsb	sy
 8007bc6:	61fb      	str	r3, [r7, #28]
 8007bc8:	e7fe      	b.n	8007bc8 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd0:	6850      	ldr	r0, [r2, #4]
 8007bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd4:	6892      	ldr	r2, [r2, #8]
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f2c0 80a7 	blt.w	8007d30 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d004      	beq.n	8007bf8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf0:	3304      	adds	r3, #4
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fe fa26 	bl	8006044 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bf8:	463b      	mov	r3, r7
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff ff6c 	bl	8007ad8 <prvSampleTimeNow>
 8007c00:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2b09      	cmp	r3, #9
 8007c06:	f200 8094 	bhi.w	8007d32 <prvProcessReceivedCommands+0x196>
 8007c0a:	a201      	add	r2, pc, #4	; (adr r2, 8007c10 <prvProcessReceivedCommands+0x74>)
 8007c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c10:	08007c39 	.word	0x08007c39
 8007c14:	08007c39 	.word	0x08007c39
 8007c18:	08007c39 	.word	0x08007c39
 8007c1c:	08007cab 	.word	0x08007cab
 8007c20:	08007cbf 	.word	0x08007cbf
 8007c24:	08007d07 	.word	0x08007d07
 8007c28:	08007c39 	.word	0x08007c39
 8007c2c:	08007c39 	.word	0x08007c39
 8007c30:	08007cab 	.word	0x08007cab
 8007c34:	08007cbf 	.word	0x08007cbf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c3e:	f043 0301 	orr.w	r3, r3, #1
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c4a:	68ba      	ldr	r2, [r7, #8]
 8007c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	18d1      	adds	r1, r2, r3
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c58:	f7ff ff5e 	bl	8007b18 <prvInsertTimerInActiveList>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d067      	beq.n	8007d32 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	6a1b      	ldr	r3, [r3, #32]
 8007c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c70:	f003 0304 	and.w	r3, r3, #4
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d05c      	beq.n	8007d32 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	441a      	add	r2, r3
 8007c80:	2300      	movs	r3, #0
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	2300      	movs	r3, #0
 8007c86:	2100      	movs	r1, #0
 8007c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c8a:	f7ff fe09 	bl	80078a0 <xTimerGenericCommand>
 8007c8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d14d      	bne.n	8007d32 <prvProcessReceivedCommands+0x196>
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	61bb      	str	r3, [r7, #24]
 8007ca8:	e7fe      	b.n	8007ca8 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cb0:	f023 0301 	bic.w	r3, r3, #1
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007cbc:	e039      	b.n	8007d32 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cc4:	f043 0301 	orr.w	r3, r3, #1
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ccc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d109      	bne.n	8007cf2 <prvProcessReceivedCommands+0x156>
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	617b      	str	r3, [r7, #20]
 8007cf0:	e7fe      	b.n	8007cf0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	699a      	ldr	r2, [r3, #24]
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	18d1      	adds	r1, r2, r3
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d00:	f7ff ff0a 	bl	8007b18 <prvInsertTimerInActiveList>
					break;
 8007d04:	e015      	b.n	8007d32 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d0c:	f003 0302 	and.w	r3, r3, #2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d103      	bne.n	8007d1c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8007d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d16:	f000 fbc5 	bl	80084a4 <vPortFree>
 8007d1a:	e00a      	b.n	8007d32 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d22:	f023 0301 	bic.w	r3, r3, #1
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d2e:	e000      	b.n	8007d32 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d32:	4b07      	ldr	r3, [pc, #28]	; (8007d50 <prvProcessReceivedCommands+0x1b4>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	1d39      	adds	r1, r7, #4
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fc38 	bl	80065b0 <xQueueReceive>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f47f af2e 	bne.w	8007ba4 <prvProcessReceivedCommands+0x8>
	}
}
 8007d48:	bf00      	nop
 8007d4a:	3730      	adds	r7, #48	; 0x30
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	20000c20 	.word	0x20000c20

08007d54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b088      	sub	sp, #32
 8007d58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d5a:	e047      	b.n	8007dec <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d5c:	4b2d      	ldr	r3, [pc, #180]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d66:	4b2b      	ldr	r3, [pc, #172]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fe f965 	bl	8006044 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d02d      	beq.n	8007dec <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	4413      	add	r3, r2
 8007d98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d90e      	bls.n	8007dc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dae:	4b19      	ldr	r3, [pc, #100]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3304      	adds	r3, #4
 8007db6:	4619      	mov	r1, r3
 8007db8:	4610      	mov	r0, r2
 8007dba:	f7fe f90a 	bl	8005fd2 <vListInsert>
 8007dbe:	e015      	b.n	8007dec <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	2100      	movs	r1, #0
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f7ff fd68 	bl	80078a0 <xTimerGenericCommand>
 8007dd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d109      	bne.n	8007dec <prvSwitchTimerLists+0x98>
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	603b      	str	r3, [r7, #0]
 8007dea:	e7fe      	b.n	8007dea <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dec:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1b2      	bne.n	8007d5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007df6:	4b07      	ldr	r3, [pc, #28]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007dfc:	4b06      	ldr	r3, [pc, #24]	; (8007e18 <prvSwitchTimerLists+0xc4>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a04      	ldr	r2, [pc, #16]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007e02:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e04:	4a04      	ldr	r2, [pc, #16]	; (8007e18 <prvSwitchTimerLists+0xc4>)
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	6013      	str	r3, [r2, #0]
}
 8007e0a:	bf00      	nop
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20000c18 	.word	0x20000c18
 8007e18:	20000c1c 	.word	0x20000c1c

08007e1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e22:	f000 f963 	bl	80080ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e26:	4b15      	ldr	r3, [pc, #84]	; (8007e7c <prvCheckForValidListAndQueue+0x60>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d120      	bne.n	8007e70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e2e:	4814      	ldr	r0, [pc, #80]	; (8007e80 <prvCheckForValidListAndQueue+0x64>)
 8007e30:	f7fe f87e 	bl	8005f30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e34:	4813      	ldr	r0, [pc, #76]	; (8007e84 <prvCheckForValidListAndQueue+0x68>)
 8007e36:	f7fe f87b 	bl	8005f30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e3a:	4b13      	ldr	r3, [pc, #76]	; (8007e88 <prvCheckForValidListAndQueue+0x6c>)
 8007e3c:	4a10      	ldr	r2, [pc, #64]	; (8007e80 <prvCheckForValidListAndQueue+0x64>)
 8007e3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e40:	4b12      	ldr	r3, [pc, #72]	; (8007e8c <prvCheckForValidListAndQueue+0x70>)
 8007e42:	4a10      	ldr	r2, [pc, #64]	; (8007e84 <prvCheckForValidListAndQueue+0x68>)
 8007e44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e46:	2300      	movs	r3, #0
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <prvCheckForValidListAndQueue+0x74>)
 8007e4c:	4a11      	ldr	r2, [pc, #68]	; (8007e94 <prvCheckForValidListAndQueue+0x78>)
 8007e4e:	2110      	movs	r1, #16
 8007e50:	200a      	movs	r0, #10
 8007e52:	f7fe f989 	bl	8006168 <xQueueGenericCreateStatic>
 8007e56:	4602      	mov	r2, r0
 8007e58:	4b08      	ldr	r3, [pc, #32]	; (8007e7c <prvCheckForValidListAndQueue+0x60>)
 8007e5a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e5c:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <prvCheckForValidListAndQueue+0x60>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e64:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <prvCheckForValidListAndQueue+0x60>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	490b      	ldr	r1, [pc, #44]	; (8007e98 <prvCheckForValidListAndQueue+0x7c>)
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe fd8c 	bl	8006988 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e70:	f000 f96a 	bl	8008148 <vPortExitCritical>
}
 8007e74:	bf00      	nop
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20000c20 	.word	0x20000c20
 8007e80:	20000bf0 	.word	0x20000bf0
 8007e84:	20000c04 	.word	0x20000c04
 8007e88:	20000c18 	.word	0x20000c18
 8007e8c:	20000c1c 	.word	0x20000c1c
 8007e90:	20000ccc 	.word	0x20000ccc
 8007e94:	20000c2c 	.word	0x20000c2c
 8007e98:	08008800 	.word	0x08008800

08007e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3b04      	subs	r3, #4
 8007eac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3b04      	subs	r3, #4
 8007eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	f023 0201 	bic.w	r2, r3, #1
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3b04      	subs	r3, #4
 8007eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ecc:	4a0c      	ldr	r2, [pc, #48]	; (8007f00 <pxPortInitialiseStack+0x64>)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3b14      	subs	r3, #20
 8007ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3b04      	subs	r3, #4
 8007ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f06f 0202 	mvn.w	r2, #2
 8007eea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3b20      	subs	r3, #32
 8007ef0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	08007f05 	.word	0x08007f05

08007f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f0e:	4b11      	ldr	r3, [pc, #68]	; (8007f54 <prvTaskExitError+0x50>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f16:	d009      	beq.n	8007f2c <prvTaskExitError+0x28>
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	60fb      	str	r3, [r7, #12]
 8007f2a:	e7fe      	b.n	8007f2a <prvTaskExitError+0x26>
 8007f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f30:	f383 8811 	msr	BASEPRI, r3
 8007f34:	f3bf 8f6f 	isb	sy
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f3e:	bf00      	nop
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d0fc      	beq.n	8007f40 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	2000000c 	.word	0x2000000c
	...

08007f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f60:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <pxCurrentTCBConst2>)
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	6808      	ldr	r0, [r1, #0]
 8007f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6a:	f380 8809 	msr	PSP, r0
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f380 8811 	msr	BASEPRI, r0
 8007f7a:	4770      	bx	lr
 8007f7c:	f3af 8000 	nop.w

08007f80 <pxCurrentTCBConst2>:
 8007f80:	200006f0 	.word	0x200006f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop

08007f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f88:	4808      	ldr	r0, [pc, #32]	; (8007fac <prvPortStartFirstTask+0x24>)
 8007f8a:	6800      	ldr	r0, [r0, #0]
 8007f8c:	6800      	ldr	r0, [r0, #0]
 8007f8e:	f380 8808 	msr	MSP, r0
 8007f92:	f04f 0000 	mov.w	r0, #0
 8007f96:	f380 8814 	msr	CONTROL, r0
 8007f9a:	b662      	cpsie	i
 8007f9c:	b661      	cpsie	f
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	df00      	svc	0
 8007fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007faa:	bf00      	nop
 8007fac:	e000ed08 	.word	0xe000ed08

08007fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fb6:	4b44      	ldr	r3, [pc, #272]	; (80080c8 <xPortStartScheduler+0x118>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a44      	ldr	r2, [pc, #272]	; (80080cc <xPortStartScheduler+0x11c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d109      	bne.n	8007fd4 <xPortStartScheduler+0x24>
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	613b      	str	r3, [r7, #16]
 8007fd2:	e7fe      	b.n	8007fd2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fd4:	4b3c      	ldr	r3, [pc, #240]	; (80080c8 <xPortStartScheduler+0x118>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a3d      	ldr	r2, [pc, #244]	; (80080d0 <xPortStartScheduler+0x120>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d109      	bne.n	8007ff2 <xPortStartScheduler+0x42>
 8007fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe2:	f383 8811 	msr	BASEPRI, r3
 8007fe6:	f3bf 8f6f 	isb	sy
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	e7fe      	b.n	8007ff0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ff2:	4b38      	ldr	r3, [pc, #224]	; (80080d4 <xPortStartScheduler+0x124>)
 8007ff4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	22ff      	movs	r2, #255	; 0xff
 8008002:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	b2db      	uxtb	r3, r3
 800800a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800800c:	78fb      	ldrb	r3, [r7, #3]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008014:	b2da      	uxtb	r2, r3
 8008016:	4b30      	ldr	r3, [pc, #192]	; (80080d8 <xPortStartScheduler+0x128>)
 8008018:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800801a:	4b30      	ldr	r3, [pc, #192]	; (80080dc <xPortStartScheduler+0x12c>)
 800801c:	2207      	movs	r2, #7
 800801e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008020:	e009      	b.n	8008036 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008022:	4b2e      	ldr	r3, [pc, #184]	; (80080dc <xPortStartScheduler+0x12c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3b01      	subs	r3, #1
 8008028:	4a2c      	ldr	r2, [pc, #176]	; (80080dc <xPortStartScheduler+0x12c>)
 800802a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800802c:	78fb      	ldrb	r3, [r7, #3]
 800802e:	b2db      	uxtb	r3, r3
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	b2db      	uxtb	r3, r3
 8008034:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803e:	2b80      	cmp	r3, #128	; 0x80
 8008040:	d0ef      	beq.n	8008022 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008042:	4b26      	ldr	r3, [pc, #152]	; (80080dc <xPortStartScheduler+0x12c>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f1c3 0307 	rsb	r3, r3, #7
 800804a:	2b04      	cmp	r3, #4
 800804c:	d009      	beq.n	8008062 <xPortStartScheduler+0xb2>
 800804e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	60bb      	str	r3, [r7, #8]
 8008060:	e7fe      	b.n	8008060 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008062:	4b1e      	ldr	r3, [pc, #120]	; (80080dc <xPortStartScheduler+0x12c>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	021b      	lsls	r3, r3, #8
 8008068:	4a1c      	ldr	r2, [pc, #112]	; (80080dc <xPortStartScheduler+0x12c>)
 800806a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800806c:	4b1b      	ldr	r3, [pc, #108]	; (80080dc <xPortStartScheduler+0x12c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008074:	4a19      	ldr	r2, [pc, #100]	; (80080dc <xPortStartScheduler+0x12c>)
 8008076:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	b2da      	uxtb	r2, r3
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008080:	4b17      	ldr	r3, [pc, #92]	; (80080e0 <xPortStartScheduler+0x130>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a16      	ldr	r2, [pc, #88]	; (80080e0 <xPortStartScheduler+0x130>)
 8008086:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800808a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800808c:	4b14      	ldr	r3, [pc, #80]	; (80080e0 <xPortStartScheduler+0x130>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a13      	ldr	r2, [pc, #76]	; (80080e0 <xPortStartScheduler+0x130>)
 8008092:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008096:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008098:	f000 f8d6 	bl	8008248 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800809c:	4b11      	ldr	r3, [pc, #68]	; (80080e4 <xPortStartScheduler+0x134>)
 800809e:	2200      	movs	r2, #0
 80080a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080a2:	f000 f8f5 	bl	8008290 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080a6:	4b10      	ldr	r3, [pc, #64]	; (80080e8 <xPortStartScheduler+0x138>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a0f      	ldr	r2, [pc, #60]	; (80080e8 <xPortStartScheduler+0x138>)
 80080ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80080b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080b2:	f7ff ff69 	bl	8007f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080b6:	f7ff f86d 	bl	8007194 <vTaskSwitchContext>
	prvTaskExitError();
 80080ba:	f7ff ff23 	bl	8007f04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	e000ed00 	.word	0xe000ed00
 80080cc:	410fc271 	.word	0x410fc271
 80080d0:	410fc270 	.word	0x410fc270
 80080d4:	e000e400 	.word	0xe000e400
 80080d8:	20000d1c 	.word	0x20000d1c
 80080dc:	20000d20 	.word	0x20000d20
 80080e0:	e000ed20 	.word	0xe000ed20
 80080e4:	2000000c 	.word	0x2000000c
 80080e8:	e000ef34 	.word	0xe000ef34

080080ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f6:	f383 8811 	msr	BASEPRI, r3
 80080fa:	f3bf 8f6f 	isb	sy
 80080fe:	f3bf 8f4f 	dsb	sy
 8008102:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008104:	4b0e      	ldr	r3, [pc, #56]	; (8008140 <vPortEnterCritical+0x54>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3301      	adds	r3, #1
 800810a:	4a0d      	ldr	r2, [pc, #52]	; (8008140 <vPortEnterCritical+0x54>)
 800810c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800810e:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <vPortEnterCritical+0x54>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b01      	cmp	r3, #1
 8008114:	d10e      	bne.n	8008134 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008116:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <vPortEnterCritical+0x58>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b00      	cmp	r3, #0
 800811e:	d009      	beq.n	8008134 <vPortEnterCritical+0x48>
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	603b      	str	r3, [r7, #0]
 8008132:	e7fe      	b.n	8008132 <vPortEnterCritical+0x46>
	}
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr
 8008140:	2000000c 	.word	0x2000000c
 8008144:	e000ed04 	.word	0xe000ed04

08008148 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800814e:	4b11      	ldr	r3, [pc, #68]	; (8008194 <vPortExitCritical+0x4c>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d109      	bne.n	800816a <vPortExitCritical+0x22>
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	f383 8811 	msr	BASEPRI, r3
 800815e:	f3bf 8f6f 	isb	sy
 8008162:	f3bf 8f4f 	dsb	sy
 8008166:	607b      	str	r3, [r7, #4]
 8008168:	e7fe      	b.n	8008168 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800816a:	4b0a      	ldr	r3, [pc, #40]	; (8008194 <vPortExitCritical+0x4c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	3b01      	subs	r3, #1
 8008170:	4a08      	ldr	r2, [pc, #32]	; (8008194 <vPortExitCritical+0x4c>)
 8008172:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008174:	4b07      	ldr	r3, [pc, #28]	; (8008194 <vPortExitCritical+0x4c>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d104      	bne.n	8008186 <vPortExitCritical+0x3e>
 800817c:	2300      	movs	r3, #0
 800817e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008186:	bf00      	nop
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	2000000c 	.word	0x2000000c
	...

080081a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081a0:	f3ef 8009 	mrs	r0, PSP
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	4b15      	ldr	r3, [pc, #84]	; (8008200 <pxCurrentTCBConst>)
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	f01e 0f10 	tst.w	lr, #16
 80081b0:	bf08      	it	eq
 80081b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	6010      	str	r0, [r2, #0]
 80081bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081c4:	f380 8811 	msr	BASEPRI, r0
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f7fe ffe0 	bl	8007194 <vTaskSwitchContext>
 80081d4:	f04f 0000 	mov.w	r0, #0
 80081d8:	f380 8811 	msr	BASEPRI, r0
 80081dc:	bc09      	pop	{r0, r3}
 80081de:	6819      	ldr	r1, [r3, #0]
 80081e0:	6808      	ldr	r0, [r1, #0]
 80081e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e6:	f01e 0f10 	tst.w	lr, #16
 80081ea:	bf08      	it	eq
 80081ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081f0:	f380 8809 	msr	PSP, r0
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	f3af 8000 	nop.w

08008200 <pxCurrentTCBConst>:
 8008200:	200006f0 	.word	0x200006f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop

08008208 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008220:	f7fe ff00 	bl	8007024 <xTaskIncrementTick>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800822a:	4b06      	ldr	r3, [pc, #24]	; (8008244 <SysTick_Handler+0x3c>)
 800822c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	2300      	movs	r3, #0
 8008234:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800823c:	bf00      	nop
 800823e:	3708      	adds	r7, #8
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	e000ed04 	.word	0xe000ed04

08008248 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008248:	b480      	push	{r7}
 800824a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800824c:	4b0b      	ldr	r3, [pc, #44]	; (800827c <vPortSetupTimerInterrupt+0x34>)
 800824e:	2200      	movs	r2, #0
 8008250:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008252:	4b0b      	ldr	r3, [pc, #44]	; (8008280 <vPortSetupTimerInterrupt+0x38>)
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008258:	4b0a      	ldr	r3, [pc, #40]	; (8008284 <vPortSetupTimerInterrupt+0x3c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a0a      	ldr	r2, [pc, #40]	; (8008288 <vPortSetupTimerInterrupt+0x40>)
 800825e:	fba2 2303 	umull	r2, r3, r2, r3
 8008262:	099b      	lsrs	r3, r3, #6
 8008264:	4a09      	ldr	r2, [pc, #36]	; (800828c <vPortSetupTimerInterrupt+0x44>)
 8008266:	3b01      	subs	r3, #1
 8008268:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800826a:	4b04      	ldr	r3, [pc, #16]	; (800827c <vPortSetupTimerInterrupt+0x34>)
 800826c:	2207      	movs	r2, #7
 800826e:	601a      	str	r2, [r3, #0]
}
 8008270:	bf00      	nop
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr
 800827a:	bf00      	nop
 800827c:	e000e010 	.word	0xe000e010
 8008280:	e000e018 	.word	0xe000e018
 8008284:	20000000 	.word	0x20000000
 8008288:	10624dd3 	.word	0x10624dd3
 800828c:	e000e014 	.word	0xe000e014

08008290 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008290:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80082a0 <vPortEnableVFP+0x10>
 8008294:	6801      	ldr	r1, [r0, #0]
 8008296:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800829a:	6001      	str	r1, [r0, #0]
 800829c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800829e:	bf00      	nop
 80082a0:	e000ed88 	.word	0xe000ed88

080082a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082aa:	f3ef 8305 	mrs	r3, IPSR
 80082ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2b0f      	cmp	r3, #15
 80082b4:	d913      	bls.n	80082de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082b6:	4a16      	ldr	r2, [pc, #88]	; (8008310 <vPortValidateInterruptPriority+0x6c>)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4413      	add	r3, r2
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082c0:	4b14      	ldr	r3, [pc, #80]	; (8008314 <vPortValidateInterruptPriority+0x70>)
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	7afa      	ldrb	r2, [r7, #11]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d209      	bcs.n	80082de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	607b      	str	r3, [r7, #4]
 80082dc:	e7fe      	b.n	80082dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082de:	4b0e      	ldr	r3, [pc, #56]	; (8008318 <vPortValidateInterruptPriority+0x74>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082e6:	4b0d      	ldr	r3, [pc, #52]	; (800831c <vPortValidateInterruptPriority+0x78>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d909      	bls.n	8008302 <vPortValidateInterruptPriority+0x5e>
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	603b      	str	r3, [r7, #0]
 8008300:	e7fe      	b.n	8008300 <vPortValidateInterruptPriority+0x5c>
	}
 8008302:	bf00      	nop
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	e000e3f0 	.word	0xe000e3f0
 8008314:	20000d1c 	.word	0x20000d1c
 8008318:	e000ed0c 	.word	0xe000ed0c
 800831c:	20000d20 	.word	0x20000d20

08008320 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08a      	sub	sp, #40	; 0x28
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008328:	2300      	movs	r3, #0
 800832a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800832c:	f7fe fdc0 	bl	8006eb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008330:	4b57      	ldr	r3, [pc, #348]	; (8008490 <pvPortMalloc+0x170>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008338:	f000 f90c 	bl	8008554 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800833c:	4b55      	ldr	r3, [pc, #340]	; (8008494 <pvPortMalloc+0x174>)
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4013      	ands	r3, r2
 8008344:	2b00      	cmp	r3, #0
 8008346:	f040 808c 	bne.w	8008462 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d01c      	beq.n	800838a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008350:	2208      	movs	r2, #8
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4413      	add	r3, r2
 8008356:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f003 0307 	and.w	r3, r3, #7
 800835e:	2b00      	cmp	r3, #0
 8008360:	d013      	beq.n	800838a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f023 0307 	bic.w	r3, r3, #7
 8008368:	3308      	adds	r3, #8
 800836a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f003 0307 	and.w	r3, r3, #7
 8008372:	2b00      	cmp	r3, #0
 8008374:	d009      	beq.n	800838a <pvPortMalloc+0x6a>
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	e7fe      	b.n	8008388 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d068      	beq.n	8008462 <pvPortMalloc+0x142>
 8008390:	4b41      	ldr	r3, [pc, #260]	; (8008498 <pvPortMalloc+0x178>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	429a      	cmp	r2, r3
 8008398:	d863      	bhi.n	8008462 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800839a:	4b40      	ldr	r3, [pc, #256]	; (800849c <pvPortMalloc+0x17c>)
 800839c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800839e:	4b3f      	ldr	r3, [pc, #252]	; (800849c <pvPortMalloc+0x17c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083a4:	e004      	b.n	80083b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d903      	bls.n	80083c2 <pvPortMalloc+0xa2>
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1f1      	bne.n	80083a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083c2:	4b33      	ldr	r3, [pc, #204]	; (8008490 <pvPortMalloc+0x170>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d04a      	beq.n	8008462 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2208      	movs	r2, #8
 80083d2:	4413      	add	r3, r2
 80083d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	685a      	ldr	r2, [r3, #4]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	1ad2      	subs	r2, r2, r3
 80083e6:	2308      	movs	r3, #8
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d91e      	bls.n	800842c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4413      	add	r3, r2
 80083f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083f6:	69bb      	ldr	r3, [r7, #24]
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d009      	beq.n	8008414 <pvPortMalloc+0xf4>
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	613b      	str	r3, [r7, #16]
 8008412:	e7fe      	b.n	8008412 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	1ad2      	subs	r2, r2, r3
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008426:	69b8      	ldr	r0, [r7, #24]
 8008428:	f000 f8f6 	bl	8008618 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800842c:	4b1a      	ldr	r3, [pc, #104]	; (8008498 <pvPortMalloc+0x178>)
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	4a18      	ldr	r2, [pc, #96]	; (8008498 <pvPortMalloc+0x178>)
 8008438:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800843a:	4b17      	ldr	r3, [pc, #92]	; (8008498 <pvPortMalloc+0x178>)
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	4b18      	ldr	r3, [pc, #96]	; (80084a0 <pvPortMalloc+0x180>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	429a      	cmp	r2, r3
 8008444:	d203      	bcs.n	800844e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008446:	4b14      	ldr	r3, [pc, #80]	; (8008498 <pvPortMalloc+0x178>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a15      	ldr	r2, [pc, #84]	; (80084a0 <pvPortMalloc+0x180>)
 800844c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	685a      	ldr	r2, [r3, #4]
 8008452:	4b10      	ldr	r3, [pc, #64]	; (8008494 <pvPortMalloc+0x174>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	431a      	orrs	r2, r3
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	2200      	movs	r2, #0
 8008460:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008462:	f7fe fd33 	bl	8006ecc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	f003 0307 	and.w	r3, r3, #7
 800846c:	2b00      	cmp	r3, #0
 800846e:	d009      	beq.n	8008484 <pvPortMalloc+0x164>
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	60fb      	str	r3, [r7, #12]
 8008482:	e7fe      	b.n	8008482 <pvPortMalloc+0x162>
	return pvReturn;
 8008484:	69fb      	ldr	r3, [r7, #28]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3728      	adds	r7, #40	; 0x28
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	2000492c 	.word	0x2000492c
 8008494:	20004938 	.word	0x20004938
 8008498:	20004930 	.word	0x20004930
 800849c:	20004924 	.word	0x20004924
 80084a0:	20004934 	.word	0x20004934

080084a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d046      	beq.n	8008544 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084b6:	2308      	movs	r3, #8
 80084b8:	425b      	negs	r3, r3
 80084ba:	697a      	ldr	r2, [r7, #20]
 80084bc:	4413      	add	r3, r2
 80084be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	4b20      	ldr	r3, [pc, #128]	; (800854c <vPortFree+0xa8>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4013      	ands	r3, r2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d109      	bne.n	80084e6 <vPortFree+0x42>
 80084d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	e7fe      	b.n	80084e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d009      	beq.n	8008502 <vPortFree+0x5e>
 80084ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f2:	f383 8811 	msr	BASEPRI, r3
 80084f6:	f3bf 8f6f 	isb	sy
 80084fa:	f3bf 8f4f 	dsb	sy
 80084fe:	60bb      	str	r3, [r7, #8]
 8008500:	e7fe      	b.n	8008500 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	685a      	ldr	r2, [r3, #4]
 8008506:	4b11      	ldr	r3, [pc, #68]	; (800854c <vPortFree+0xa8>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4013      	ands	r3, r2
 800850c:	2b00      	cmp	r3, #0
 800850e:	d019      	beq.n	8008544 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d115      	bne.n	8008544 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	4b0b      	ldr	r3, [pc, #44]	; (800854c <vPortFree+0xa8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	43db      	mvns	r3, r3
 8008522:	401a      	ands	r2, r3
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008528:	f7fe fcc2 	bl	8006eb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	4b07      	ldr	r3, [pc, #28]	; (8008550 <vPortFree+0xac>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4413      	add	r3, r2
 8008536:	4a06      	ldr	r2, [pc, #24]	; (8008550 <vPortFree+0xac>)
 8008538:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800853a:	6938      	ldr	r0, [r7, #16]
 800853c:	f000 f86c 	bl	8008618 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008540:	f7fe fcc4 	bl	8006ecc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008544:	bf00      	nop
 8008546:	3718      	adds	r7, #24
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	20004938 	.word	0x20004938
 8008550:	20004930 	.word	0x20004930

08008554 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800855a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800855e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008560:	4b27      	ldr	r3, [pc, #156]	; (8008600 <prvHeapInit+0xac>)
 8008562:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00c      	beq.n	8008588 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	3307      	adds	r3, #7
 8008572:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f023 0307 	bic.w	r3, r3, #7
 800857a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	4a1f      	ldr	r2, [pc, #124]	; (8008600 <prvHeapInit+0xac>)
 8008584:	4413      	add	r3, r2
 8008586:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800858c:	4a1d      	ldr	r2, [pc, #116]	; (8008604 <prvHeapInit+0xb0>)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008592:	4b1c      	ldr	r3, [pc, #112]	; (8008604 <prvHeapInit+0xb0>)
 8008594:	2200      	movs	r2, #0
 8008596:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	4413      	add	r3, r2
 800859e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085a0:	2208      	movs	r2, #8
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	1a9b      	subs	r3, r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0307 	bic.w	r3, r3, #7
 80085ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	4a15      	ldr	r2, [pc, #84]	; (8008608 <prvHeapInit+0xb4>)
 80085b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085b6:	4b14      	ldr	r3, [pc, #80]	; (8008608 <prvHeapInit+0xb4>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2200      	movs	r2, #0
 80085bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085be:	4b12      	ldr	r3, [pc, #72]	; (8008608 <prvHeapInit+0xb4>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2200      	movs	r2, #0
 80085c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	1ad2      	subs	r2, r2, r3
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085d4:	4b0c      	ldr	r3, [pc, #48]	; (8008608 <prvHeapInit+0xb4>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	4a0a      	ldr	r2, [pc, #40]	; (800860c <prvHeapInit+0xb8>)
 80085e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	4a09      	ldr	r2, [pc, #36]	; (8008610 <prvHeapInit+0xbc>)
 80085ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085ec:	4b09      	ldr	r3, [pc, #36]	; (8008614 <prvHeapInit+0xc0>)
 80085ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80085f2:	601a      	str	r2, [r3, #0]
}
 80085f4:	bf00      	nop
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	20000d24 	.word	0x20000d24
 8008604:	20004924 	.word	0x20004924
 8008608:	2000492c 	.word	0x2000492c
 800860c:	20004934 	.word	0x20004934
 8008610:	20004930 	.word	0x20004930
 8008614:	20004938 	.word	0x20004938

08008618 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008620:	4b28      	ldr	r3, [pc, #160]	; (80086c4 <prvInsertBlockIntoFreeList+0xac>)
 8008622:	60fb      	str	r3, [r7, #12]
 8008624:	e002      	b.n	800862c <prvInsertBlockIntoFreeList+0x14>
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	60fb      	str	r3, [r7, #12]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	429a      	cmp	r2, r3
 8008634:	d8f7      	bhi.n	8008626 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	4413      	add	r3, r2
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	429a      	cmp	r2, r3
 8008646:	d108      	bne.n	800865a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	685a      	ldr	r2, [r3, #4]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	441a      	add	r2, r3
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	68ba      	ldr	r2, [r7, #8]
 8008664:	441a      	add	r2, r3
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	429a      	cmp	r2, r3
 800866c:	d118      	bne.n	80086a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	429a      	cmp	r2, r3
 8008678:	d00d      	beq.n	8008696 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	685a      	ldr	r2, [r3, #4]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	441a      	add	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	681a      	ldr	r2, [r3, #0]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	e008      	b.n	80086a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008696:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	e003      	b.n	80086a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d002      	beq.n	80086b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086b6:	bf00      	nop
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	20004924 	.word	0x20004924
 80086c8:	2000492c 	.word	0x2000492c

080086cc <__libc_init_array>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	4e0d      	ldr	r6, [pc, #52]	; (8008704 <__libc_init_array+0x38>)
 80086d0:	4c0d      	ldr	r4, [pc, #52]	; (8008708 <__libc_init_array+0x3c>)
 80086d2:	1ba4      	subs	r4, r4, r6
 80086d4:	10a4      	asrs	r4, r4, #2
 80086d6:	2500      	movs	r5, #0
 80086d8:	42a5      	cmp	r5, r4
 80086da:	d109      	bne.n	80086f0 <__libc_init_array+0x24>
 80086dc:	4e0b      	ldr	r6, [pc, #44]	; (800870c <__libc_init_array+0x40>)
 80086de:	4c0c      	ldr	r4, [pc, #48]	; (8008710 <__libc_init_array+0x44>)
 80086e0:	f000 f82c 	bl	800873c <_init>
 80086e4:	1ba4      	subs	r4, r4, r6
 80086e6:	10a4      	asrs	r4, r4, #2
 80086e8:	2500      	movs	r5, #0
 80086ea:	42a5      	cmp	r5, r4
 80086ec:	d105      	bne.n	80086fa <__libc_init_array+0x2e>
 80086ee:	bd70      	pop	{r4, r5, r6, pc}
 80086f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086f4:	4798      	blx	r3
 80086f6:	3501      	adds	r5, #1
 80086f8:	e7ee      	b.n	80086d8 <__libc_init_array+0xc>
 80086fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80086fe:	4798      	blx	r3
 8008700:	3501      	adds	r5, #1
 8008702:	e7f2      	b.n	80086ea <__libc_init_array+0x1e>
 8008704:	08008924 	.word	0x08008924
 8008708:	08008924 	.word	0x08008924
 800870c:	08008924 	.word	0x08008924
 8008710:	08008928 	.word	0x08008928

08008714 <memcpy>:
 8008714:	b510      	push	{r4, lr}
 8008716:	1e43      	subs	r3, r0, #1
 8008718:	440a      	add	r2, r1
 800871a:	4291      	cmp	r1, r2
 800871c:	d100      	bne.n	8008720 <memcpy+0xc>
 800871e:	bd10      	pop	{r4, pc}
 8008720:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008724:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008728:	e7f7      	b.n	800871a <memcpy+0x6>

0800872a <memset>:
 800872a:	4402      	add	r2, r0
 800872c:	4603      	mov	r3, r0
 800872e:	4293      	cmp	r3, r2
 8008730:	d100      	bne.n	8008734 <memset+0xa>
 8008732:	4770      	bx	lr
 8008734:	f803 1b01 	strb.w	r1, [r3], #1
 8008738:	e7f9      	b.n	800872e <memset+0x4>
	...

0800873c <_init>:
 800873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873e:	bf00      	nop
 8008740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008742:	bc08      	pop	{r3}
 8008744:	469e      	mov	lr, r3
 8008746:	4770      	bx	lr

08008748 <_fini>:
 8008748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874a:	bf00      	nop
 800874c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800874e:	bc08      	pop	{r3}
 8008750:	469e      	mov	lr, r3
 8008752:	4770      	bx	lr
