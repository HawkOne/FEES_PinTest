
TestCubeMxAllBussesandGPIOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006860  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080069e8  080069e8  000169e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069fc  080069fc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080069fc  080069fc  000169fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a04  08006a04  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a04  08006a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a08  08006a08  00016a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d4  20000090  08006a9c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  08006a9c  00020764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011798  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a0a  00000000  00000000  00031858  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a78  00000000  00000000  00034268  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000940  00000000  00000000  00034ce0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022136  00000000  00000000  00035620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b2c6  00000000  00000000  00057756  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c47e4  00000000  00000000  00062a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00127200  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a84  00000000  00000000  0012727c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080069d0 	.word	0x080069d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080069d0 	.word	0x080069d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <pintoggle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void pintoggle(char port , int pin){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
GPIO_TypeDef * PORT__BASE;
uint16_t pin_number=0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	817b      	strh	r3, [r7, #10]

switch (port){
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	3b61      	subs	r3, #97	; 0x61
 80004dc:	2b04      	cmp	r3, #4
 80004de:	d81c      	bhi.n	800051a <pintoggle+0x52>
 80004e0:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <pintoggle+0x20>)
 80004e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e6:	bf00      	nop
 80004e8:	080004fd 	.word	0x080004fd
 80004ec:	08000503 	.word	0x08000503
 80004f0:	08000509 	.word	0x08000509
 80004f4:	0800050f 	.word	0x0800050f
 80004f8:	08000515 	.word	0x08000515
	case 'a': PORT__BASE = GPIOA;
 80004fc:	4b42      	ldr	r3, [pc, #264]	; (8000608 <pintoggle+0x140>)
 80004fe:	60fb      	str	r3, [r7, #12]
	break;
 8000500:	e00e      	b.n	8000520 <pintoggle+0x58>
	case 'b': PORT__BASE = GPIOB;
 8000502:	4b42      	ldr	r3, [pc, #264]	; (800060c <pintoggle+0x144>)
 8000504:	60fb      	str	r3, [r7, #12]
	break;
 8000506:	e00b      	b.n	8000520 <pintoggle+0x58>
	case 'c': PORT__BASE = GPIOC;
 8000508:	4b41      	ldr	r3, [pc, #260]	; (8000610 <pintoggle+0x148>)
 800050a:	60fb      	str	r3, [r7, #12]
	break;
 800050c:	e008      	b.n	8000520 <pintoggle+0x58>
	case 'd': PORT__BASE = GPIOD;
 800050e:	4b41      	ldr	r3, [pc, #260]	; (8000614 <pintoggle+0x14c>)
 8000510:	60fb      	str	r3, [r7, #12]
	break;
 8000512:	e005      	b.n	8000520 <pintoggle+0x58>
	case 'e': PORT__BASE = GPIOE;
 8000514:	4b40      	ldr	r3, [pc, #256]	; (8000618 <pintoggle+0x150>)
 8000516:	60fb      	str	r3, [r7, #12]
	break;
 8000518:	e002      	b.n	8000520 <pintoggle+0x58>
	default: PORT__BASE = GPIOA;
 800051a:	4b3b      	ldr	r3, [pc, #236]	; (8000608 <pintoggle+0x140>)
 800051c:	60fb      	str	r3, [r7, #12]
	break;
 800051e:	bf00      	nop
	}
switch (pin){
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	2b0f      	cmp	r3, #15
 8000524:	d85a      	bhi.n	80005dc <pintoggle+0x114>
 8000526:	a201      	add	r2, pc, #4	; (adr r2, 800052c <pintoggle+0x64>)
 8000528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052c:	0800056d 	.word	0x0800056d
 8000530:	08000573 	.word	0x08000573
 8000534:	08000579 	.word	0x08000579
 8000538:	0800057f 	.word	0x0800057f
 800053c:	08000585 	.word	0x08000585
 8000540:	0800058b 	.word	0x0800058b
 8000544:	08000591 	.word	0x08000591
 8000548:	08000597 	.word	0x08000597
 800054c:	0800059d 	.word	0x0800059d
 8000550:	080005a5 	.word	0x080005a5
 8000554:	080005ad 	.word	0x080005ad
 8000558:	080005b5 	.word	0x080005b5
 800055c:	080005bd 	.word	0x080005bd
 8000560:	080005c5 	.word	0x080005c5
 8000564:	080005cd 	.word	0x080005cd
 8000568:	080005d5 	.word	0x080005d5
	case 0: pin_number = 0x0001;
 800056c:	2301      	movs	r3, #1
 800056e:	817b      	strh	r3, [r7, #10]
	break;
 8000570:	e034      	b.n	80005dc <pintoggle+0x114>
	case 1: pin_number = 0x0002;
 8000572:	2302      	movs	r3, #2
 8000574:	817b      	strh	r3, [r7, #10]
	break;
 8000576:	e031      	b.n	80005dc <pintoggle+0x114>
	case 2: pin_number = 0x0004;
 8000578:	2304      	movs	r3, #4
 800057a:	817b      	strh	r3, [r7, #10]
	break;
 800057c:	e02e      	b.n	80005dc <pintoggle+0x114>
	case 3: pin_number = 0x0008;
 800057e:	2308      	movs	r3, #8
 8000580:	817b      	strh	r3, [r7, #10]
	break;
 8000582:	e02b      	b.n	80005dc <pintoggle+0x114>
	case 4: pin_number = 0x0010;
 8000584:	2310      	movs	r3, #16
 8000586:	817b      	strh	r3, [r7, #10]
	break;
 8000588:	e028      	b.n	80005dc <pintoggle+0x114>
	case 5: pin_number = 0x0020;
 800058a:	2320      	movs	r3, #32
 800058c:	817b      	strh	r3, [r7, #10]
	break;
 800058e:	e025      	b.n	80005dc <pintoggle+0x114>
	case 6: pin_number = 0x0040;
 8000590:	2340      	movs	r3, #64	; 0x40
 8000592:	817b      	strh	r3, [r7, #10]
	break;
 8000594:	e022      	b.n	80005dc <pintoggle+0x114>
	case 7: pin_number = 0x0080;
 8000596:	2380      	movs	r3, #128	; 0x80
 8000598:	817b      	strh	r3, [r7, #10]
	break;
 800059a:	e01f      	b.n	80005dc <pintoggle+0x114>
	case 8: pin_number = 0x0100;
 800059c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a0:	817b      	strh	r3, [r7, #10]
	break;
 80005a2:	e01b      	b.n	80005dc <pintoggle+0x114>
	case 9: pin_number = 0x0200;
 80005a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a8:	817b      	strh	r3, [r7, #10]
	break;
 80005aa:	e017      	b.n	80005dc <pintoggle+0x114>
	case 10: pin_number = 0x0400;
 80005ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b0:	817b      	strh	r3, [r7, #10]
	break;
 80005b2:	e013      	b.n	80005dc <pintoggle+0x114>
	case 11: pin_number = 0x0800;
 80005b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005b8:	817b      	strh	r3, [r7, #10]
	break;
 80005ba:	e00f      	b.n	80005dc <pintoggle+0x114>
	case 12: pin_number = 0x1000;
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	817b      	strh	r3, [r7, #10]
	break;
 80005c2:	e00b      	b.n	80005dc <pintoggle+0x114>
	case 13: pin_number = 0x2000;
 80005c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c8:	817b      	strh	r3, [r7, #10]
	break;
 80005ca:	e007      	b.n	80005dc <pintoggle+0x114>
	case 14: pin_number = 0x4000;
 80005cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005d0:	817b      	strh	r3, [r7, #10]
	break;
 80005d2:	e003      	b.n	80005dc <pintoggle+0x114>
	case 15: pin_number = 0x8000;
 80005d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005d8:	817b      	strh	r3, [r7, #10]
	break;
 80005da:	bf00      	nop
	}
	HAL_GPIO_WritePin(PORT__BASE, pin_number, 1);
 80005dc:	897b      	ldrh	r3, [r7, #10]
 80005de:	2201      	movs	r2, #1
 80005e0:	4619      	mov	r1, r3
 80005e2:	68f8      	ldr	r0, [r7, #12]
 80005e4:	f000 fe82 	bl	80012ec <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005e8:	200a      	movs	r0, #10
 80005ea:	f000 fbb1 	bl	8000d50 <HAL_Delay>
    HAL_GPIO_WritePin(PORT__BASE, pin_number, 0);
 80005ee:	897b      	ldrh	r3, [r7, #10]
 80005f0:	2200      	movs	r2, #0
 80005f2:	4619      	mov	r1, r3
 80005f4:	68f8      	ldr	r0, [r7, #12]
 80005f6:	f000 fe79 	bl	80012ec <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005fa:	200a      	movs	r0, #10
 80005fc:	f000 fba8 	bl	8000d50 <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40020000 	.word	0x40020000
 800060c:	40020400 	.word	0x40020400
 8000610:	40020800 	.word	0x40020800
 8000614:	40020c00 	.word	0x40020c00
 8000618:	40021000 	.word	0x40021000

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fb24 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f8f0 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f958 	bl	80008dc <MX_GPIO_Init>
  MX_USB_HOST_Init();
 800062c:	f005 fdda 	bl	80061e4 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000630:	f005 fdfe 	bl	8006230 <MX_USB_HOST_Process>

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000634:	2201      	movs	r2, #1
 8000636:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800063a:	4872      	ldr	r0, [pc, #456]	; (8000804 <main+0x1e8>)
 800063c:	f000 fe56 	bl	80012ec <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000640:	200a      	movs	r0, #10
 8000642:	f000 fb85 	bl	8000d50 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800064c:	486d      	ldr	r0, [pc, #436]	; (8000804 <main+0x1e8>)
 800064e:	f000 fe4d 	bl	80012ec <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000652:	200a      	movs	r0, #10
 8000654:	f000 fb7c 	bl	8000d50 <HAL_Delay>


         // PWM_ CONTROL
    pintoggle('c',8);  // PWM_HEATER - BATTERY
 8000658:	2108      	movs	r1, #8
 800065a:	2063      	movs	r0, #99	; 0x63
 800065c:	f7ff ff34 	bl	80004c8 <pintoggle>

    pintoggle('a',0);  // PWM_HEATER - BATTERY
 8000660:	2100      	movs	r1, #0
 8000662:	2061      	movs	r0, #97	; 0x61
 8000664:	f7ff ff30 	bl	80004c8 <pintoggle>
    pintoggle('a',1);  // PWM_HEATER - BATTERY
 8000668:	2101      	movs	r1, #1
 800066a:	2061      	movs	r0, #97	; 0x61
 800066c:	f7ff ff2c 	bl	80004c8 <pintoggle>
    pintoggle('a',2);  // PWM_HEATER - BATTERY
 8000670:	2102      	movs	r1, #2
 8000672:	2061      	movs	r0, #97	; 0x61
 8000674:	f7ff ff28 	bl	80004c8 <pintoggle>

         // GPIO DI DIREZIONE
    pintoggle('e',7);	// Dir_X
 8000678:	2107      	movs	r1, #7
 800067a:	2065      	movs	r0, #101	; 0x65
 800067c:	f7ff ff24 	bl	80004c8 <pintoggle>
    pintoggle('e',8);	// Dir_Y
 8000680:	2108      	movs	r1, #8
 8000682:	2065      	movs	r0, #101	; 0x65
 8000684:	f7ff ff20 	bl	80004c8 <pintoggle>
    pintoggle('e',9);	// Dir_Z
 8000688:	2109      	movs	r1, #9
 800068a:	2065      	movs	r0, #101	; 0x65
 800068c:	f7ff ff1c 	bl	80004c8 <pintoggle>

    	//GPIO DI CONTROLLO
    pintoggle('b',5);	//
 8000690:	2105      	movs	r1, #5
 8000692:	2062      	movs	r0, #98	; 0x62
 8000694:	f7ff ff18 	bl	80004c8 <pintoggle>
    pintoggle('d',12); //
 8000698:	210c      	movs	r1, #12
 800069a:	2064      	movs	r0, #100	; 0x64
 800069c:	f7ff ff14 	bl	80004c8 <pintoggle>
    pintoggle('e',0);	//
 80006a0:	2100      	movs	r1, #0
 80006a2:	2065      	movs	r0, #101	; 0x65
 80006a4:	f7ff ff10 	bl	80004c8 <pintoggle>
    pintoggle('e',1);	//
 80006a8:	2101      	movs	r1, #1
 80006aa:	2065      	movs	r0, #101	; 0x65
 80006ac:	f7ff ff0c 	bl	80004c8 <pintoggle>
    pintoggle('e',3);	//
 80006b0:	2103      	movs	r1, #3
 80006b2:	2065      	movs	r0, #101	; 0x65
 80006b4:	f7ff ff08 	bl	80004c8 <pintoggle>
    pintoggle('e',2);	//
 80006b8:	2102      	movs	r1, #2
 80006ba:	2065      	movs	r0, #101	; 0x65
 80006bc:	f7ff ff04 	bl	80004c8 <pintoggle>
    pintoggle('e',6);	//
 80006c0:	2106      	movs	r1, #6
 80006c2:	2065      	movs	r0, #101	; 0x65
 80006c4:	f7ff ff00 	bl	80004c8 <pintoggle>
    pintoggle('b',0);	//
 80006c8:	2100      	movs	r1, #0
 80006ca:	2062      	movs	r0, #98	; 0x62
 80006cc:	f7ff fefc 	bl	80004c8 <pintoggle>

         // GPIO DI DIREZIONE
    pintoggle('b',1);	// EX_GPIO1
 80006d0:	2101      	movs	r1, #1
 80006d2:	2062      	movs	r0, #98	; 0x62
 80006d4:	f7ff fef8 	bl	80004c8 <pintoggle>
    pintoggle('b',12);	// EX_GPIO2
 80006d8:	210c      	movs	r1, #12
 80006da:	2062      	movs	r0, #98	; 0x62
 80006dc:	f7ff fef4 	bl	80004c8 <pintoggle>
    pintoggle('a',3);	// EX_GPIO3
 80006e0:	2103      	movs	r1, #3
 80006e2:	2061      	movs	r0, #97	; 0x61
 80006e4:	f7ff fef0 	bl	80004c8 <pintoggle>
    pintoggle('a',10);	// EX_GPIO4
 80006e8:	210a      	movs	r1, #10
 80006ea:	2061      	movs	r0, #97	; 0x61
 80006ec:	f7ff feec 	bl	80004c8 <pintoggle>


         //CS_SPI_SENSORI
    pintoggle('e',5);  	//
 80006f0:	2105      	movs	r1, #5
 80006f2:	2065      	movs	r0, #101	; 0x65
 80006f4:	f7ff fee8 	bl	80004c8 <pintoggle>
    pintoggle('e',4);  	//
 80006f8:	2104      	movs	r1, #4
 80006fa:	2065      	movs	r0, #101	; 0x65
 80006fc:	f7ff fee4 	bl	80004c8 <pintoggle>
    pintoggle('a',4);	//
 8000700:	2104      	movs	r1, #4
 8000702:	2061      	movs	r0, #97	; 0x61
 8000704:	f7ff fee0 	bl	80004c8 <pintoggle>
    pintoggle('e',11);	//
 8000708:	210b      	movs	r1, #11
 800070a:	2065      	movs	r0, #101	; 0x65
 800070c:	f7ff fedc 	bl	80004c8 <pintoggle>
    pintoggle('e',13);	//
 8000710:	210d      	movs	r1, #13
 8000712:	2065      	movs	r0, #101	; 0x65
 8000714:	f7ff fed8 	bl	80004c8 <pintoggle>
    pintoggle('e',12);	//
 8000718:	210c      	movs	r1, #12
 800071a:	2065      	movs	r0, #101	; 0x65
 800071c:	f7ff fed4 	bl	80004c8 <pintoggle>
    pintoggle('c',9);  	//
 8000720:	2109      	movs	r1, #9
 8000722:	2063      	movs	r0, #99	; 0x63
 8000724:	f7ff fed0 	bl	80004c8 <pintoggle>
    pintoggle('d',10);	//
 8000728:	210a      	movs	r1, #10
 800072a:	2064      	movs	r0, #100	; 0x64
 800072c:	f7ff fecc 	bl	80004c8 <pintoggle>
    pintoggle('d',11);	//
 8000730:	210b      	movs	r1, #11
 8000732:	2064      	movs	r0, #100	; 0x64
 8000734:	f7ff fec8 	bl	80004c8 <pintoggle>
    pintoggle('c',4);  	//
 8000738:	2104      	movs	r1, #4
 800073a:	2063      	movs	r0, #99	; 0x63
 800073c:	f7ff fec4 	bl	80004c8 <pintoggle>
    pintoggle('c',5);   	//
 8000740:	2105      	movs	r1, #5
 8000742:	2063      	movs	r0, #99	; 0x63
 8000744:	f7ff fec0 	bl	80004c8 <pintoggle>
    pintoggle('e',10);  	//
 8000748:	210a      	movs	r1, #10
 800074a:	2065      	movs	r0, #101	; 0x65
 800074c:	f7ff febc 	bl	80004c8 <pintoggle>
    pintoggle('d',14);  	//
 8000750:	210e      	movs	r1, #14
 8000752:	2064      	movs	r0, #100	; 0x64
 8000754:	f7ff feb8 	bl	80004c8 <pintoggle>


    	// Communication busses pins
         	   	   // UART _ BUS
    pintoggle('b',6);  // UART_1_TX	GPS
 8000758:	2106      	movs	r1, #6
 800075a:	2062      	movs	r0, #98	; 0x62
 800075c:	f7ff feb4 	bl	80004c8 <pintoggle>
    pintoggle('b',7);  // UART_1_RX
 8000760:	2107      	movs	r1, #7
 8000762:	2062      	movs	r0, #98	; 0x62
 8000764:	f7ff feb0 	bl	80004c8 <pintoggle>

    pintoggle('d',5);  // UART_2_TX	SBD
 8000768:	2105      	movs	r1, #5
 800076a:	2064      	movs	r0, #100	; 0x64
 800076c:	f7ff feac 	bl	80004c8 <pintoggle>
    pintoggle('d',6);  // UART_2_RX
 8000770:	2106      	movs	r1, #6
 8000772:	2064      	movs	r0, #100	; 0x64
 8000774:	f7ff fea8 	bl	80004c8 <pintoggle>

    pintoggle('d',8);  // UART_3_TX	CONSOLE SERIALE
 8000778:	2108      	movs	r1, #8
 800077a:	2064      	movs	r0, #100	; 0x64
 800077c:	f7ff fea4 	bl	80004c8 <pintoggle>
    pintoggle('d',9);  // UART_3_RX
 8000780:	2109      	movs	r1, #9
 8000782:	2064      	movs	r0, #100	; 0x64
 8000784:	f7ff fea0 	bl	80004c8 <pintoggle>

    pintoggle('c',6);  // UART_6_TX	SDR
 8000788:	2106      	movs	r1, #6
 800078a:	2063      	movs	r0, #99	; 0x63
 800078c:	f7ff fe9c 	bl	80004c8 <pintoggle>
    pintoggle('c',7);  // UART_6_RX
 8000790:	2107      	movs	r1, #7
 8000792:	2063      	movs	r0, #99	; 0x63
 8000794:	f7ff fe98 	bl	80004c8 <pintoggle>

    		// SPI  BUSSES
    			// SPI_1
    pintoggle('a',6);  // SPI_1_MISO
 8000798:	2106      	movs	r1, #6
 800079a:	2061      	movs	r0, #97	; 0x61
 800079c:	f7ff fe94 	bl	80004c8 <pintoggle>
    pintoggle('a',7);  // SPI_1_MOSI
 80007a0:	2107      	movs	r1, #7
 80007a2:	2061      	movs	r0, #97	; 0x61
 80007a4:	f7ff fe90 	bl	80004c8 <pintoggle>
    pintoggle('a',5);  // SPI_1_SCK
 80007a8:	2105      	movs	r1, #5
 80007aa:	2061      	movs	r0, #97	; 0x61
 80007ac:	f7ff fe8c 	bl	80004c8 <pintoggle>
    			// SPI_2
    pintoggle('b',14);  // SPI_2_MISO
 80007b0:	210e      	movs	r1, #14
 80007b2:	2062      	movs	r0, #98	; 0x62
 80007b4:	f7ff fe88 	bl	80004c8 <pintoggle>
    pintoggle('b',15);  // SPI_2_MOSI
 80007b8:	210f      	movs	r1, #15
 80007ba:	2062      	movs	r0, #98	; 0x62
 80007bc:	f7ff fe84 	bl	80004c8 <pintoggle>
    pintoggle('b',13);  // SPI_2_SCK
 80007c0:	210d      	movs	r1, #13
 80007c2:	2062      	movs	r0, #98	; 0x62
 80007c4:	f7ff fe80 	bl	80004c8 <pintoggle>
    			// SPI_3
    pintoggle('c',11);  // SPI_3_MISO
 80007c8:	210b      	movs	r1, #11
 80007ca:	2063      	movs	r0, #99	; 0x63
 80007cc:	f7ff fe7c 	bl	80004c8 <pintoggle>
    pintoggle('c',12);  // SPI_3_MOSI
 80007d0:	210c      	movs	r1, #12
 80007d2:	2063      	movs	r0, #99	; 0x63
 80007d4:	f7ff fe78 	bl	80004c8 <pintoggle>
    pintoggle('c',10);  // SPI_3_SCK
 80007d8:	210a      	movs	r1, #10
 80007da:	2063      	movs	r0, #99	; 0x63
 80007dc:	f7ff fe74 	bl	80004c8 <pintoggle>


    		// I2C  BUSSES
    			// I2C_1
    pintoggle('b',10);  // SCL
 80007e0:	210a      	movs	r1, #10
 80007e2:	2062      	movs	r0, #98	; 0x62
 80007e4:	f7ff fe70 	bl	80004c8 <pintoggle>
    pintoggle('b',11);  // SDA
 80007e8:	210b      	movs	r1, #11
 80007ea:	2062      	movs	r0, #98	; 0x62
 80007ec:	f7ff fe6c 	bl	80004c8 <pintoggle>
    			// I2C_2
    pintoggle('b',8);  // SCL2
 80007f0:	2108      	movs	r1, #8
 80007f2:	2062      	movs	r0, #98	; 0x62
 80007f4:	f7ff fe68 	bl	80004c8 <pintoggle>
    pintoggle('b',9);  // SDA2
 80007f8:	2109      	movs	r1, #9
 80007fa:	2062      	movs	r0, #98	; 0x62
 80007fc:	f7ff fe64 	bl	80004c8 <pintoggle>
    MX_USB_HOST_Process();
 8000800:	e716      	b.n	8000630 <main+0x14>
 8000802:	bf00      	nop
 8000804:	40020c00 	.word	0x40020c00

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b094      	sub	sp, #80	; 0x50
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	2230      	movs	r2, #48	; 0x30
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f006 f818 	bl	800684c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082c:	2300      	movs	r3, #0
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	4b28      	ldr	r3, [pc, #160]	; (80008d4 <SystemClock_Config+0xcc>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000834:	4a27      	ldr	r2, [pc, #156]	; (80008d4 <SystemClock_Config+0xcc>)
 8000836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083a:	6413      	str	r3, [r2, #64]	; 0x40
 800083c:	4b25      	ldr	r3, [pc, #148]	; (80008d4 <SystemClock_Config+0xcc>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000848:	2300      	movs	r3, #0
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	4b22      	ldr	r3, [pc, #136]	; (80008d8 <SystemClock_Config+0xd0>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <SystemClock_Config+0xd0>)
 8000852:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <SystemClock_Config+0xd0>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000864:	2301      	movs	r3, #1
 8000866:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000868:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000872:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000876:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000878:	2308      	movs	r3, #8
 800087a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800087c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000880:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000882:	2302      	movs	r3, #2
 8000884:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000886:	2307      	movs	r3, #7
 8000888:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 0320 	add.w	r3, r7, #32
 800088e:	4618      	mov	r0, r3
 8000890:	f002 fa36 	bl	8002d00 <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800089a:	f000 f909 	bl	8000ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	230f      	movs	r3, #15
 80008a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a2:	2302      	movs	r3, #2
 80008a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	2105      	movs	r1, #5
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 fc8f 	bl	80031e0 <HAL_RCC_ClockConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008c8:	f000 f8f2 	bl	8000ab0 <Error_Handler>
  }
}
 80008cc:	bf00      	nop
 80008ce:	3750      	adds	r7, #80	; 0x50
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40007000 	.word	0x40007000

080008dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	; 0x30
 80008e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
 80008f6:	4b68      	ldr	r3, [pc, #416]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a67      	ldr	r2, [pc, #412]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b65      	ldr	r3, [pc, #404]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	4b61      	ldr	r3, [pc, #388]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a60      	ldr	r2, [pc, #384]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b5e      	ldr	r3, [pc, #376]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b5a      	ldr	r3, [pc, #360]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a59      	ldr	r2, [pc, #356]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b57      	ldr	r3, [pc, #348]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b53      	ldr	r3, [pc, #332]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a52      	ldr	r2, [pc, #328]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b50      	ldr	r3, [pc, #320]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b4c      	ldr	r3, [pc, #304]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a4b      	ldr	r2, [pc, #300]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b49      	ldr	r3, [pc, #292]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b45      	ldr	r3, [pc, #276]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a44      	ldr	r2, [pc, #272]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 8000988:	f043 0308 	orr.w	r3, r3, #8
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b42      	ldr	r3, [pc, #264]	; (8000a98 <MX_GPIO_Init+0x1bc>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0308 	and.w	r3, r3, #8
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800099a:	2200      	movs	r2, #0
 800099c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009a0:	483e      	ldr	r0, [pc, #248]	; (8000a9c <MX_GPIO_Init+0x1c0>)
 80009a2:	f000 fca3 	bl	80012ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_1
 80009a6:	2200      	movs	r2, #0
 80009a8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80009ac:	483c      	ldr	r0, [pc, #240]	; (8000aa0 <MX_GPIO_Init+0x1c4>)
 80009ae:	f000 fc9d 	bl	80012ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2101      	movs	r1, #1
 80009b6:	483a      	ldr	r0, [pc, #232]	; (8000aa0 <MX_GPIO_Init+0x1c4>)
 80009b8:	f000 fc98 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009bc:	2200      	movs	r2, #0
 80009be:	f248 71ff 	movw	r1, #34815	; 0x87ff
 80009c2:	4838      	ldr	r0, [pc, #224]	; (8000aa4 <MX_GPIO_Init+0x1c8>)
 80009c4:	f000 fc92 	bl	80012ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80009c8:	2200      	movs	r2, #0
 80009ca:	f64f 71f3 	movw	r1, #65523	; 0xfff3
 80009ce:	4836      	ldr	r0, [pc, #216]	; (8000aa8 <MX_GPIO_Init+0x1cc>)
 80009d0:	f000 fc8c 	bl	80012ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80009d4:	2200      	movs	r2, #0
 80009d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009da:	4834      	ldr	r0, [pc, #208]	; (8000aac <MX_GPIO_Init+0x1d0>)
 80009dc:	f000 fc86 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80009e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009e4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4828      	ldr	r0, [pc, #160]	; (8000a9c <MX_GPIO_Init+0x1c0>)
 80009fa:	f000 fadd 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 OTG_FS_PowerSwitchOn_Pin
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|OTG_FS_PowerSwitchOn_Pin
 80009fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a02:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a04:	2301      	movs	r3, #1
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a10:	f107 031c 	add.w	r3, r7, #28
 8000a14:	4619      	mov	r1, r3
 8000a16:	4822      	ldr	r0, [pc, #136]	; (8000aa0 <MX_GPIO_Init+0x1c4>)
 8000a18:	f000 face 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a1c:	f248 73ff 	movw	r3, #34815	; 0x87ff
 8000a20:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a22:	2301      	movs	r3, #1
 8000a24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 031c 	add.w	r3, r7, #28
 8000a32:	4619      	mov	r1, r3
 8000a34:	481b      	ldr	r0, [pc, #108]	; (8000aa4 <MX_GPIO_Init+0x1c8>)
 8000a36:	f000 fabf 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000a3a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8000a3e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a40:	2301      	movs	r3, #1
 8000a42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4815      	ldr	r0, [pc, #84]	; (8000aa8 <MX_GPIO_Init+0x1cc>)
 8000a54:	f000 fab0 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <MX_GPIO_Init+0x1cc>)
 8000a6c:	f000 faa4 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a74:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4808      	ldr	r0, [pc, #32]	; (8000aac <MX_GPIO_Init+0x1d0>)
 8000a8a:	f000 fa95 	bl	8000fb8 <HAL_GPIO_Init>

}
 8000a8e:	bf00      	nop
 8000a90:	3730      	adds	r7, #48	; 0x30
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40020c00 	.word	0x40020c00

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <HAL_MspInit+0x4c>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a0f      	ldr	r2, [pc, #60]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	603b      	str	r3, [r7, #0]
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x4c>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x4c>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x4c>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000afe:	2007      	movs	r0, #7
 8000b00:	f000 fa18 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 f8d4 	bl	8000d10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <OTG_FS_IRQHandler+0x10>)
 8000b72:	f000 fe63 	bl	800183c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000049c 	.word	0x2000049c

08000b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b88:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <_sbrk+0x5c>)
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <_sbrk+0x60>)
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b94:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b9c:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <_sbrk+0x64>)
 8000b9e:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <_sbrk+0x68>)
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <_sbrk+0x64>)
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d207      	bcs.n	8000bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bb0:	f005 fe12 	bl	80067d8 <__errno>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bbe:	e009      	b.n	8000bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bc6:	4b07      	ldr	r3, [pc, #28]	; (8000be4 <_sbrk+0x64>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	4413      	add	r3, r2
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <_sbrk+0x64>)
 8000bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bd2:	68fb      	ldr	r3, [r7, #12]
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3718      	adds	r7, #24
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20020000 	.word	0x20020000
 8000be0:	00000400 	.word	0x00000400
 8000be4:	200000ac 	.word	0x200000ac
 8000be8:	20000768 	.word	0x20000768

08000bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <SystemInit+0x28>)
 8000bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <SystemInit+0x28>)
 8000bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SystemInit+0x28>)
 8000c02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c06:	609a      	str	r2, [r3, #8]
#endif
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c1e:	e003      	b.n	8000c28 <LoopCopyDataInit>

08000c20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c26:	3104      	adds	r1, #4

08000c28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c28:	480b      	ldr	r0, [pc, #44]	; (8000c58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c30:	d3f6      	bcc.n	8000c20 <CopyDataInit>
  ldr  r2, =_sbss
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c34:	e002      	b.n	8000c3c <LoopFillZerobss>

08000c36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c38:	f842 3b04 	str.w	r3, [r2], #4

08000c3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c40:	d3f9      	bcc.n	8000c36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c42:	f7ff ffd3 	bl	8000bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c46:	f005 fdcd 	bl	80067e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fce7 	bl	800061c <main>
  bx  lr    
 8000c4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c54:	08006a0c 	.word	0x08006a0c
  ldr  r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c5c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000c60:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000c64:	20000764 	.word	0x20000764

08000c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC_IRQHandler>
	...

08000c6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c70:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_Init+0x40>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0d      	ldr	r2, [pc, #52]	; (8000cac <HAL_Init+0x40>)
 8000c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_Init+0x40>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <HAL_Init+0x40>)
 8000c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <HAL_Init+0x40>)
 8000c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c94:	2003      	movs	r0, #3
 8000c96:	f000 f94d 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	f000 f808 	bl	8000cb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca0:	f7ff ff0e 	bl	8000ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023c00 	.word	0x40023c00

08000cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_InitTick+0x54>)
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_InitTick+0x58>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f965 	bl	8000f9e <HAL_SYSTICK_Config>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e00e      	b.n	8000cfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b0f      	cmp	r3, #15
 8000ce2:	d80a      	bhi.n	8000cfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cec:	f000 f92d 	bl	8000f4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf0:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <HAL_InitTick+0x5c>)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e000      	b.n	8000cfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000008 	.word	0x20000008
 8000d0c:	20000004 	.word	0x20000004

08000d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_IncTick+0x20>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_IncTick+0x24>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4413      	add	r3, r2
 8000d20:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <HAL_IncTick+0x24>)
 8000d22:	6013      	str	r3, [r2, #0]
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000008 	.word	0x20000008
 8000d34:	200000c0 	.word	0x200000c0

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_GetTick+0x14>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200000c0 	.word	0x200000c0

08000d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d58:	f7ff ffee 	bl	8000d38 <HAL_GetTick>
 8000d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d68:	d005      	beq.n	8000d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_Delay+0x40>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	4413      	add	r3, r2
 8000d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d76:	bf00      	nop
 8000d78:	f7ff ffde 	bl	8000d38 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d8f7      	bhi.n	8000d78 <HAL_Delay+0x28>
  {
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000008 	.word	0x20000008

08000d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dc6:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	60d3      	str	r3, [r2, #12]
}
 8000dcc:	bf00      	nop
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	e000ed00 	.word	0xe000ed00

08000ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <__NVIC_GetPriorityGrouping+0x18>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	0a1b      	lsrs	r3, r3, #8
 8000de6:	f003 0307 	and.w	r3, r3, #7
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <__NVIC_EnableIRQ+0x38>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	; (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	; 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3b01      	subs	r3, #1
 8000efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f00:	d301      	bcc.n	8000f06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f02:	2301      	movs	r3, #1
 8000f04:	e00f      	b.n	8000f26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <SysTick_Config+0x40>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0e:	210f      	movs	r1, #15
 8000f10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f14:	f7ff ff8e 	bl	8000e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <SysTick_Config+0x40>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <SysTick_Config+0x40>)
 8000f20:	2207      	movs	r2, #7
 8000f22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	e000e010 	.word	0xe000e010

08000f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff29 	bl	8000d94 <__NVIC_SetPriorityGrouping>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5c:	f7ff ff3e 	bl	8000ddc <__NVIC_GetPriorityGrouping>
 8000f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff ff8e 	bl	8000e88 <NVIC_EncodePriority>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff5d 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff31 	bl	8000df8 <__NVIC_EnableIRQ>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffa2 	bl	8000ef0 <SysTick_Config>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	; 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	e16b      	b.n	80012ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	f040 815a 	bne.w	80012a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d00b      	beq.n	8001012 <HAL_GPIO_Init+0x5a>
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d007      	beq.n	8001012 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001006:	2b11      	cmp	r3, #17
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	2b12      	cmp	r3, #18
 8001010:	d130      	bne.n	8001074 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4013      	ands	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	68da      	ldr	r2, [r3, #12]
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001048:	2201      	movs	r2, #1
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	f003 0201 	and.w	r2, r3, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	689a      	ldr	r2, [r3, #8]
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	4313      	orrs	r3, r2
 800109c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0xfc>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b12      	cmp	r3, #18
 80010b2:	d123      	bne.n	80010fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	69b9      	ldr	r1, [r7, #24]
 80010f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0203 	and.w	r2, r3, #3
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80b4 	beq.w	80012a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b5f      	ldr	r3, [pc, #380]	; (80012c0 <HAL_GPIO_Init+0x308>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	4a5e      	ldr	r2, [pc, #376]	; (80012c0 <HAL_GPIO_Init+0x308>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6453      	str	r3, [r2, #68]	; 0x44
 800114e:	4b5c      	ldr	r3, [pc, #368]	; (80012c0 <HAL_GPIO_Init+0x308>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115a:	4a5a      	ldr	r2, [pc, #360]	; (80012c4 <HAL_GPIO_Init+0x30c>)
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3302      	adds	r3, #2
 8001162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a51      	ldr	r2, [pc, #324]	; (80012c8 <HAL_GPIO_Init+0x310>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d02b      	beq.n	80011de <HAL_GPIO_Init+0x226>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a50      	ldr	r2, [pc, #320]	; (80012cc <HAL_GPIO_Init+0x314>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d025      	beq.n	80011da <HAL_GPIO_Init+0x222>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4f      	ldr	r2, [pc, #316]	; (80012d0 <HAL_GPIO_Init+0x318>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d01f      	beq.n	80011d6 <HAL_GPIO_Init+0x21e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4e      	ldr	r2, [pc, #312]	; (80012d4 <HAL_GPIO_Init+0x31c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d019      	beq.n	80011d2 <HAL_GPIO_Init+0x21a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4d      	ldr	r2, [pc, #308]	; (80012d8 <HAL_GPIO_Init+0x320>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d013      	beq.n	80011ce <HAL_GPIO_Init+0x216>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4c      	ldr	r2, [pc, #304]	; (80012dc <HAL_GPIO_Init+0x324>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d00d      	beq.n	80011ca <HAL_GPIO_Init+0x212>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4b      	ldr	r2, [pc, #300]	; (80012e0 <HAL_GPIO_Init+0x328>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d007      	beq.n	80011c6 <HAL_GPIO_Init+0x20e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4a      	ldr	r2, [pc, #296]	; (80012e4 <HAL_GPIO_Init+0x32c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d101      	bne.n	80011c2 <HAL_GPIO_Init+0x20a>
 80011be:	2307      	movs	r3, #7
 80011c0:	e00e      	b.n	80011e0 <HAL_GPIO_Init+0x228>
 80011c2:	2308      	movs	r3, #8
 80011c4:	e00c      	b.n	80011e0 <HAL_GPIO_Init+0x228>
 80011c6:	2306      	movs	r3, #6
 80011c8:	e00a      	b.n	80011e0 <HAL_GPIO_Init+0x228>
 80011ca:	2305      	movs	r3, #5
 80011cc:	e008      	b.n	80011e0 <HAL_GPIO_Init+0x228>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x228>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x228>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x228>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x228>
 80011de:	2300      	movs	r3, #0
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	f002 0203 	and.w	r2, r2, #3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f0:	4934      	ldr	r1, [pc, #208]	; (80012c4 <HAL_GPIO_Init+0x30c>)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fe:	4b3a      	ldr	r3, [pc, #232]	; (80012e8 <HAL_GPIO_Init+0x330>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001222:	4a31      	ldr	r2, [pc, #196]	; (80012e8 <HAL_GPIO_Init+0x330>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001228:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <HAL_GPIO_Init+0x330>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800124c:	4a26      	ldr	r2, [pc, #152]	; (80012e8 <HAL_GPIO_Init+0x330>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001252:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <HAL_GPIO_Init+0x330>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001276:	4a1c      	ldr	r2, [pc, #112]	; (80012e8 <HAL_GPIO_Init+0x330>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_GPIO_Init+0x330>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a0:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <HAL_GPIO_Init+0x330>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	f67f ae90 	bls.w	8000fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b4:	bf00      	nop
 80012b6:	3724      	adds	r7, #36	; 0x24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40013800 	.word	0x40013800
 80012c8:	40020000 	.word	0x40020000
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40020800 	.word	0x40020800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40021400 	.word	0x40021400
 80012e0:	40021800 	.word	0x40021800
 80012e4:	40021c00 	.word	0x40021c00
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800131e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001320:	b08f      	sub	sp, #60	; 0x3c
 8001322:	af0a      	add	r7, sp, #40	; 0x28
 8001324:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e054      	b.n	80013da <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800133c:	b2db      	uxtb	r3, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	d106      	bne.n	8001350 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f004 ffa8 	bl	80062a0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f002 f966 	bl	8003640 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	687e      	ldr	r6, [r7, #4]
 800137c:	466d      	mov	r5, sp
 800137e:	f106 0410 	add.w	r4, r6, #16
 8001382:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001384:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800138e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001392:	1d33      	adds	r3, r6, #4
 8001394:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001396:	6838      	ldr	r0, [r7, #0]
 8001398:	f002 f8e0 	bl	800355c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2101      	movs	r1, #1
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 f95d 	bl	8003662 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	687e      	ldr	r6, [r7, #4]
 80013b0:	466d      	mov	r5, sp
 80013b2:	f106 0410 	add.w	r4, r6, #16
 80013b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80013c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80013c6:	1d33      	adds	r3, r6, #4
 80013c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ca:	6838      	ldr	r0, [r7, #0]
 80013cc:	f002 fa70 	bl	80038b0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013e2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80013e2:	b590      	push	{r4, r7, lr}
 80013e4:	b089      	sub	sp, #36	; 0x24
 80013e6:	af04      	add	r7, sp, #16
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	4608      	mov	r0, r1
 80013ec:	4611      	mov	r1, r2
 80013ee:	461a      	mov	r2, r3
 80013f0:	4603      	mov	r3, r0
 80013f2:	70fb      	strb	r3, [r7, #3]
 80013f4:	460b      	mov	r3, r1
 80013f6:	70bb      	strb	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_HCD_HC_Init+0x28>
 8001406:	2302      	movs	r3, #2
 8001408:	e07f      	b.n	800150a <HAL_HCD_HC_Init+0x128>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001412:	78fa      	ldrb	r2, [r7, #3]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	440b      	add	r3, r1
 8001420:	333d      	adds	r3, #61	; 0x3d
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001426:	78fa      	ldrb	r2, [r7, #3]
 8001428:	6879      	ldr	r1, [r7, #4]
 800142a:	4613      	mov	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4413      	add	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	440b      	add	r3, r1
 8001434:	3338      	adds	r3, #56	; 0x38
 8001436:	787a      	ldrb	r2, [r7, #1]
 8001438:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800143a:	78fa      	ldrb	r2, [r7, #3]
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	440b      	add	r3, r1
 8001448:	3340      	adds	r3, #64	; 0x40
 800144a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800144c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800144e:	78fa      	ldrb	r2, [r7, #3]
 8001450:	6879      	ldr	r1, [r7, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	440b      	add	r3, r1
 800145c:	3339      	adds	r3, #57	; 0x39
 800145e:	78fa      	ldrb	r2, [r7, #3]
 8001460:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001462:	78fa      	ldrb	r2, [r7, #3]
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	440b      	add	r3, r1
 8001470:	333f      	adds	r3, #63	; 0x3f
 8001472:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001476:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001478:	78fa      	ldrb	r2, [r7, #3]
 800147a:	78bb      	ldrb	r3, [r7, #2]
 800147c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001480:	b2d8      	uxtb	r0, r3
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	00db      	lsls	r3, r3, #3
 800148c:	440b      	add	r3, r1
 800148e:	333a      	adds	r3, #58	; 0x3a
 8001490:	4602      	mov	r2, r0
 8001492:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001494:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001498:	2b00      	cmp	r3, #0
 800149a:	da0a      	bge.n	80014b2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800149c:	78fa      	ldrb	r2, [r7, #3]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	440b      	add	r3, r1
 80014aa:	333b      	adds	r3, #59	; 0x3b
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e009      	b.n	80014c6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80014b2:	78fa      	ldrb	r2, [r7, #3]
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	4413      	add	r3, r2
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	440b      	add	r3, r1
 80014c0:	333b      	adds	r3, #59	; 0x3b
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80014c6:	78fa      	ldrb	r2, [r7, #3]
 80014c8:	6879      	ldr	r1, [r7, #4]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	440b      	add	r3, r1
 80014d4:	333c      	adds	r3, #60	; 0x3c
 80014d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014da:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	787c      	ldrb	r4, [r7, #1]
 80014e2:	78ba      	ldrb	r2, [r7, #2]
 80014e4:	78f9      	ldrb	r1, [r7, #3]
 80014e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	4623      	mov	r3, r4
 80014f8:	f002 fb5c 	bl	8003bb4 <USB_HC_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bd90      	pop	{r4, r7, pc}

08001512 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
 800151a:	460b      	mov	r3, r1
 800151c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <HAL_HCD_HC_Halt+0x1e>
 800152c:	2302      	movs	r3, #2
 800152e:	e00f      	b.n	8001550 <HAL_HCD_HC_Halt+0x3e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	78fa      	ldrb	r2, [r7, #3]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f002 fd96 	bl	8004072 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800154e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	4608      	mov	r0, r1
 8001562:	4611      	mov	r1, r2
 8001564:	461a      	mov	r2, r3
 8001566:	4603      	mov	r3, r0
 8001568:	70fb      	strb	r3, [r7, #3]
 800156a:	460b      	mov	r3, r1
 800156c:	70bb      	strb	r3, [r7, #2]
 800156e:	4613      	mov	r3, r2
 8001570:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001572:	78fa      	ldrb	r2, [r7, #3]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4613      	mov	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	4413      	add	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	440b      	add	r3, r1
 8001580:	333b      	adds	r3, #59	; 0x3b
 8001582:	78ba      	ldrb	r2, [r7, #2]
 8001584:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001586:	78fa      	ldrb	r2, [r7, #3]
 8001588:	6879      	ldr	r1, [r7, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	440b      	add	r3, r1
 8001594:	333f      	adds	r3, #63	; 0x3f
 8001596:	787a      	ldrb	r2, [r7, #1]
 8001598:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800159a:	7c3b      	ldrb	r3, [r7, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d114      	bne.n	80015ca <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80015a0:	78fa      	ldrb	r2, [r7, #3]
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4613      	mov	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	440b      	add	r3, r1
 80015ae:	3342      	adds	r3, #66	; 0x42
 80015b0:	2203      	movs	r2, #3
 80015b2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80015b4:	78fa      	ldrb	r2, [r7, #3]
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	440b      	add	r3, r1
 80015c2:	333d      	adds	r3, #61	; 0x3d
 80015c4:	7f3a      	ldrb	r2, [r7, #28]
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	e009      	b.n	80015de <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015ca:	78fa      	ldrb	r2, [r7, #3]
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	4613      	mov	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	4413      	add	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	440b      	add	r3, r1
 80015d8:	3342      	adds	r3, #66	; 0x42
 80015da:	2202      	movs	r2, #2
 80015dc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80015de:	787b      	ldrb	r3, [r7, #1]
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	f200 80d6 	bhi.w	8001792 <HAL_HCD_HC_SubmitRequest+0x23a>
 80015e6:	a201      	add	r2, pc, #4	; (adr r2, 80015ec <HAL_HCD_HC_SubmitRequest+0x94>)
 80015e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ec:	080015fd 	.word	0x080015fd
 80015f0:	0800177d 	.word	0x0800177d
 80015f4:	08001669 	.word	0x08001669
 80015f8:	080016f3 	.word	0x080016f3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80015fc:	7c3b      	ldrb	r3, [r7, #16]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	f040 80c9 	bne.w	8001796 <HAL_HCD_HC_SubmitRequest+0x23e>
 8001604:	78bb      	ldrb	r3, [r7, #2]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 80c5 	bne.w	8001796 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800160c:	8b3b      	ldrh	r3, [r7, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d109      	bne.n	8001626 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001612:	78fa      	ldrb	r2, [r7, #3]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	3351      	adds	r3, #81	; 0x51
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001626:	78fa      	ldrb	r2, [r7, #3]
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	4613      	mov	r3, r2
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	3351      	adds	r3, #81	; 0x51
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d10a      	bne.n	8001652 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800163c:	78fa      	ldrb	r2, [r7, #3]
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	3342      	adds	r3, #66	; 0x42
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001650:	e0a1      	b.n	8001796 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001652:	78fa      	ldrb	r2, [r7, #3]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	440b      	add	r3, r1
 8001660:	3342      	adds	r3, #66	; 0x42
 8001662:	2202      	movs	r2, #2
 8001664:	701a      	strb	r2, [r3, #0]
      break;
 8001666:	e096      	b.n	8001796 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001668:	78bb      	ldrb	r3, [r7, #2]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d120      	bne.n	80016b0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800166e:	78fa      	ldrb	r2, [r7, #3]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	00db      	lsls	r3, r3, #3
 800167a:	440b      	add	r3, r1
 800167c:	3351      	adds	r3, #81	; 0x51
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d10a      	bne.n	800169a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001684:	78fa      	ldrb	r2, [r7, #3]
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	4613      	mov	r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	3342      	adds	r3, #66	; 0x42
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001698:	e07e      	b.n	8001798 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800169a:	78fa      	ldrb	r2, [r7, #3]
 800169c:	6879      	ldr	r1, [r7, #4]
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	440b      	add	r3, r1
 80016a8:	3342      	adds	r3, #66	; 0x42
 80016aa:	2202      	movs	r2, #2
 80016ac:	701a      	strb	r2, [r3, #0]
      break;
 80016ae:	e073      	b.n	8001798 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016b0:	78fa      	ldrb	r2, [r7, #3]
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	4613      	mov	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4413      	add	r3, r2
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	440b      	add	r3, r1
 80016be:	3350      	adds	r3, #80	; 0x50
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10a      	bne.n	80016dc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	440b      	add	r3, r1
 80016d4:	3342      	adds	r3, #66	; 0x42
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
      break;
 80016da:	e05d      	b.n	8001798 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	3342      	adds	r3, #66	; 0x42
 80016ec:	2202      	movs	r2, #2
 80016ee:	701a      	strb	r2, [r3, #0]
      break;
 80016f0:	e052      	b.n	8001798 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80016f2:	78bb      	ldrb	r3, [r7, #2]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d120      	bne.n	800173a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016f8:	78fa      	ldrb	r2, [r7, #3]
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	3351      	adds	r3, #81	; 0x51
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10a      	bne.n	8001724 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800170e:	78fa      	ldrb	r2, [r7, #3]
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	440b      	add	r3, r1
 800171c:	3342      	adds	r3, #66	; 0x42
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001722:	e039      	b.n	8001798 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	4413      	add	r3, r2
 800172e:	00db      	lsls	r3, r3, #3
 8001730:	440b      	add	r3, r1
 8001732:	3342      	adds	r3, #66	; 0x42
 8001734:	2202      	movs	r2, #2
 8001736:	701a      	strb	r2, [r3, #0]
      break;
 8001738:	e02e      	b.n	8001798 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800173a:	78fa      	ldrb	r2, [r7, #3]
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	440b      	add	r3, r1
 8001748:	3350      	adds	r3, #80	; 0x50
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10a      	bne.n	8001766 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	3342      	adds	r3, #66	; 0x42
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
      break;
 8001764:	e018      	b.n	8001798 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001766:	78fa      	ldrb	r2, [r7, #3]
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	3342      	adds	r3, #66	; 0x42
 8001776:	2202      	movs	r2, #2
 8001778:	701a      	strb	r2, [r3, #0]
      break;
 800177a:	e00d      	b.n	8001798 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800177c:	78fa      	ldrb	r2, [r7, #3]
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	3342      	adds	r3, #66	; 0x42
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
      break;
 8001790:	e002      	b.n	8001798 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001792:	bf00      	nop
 8001794:	e000      	b.n	8001798 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001796:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001798:	78fa      	ldrb	r2, [r7, #3]
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	440b      	add	r3, r1
 80017a6:	3344      	adds	r3, #68	; 0x44
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80017ac:	78fa      	ldrb	r2, [r7, #3]
 80017ae:	8b39      	ldrh	r1, [r7, #24]
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4403      	add	r3, r0
 80017bc:	3348      	adds	r3, #72	; 0x48
 80017be:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	440b      	add	r3, r1
 80017ce:	335c      	adds	r3, #92	; 0x5c
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	334c      	adds	r3, #76	; 0x4c
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017e8:	78fa      	ldrb	r2, [r7, #3]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	440b      	add	r3, r1
 80017f6:	3339      	adds	r3, #57	; 0x39
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80017fc:	78fa      	ldrb	r2, [r7, #3]
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	4613      	mov	r3, r2
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	335d      	adds	r3, #93	; 0x5d
 800180c:	2200      	movs	r2, #0
 800180e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	3338      	adds	r3, #56	; 0x38
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	18d1      	adds	r1, r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	f002 facc 	bl	8003dc8 <USB_HC_StartXfer>
 8001830:	4603      	mov	r3, r0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop

0800183c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f001 ffe9 	bl	800382a <USB_GetMode>
 8001858:	4603      	mov	r3, r0
 800185a:	2b01      	cmp	r3, #1
 800185c:	f040 80ef 	bne.w	8001a3e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f001 ffcd 	bl	8003804 <USB_ReadInterrupts>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80e5 	beq.w	8001a3c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f001 ffc4 	bl	8003804 <USB_ReadInterrupts>
 800187c:	4603      	mov	r3, r0
 800187e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001882:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001886:	d104      	bne.n	8001892 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001890:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f001 ffb4 	bl	8003804 <USB_ReadInterrupts>
 800189c:	4603      	mov	r3, r0
 800189e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018a6:	d104      	bne.n	80018b2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 ffa4 	bl	8003804 <USB_ReadInterrupts>
 80018bc:	4603      	mov	r3, r0
 80018be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80018c6:	d104      	bne.n	80018d2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f001 ff94 	bl	8003804 <USB_ReadInterrupts>
 80018dc:	4603      	mov	r3, r0
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d103      	bne.n	80018ee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2202      	movs	r2, #2
 80018ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 ff86 	bl	8003804 <USB_ReadInterrupts>
 80018f8:	4603      	mov	r3, r0
 80018fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001902:	d115      	bne.n	8001930 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800190c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d108      	bne.n	8001930 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f004 fd2e 	bl	8006380 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2101      	movs	r1, #1
 800192a:	4618      	mov	r0, r3
 800192c:	f002 f87c 	bl	8003a28 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f001 ff65 	bl	8003804 <USB_ReadInterrupts>
 800193a:	4603      	mov	r3, r0
 800193c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001944:	d102      	bne.n	800194c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f001 f966 	bl	8002c18 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4618      	mov	r0, r3
 8001952:	f001 ff57 	bl	8003804 <USB_ReadInterrupts>
 8001956:	4603      	mov	r3, r0
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b08      	cmp	r3, #8
 800195e:	d106      	bne.n	800196e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f004 fcf1 	bl	8006348 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2208      	movs	r2, #8
 800196c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f001 ff46 	bl	8003804 <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001982:	d138      	bne.n	80019f6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f002 fb61 	bl	8004050 <USB_HC_ReadInterrupt>
 800198e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	e025      	b.n	80019e2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	fa22 f303 	lsr.w	r3, r2, r3
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d018      	beq.n	80019dc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	015a      	lsls	r2, r3, #5
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4413      	add	r3, r2
 80019b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019c0:	d106      	bne.n	80019d0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	4619      	mov	r1, r3
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f8cf 	bl	8001b6c <HCD_HC_IN_IRQHandler>
 80019ce:	e005      	b.n	80019dc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	4619      	mov	r1, r3
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fcfd 	bl	80023d6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3301      	adds	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d3d4      	bcc.n	8001996 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 ff02 	bl	8003804 <USB_ReadInterrupts>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f003 0310 	and.w	r3, r3, #16
 8001a06:	2b10      	cmp	r3, #16
 8001a08:	d101      	bne.n	8001a0e <HAL_HCD_IRQHandler+0x1d2>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e000      	b.n	8001a10 <HAL_HCD_IRQHandler+0x1d4>
 8001a0e:	2300      	movs	r3, #0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d014      	beq.n	8001a3e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	699a      	ldr	r2, [r3, #24]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0210 	bic.w	r2, r2, #16
 8001a22:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f001 f84b 	bl	8002ac0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	699a      	ldr	r2, [r3, #24]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f042 0210 	orr.w	r2, r2, #16
 8001a38:	619a      	str	r2, [r3, #24]
 8001a3a:	e000      	b.n	8001a3e <HAL_HCD_IRQHandler+0x202>
      return;
 8001a3c:	bf00      	nop
    }
  }
}
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_HCD_Start+0x16>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e013      	b.n	8001a82 <HAL_HCD_Start+0x3e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 fdd9 	bl	800361e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2101      	movs	r1, #1
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 f83c 	bl	8003af0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_HCD_Stop+0x16>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e00d      	b.n	8001abc <HAL_HCD_Stop+0x32>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 fc1b 	bl	80042e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f001 ffe3 	bl	8003a9c <USB_ResetPort>
 8001ad6:	4603      	mov	r3, r0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001aec:	78fa      	ldrb	r2, [r7, #3]
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	4613      	mov	r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	4413      	add	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	440b      	add	r3, r1
 8001afa:	335c      	adds	r3, #92	; 0x5c
 8001afc:	781b      	ldrb	r3, [r3, #0]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b16:	78fa      	ldrb	r2, [r7, #3]
 8001b18:	6879      	ldr	r1, [r7, #4]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	334c      	adds	r3, #76	; 0x4c
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 f825 	bl	8003b90 <USB_GetCurrentFrame>
 8001b46:	4603      	mov	r3, r0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f002 f800 	bl	8003b62 <USB_GetHostSpeed>
 8001b62:	4603      	mov	r3, r0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b82:	78fb      	ldrb	r3, [r7, #3]
 8001b84:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	015a      	lsls	r2, r3, #5
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	2b04      	cmp	r3, #4
 8001b9a:	d119      	bne.n	8001bd0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	015a      	lsls	r2, r3, #5
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba8:	461a      	mov	r2, r3
 8001baa:	2304      	movs	r3, #4
 8001bac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	015a      	lsls	r2, r3, #5
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	0151      	lsls	r1, r2, #5
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	440a      	add	r2, r1
 8001bc4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	60d3      	str	r3, [r2, #12]
 8001bce:	e0ce      	b.n	8001d6e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	015a      	lsls	r2, r3, #5
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001be6:	d12c      	bne.n	8001c42 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	015a      	lsls	r2, r3, #5
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4413      	add	r3, r2
 8001bf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	4613      	mov	r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	4413      	add	r3, r2
 8001c06:	00db      	lsls	r3, r3, #3
 8001c08:	440b      	add	r3, r1
 8001c0a:	335d      	adds	r3, #93	; 0x5d
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	015a      	lsls	r2, r3, #5
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4413      	add	r3, r2
 8001c18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	0151      	lsls	r1, r2, #5
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	440a      	add	r2, r1
 8001c26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c2a:	f043 0302 	orr.w	r3, r3, #2
 8001c2e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	4611      	mov	r1, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 fa19 	bl	8004072 <USB_HC_Halt>
 8001c40:	e095      	b.n	8001d6e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	015a      	lsls	r2, r3, #5
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0320 	and.w	r3, r3, #32
 8001c54:	2b20      	cmp	r3, #32
 8001c56:	d109      	bne.n	8001c6c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	015a      	lsls	r2, r3, #5
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c64:	461a      	mov	r2, r3
 8001c66:	2320      	movs	r3, #32
 8001c68:	6093      	str	r3, [r2, #8]
 8001c6a:	e080      	b.n	8001d6e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	015a      	lsls	r2, r3, #5
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d134      	bne.n	8001cec <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	015a      	lsls	r2, r3, #5
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	0151      	lsls	r1, r2, #5
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	440a      	add	r2, r1
 8001c98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c9c:	f043 0302 	orr.w	r3, r3, #2
 8001ca0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	335d      	adds	r3, #93	; 0x5d
 8001cb2:	2205      	movs	r2, #5
 8001cb4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	015a      	lsls	r2, r3, #5
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2310      	movs	r3, #16
 8001cc6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	015a      	lsls	r2, r3, #5
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f002 f9c4 	bl	8004072 <USB_HC_Halt>
 8001cea:	e040      	b.n	8001d6e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	015a      	lsls	r2, r3, #5
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d02:	d134      	bne.n	8001d6e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	015a      	lsls	r2, r3, #5
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	0151      	lsls	r1, r2, #5
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	440a      	add	r2, r1
 8001d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f002 f99f 	bl	8004072 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	015a      	lsls	r2, r3, #5
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d40:	461a      	mov	r2, r3
 8001d42:	2310      	movs	r3, #16
 8001d44:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	335d      	adds	r3, #93	; 0x5d
 8001d56:	2208      	movs	r2, #8
 8001d58:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	015a      	lsls	r2, r3, #5
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d66:	461a      	mov	r2, r3
 8001d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	015a      	lsls	r2, r3, #5
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4413      	add	r3, r2
 8001d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d84:	d122      	bne.n	8001dcc <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	015a      	lsls	r2, r3, #5
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	0151      	lsls	r1, r2, #5
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	440a      	add	r2, r1
 8001d9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	4611      	mov	r1, r2
 8001db0:	4618      	mov	r0, r3
 8001db2:	f002 f95e 	bl	8004072 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	015a      	lsls	r2, r3, #5
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dc8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001dca:	e300      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	f040 80fd 	bne.w	8001fde <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d01b      	beq.n	8001e24 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	440b      	add	r3, r1
 8001dfa:	3348      	adds	r3, #72	; 0x48
 8001dfc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	0159      	lsls	r1, r3, #5
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	440b      	add	r3, r1
 8001e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001e10:	1ad1      	subs	r1, r2, r3
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	00db      	lsls	r3, r3, #3
 8001e1e:	4403      	add	r3, r0
 8001e20:	334c      	adds	r3, #76	; 0x4c
 8001e22:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	440b      	add	r3, r1
 8001e32:	335d      	adds	r3, #93	; 0x5d
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	4413      	add	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	440b      	add	r3, r1
 8001e46:	3358      	adds	r3, #88	; 0x58
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	015a      	lsls	r2, r3, #5
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4413      	add	r3, r2
 8001e54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	440b      	add	r3, r1
 8001e6c:	333f      	adds	r3, #63	; 0x3f
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00a      	beq.n	8001e8a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001e74:	6879      	ldr	r1, [r7, #4]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	333f      	adds	r3, #63	; 0x3f
 8001e84:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d121      	bne.n	8001ece <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	0151      	lsls	r1, r2, #5
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	440a      	add	r2, r1
 8001ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 f8dc 	bl	8004072 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2310      	movs	r3, #16
 8001eca:	6093      	str	r3, [r2, #8]
 8001ecc:	e070      	b.n	8001fb0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	333f      	adds	r3, #63	; 0x3f
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d12a      	bne.n	8001f3a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	0151      	lsls	r1, r2, #5
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	440a      	add	r2, r1
 8001efa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001efe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f02:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	440b      	add	r3, r1
 8001f12:	335c      	adds	r3, #92	; 0x5c
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	b2d8      	uxtb	r0, r3
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	440b      	add	r3, r1
 8001f2a:	335c      	adds	r3, #92	; 0x5c
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4601      	mov	r1, r0
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f004 fa32 	bl	800639c <HAL_HCD_HC_NotifyURBChange_Callback>
 8001f38:	e03a      	b.n	8001fb0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	333f      	adds	r3, #63	; 0x3f
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d12f      	bne.n	8001fb0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	440b      	add	r3, r1
 8001f5e:	335c      	adds	r3, #92	; 0x5c
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	3350      	adds	r3, #80	; 0x50
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	f083 0301 	eor.w	r3, r3, #1
 8001f7a:	b2d8      	uxtb	r0, r3
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	3350      	adds	r3, #80	; 0x50
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	b2d8      	uxtb	r0, r3
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	68fa      	ldr	r2, [r7, #12]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	440b      	add	r3, r1
 8001fa2:	335c      	adds	r3, #92	; 0x5c
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4601      	mov	r1, r0
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f004 f9f6 	bl	800639c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3350      	adds	r3, #80	; 0x50
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	f083 0301 	eor.w	r3, r3, #1
 8001fc6:	b2d8      	uxtb	r0, r3
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3350      	adds	r3, #80	; 0x50
 8001fd8:	4602      	mov	r2, r0
 8001fda:	701a      	strb	r2, [r3, #0]
}
 8001fdc:	e1f7      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	f040 811a 	bne.w	800222a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	68fa      	ldr	r2, [r7, #12]
 8002006:	0151      	lsls	r1, r2, #5
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	440a      	add	r2, r1
 800200c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002010:	f023 0302 	bic.w	r3, r3, #2
 8002014:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4613      	mov	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	335d      	adds	r3, #93	; 0x5d
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d10a      	bne.n	8002042 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	335c      	adds	r3, #92	; 0x5c
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	e0d9      	b.n	80021f6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	440b      	add	r3, r1
 8002050:	335d      	adds	r3, #93	; 0x5d
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b05      	cmp	r3, #5
 8002056:	d10a      	bne.n	800206e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	440b      	add	r3, r1
 8002066:	335c      	adds	r3, #92	; 0x5c
 8002068:	2205      	movs	r2, #5
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e0c3      	b.n	80021f6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	335d      	adds	r3, #93	; 0x5d
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b06      	cmp	r3, #6
 8002082:	d00a      	beq.n	800209a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4613      	mov	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	440b      	add	r3, r1
 8002092:	335d      	adds	r3, #93	; 0x5d
 8002094:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002096:	2b08      	cmp	r3, #8
 8002098:	d156      	bne.n	8002148 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	3358      	adds	r3, #88	; 0x58
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	1c59      	adds	r1, r3, #1
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4403      	add	r3, r0
 80020bc:	3358      	adds	r3, #88	; 0x58
 80020be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	3358      	adds	r3, #88	; 0x58
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b03      	cmp	r3, #3
 80020d4:	d914      	bls.n	8002100 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	440b      	add	r3, r1
 80020e4:	3358      	adds	r3, #88	; 0x58
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	440b      	add	r3, r1
 80020f8:	335c      	adds	r3, #92	; 0x5c
 80020fa:	2204      	movs	r2, #4
 80020fc:	701a      	strb	r2, [r3, #0]
 80020fe:	e009      	b.n	8002114 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	335c      	adds	r3, #92	; 0x5c
 8002110:	2202      	movs	r2, #2
 8002112:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	015a      	lsls	r2, r3, #5
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800212a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002132:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	015a      	lsls	r2, r3, #5
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4413      	add	r3, r2
 800213c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002140:	461a      	mov	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e056      	b.n	80021f6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	4613      	mov	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	4413      	add	r3, r2
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	440b      	add	r3, r1
 8002156:	335d      	adds	r3, #93	; 0x5d
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d123      	bne.n	80021a6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	335c      	adds	r3, #92	; 0x5c
 800216e:	2202      	movs	r2, #2
 8002170:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	015a      	lsls	r2, r3, #5
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4413      	add	r3, r2
 800217a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002188:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002190:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800219e:	461a      	mov	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	e027      	b.n	80021f6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	440b      	add	r3, r1
 80021b4:	335d      	adds	r3, #93	; 0x5d
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b07      	cmp	r3, #7
 80021ba:	d11c      	bne.n	80021f6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	440b      	add	r3, r1
 80021ca:	3358      	adds	r3, #88	; 0x58
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	1c59      	adds	r1, r3, #1
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4403      	add	r3, r0
 80021de:	3358      	adds	r3, #88	; 0x58
 80021e0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	00db      	lsls	r3, r3, #3
 80021ee:	440b      	add	r3, r1
 80021f0:	335c      	adds	r3, #92	; 0x5c
 80021f2:	2204      	movs	r2, #4
 80021f4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	461a      	mov	r2, r3
 8002204:	2302      	movs	r3, #2
 8002206:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	b2d8      	uxtb	r0, r3
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	440b      	add	r3, r1
 800221a:	335c      	adds	r3, #92	; 0x5c
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	4601      	mov	r1, r0
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f004 f8ba 	bl	800639c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002228:	e0d1      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4413      	add	r3, r2
 8002232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223c:	2b80      	cmp	r3, #128	; 0x80
 800223e:	d13e      	bne.n	80022be <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	015a      	lsls	r2, r3, #5
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4413      	add	r3, r2
 8002248:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	0151      	lsls	r1, r2, #5
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	440a      	add	r2, r1
 8002256:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800225a:	f043 0302 	orr.w	r3, r3, #2
 800225e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	440b      	add	r3, r1
 800226e:	3358      	adds	r3, #88	; 0x58
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	1c59      	adds	r1, r3, #1
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4403      	add	r3, r0
 8002282:	3358      	adds	r3, #88	; 0x58
 8002284:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	440b      	add	r3, r1
 8002294:	335d      	adds	r3, #93	; 0x5d
 8002296:	2206      	movs	r2, #6
 8002298:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	b2d2      	uxtb	r2, r2
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f001 fee4 	bl	8004072 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	015a      	lsls	r2, r3, #5
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b6:	461a      	mov	r2, r3
 80022b8:	2380      	movs	r3, #128	; 0x80
 80022ba:	6093      	str	r3, [r2, #8]
}
 80022bc:	e087      	b.n	80023ce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d17c      	bne.n	80023ce <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	440b      	add	r3, r1
 80022e2:	333f      	adds	r3, #63	; 0x3f
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d122      	bne.n	8002330 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	3358      	adds	r3, #88	; 0x58
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4413      	add	r3, r2
 8002306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	0151      	lsls	r1, r2, #5
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	440a      	add	r2, r1
 8002314:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f001 fea2 	bl	8004072 <USB_HC_Halt>
 800232e:	e045      	b.n	80023bc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4613      	mov	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	440b      	add	r3, r1
 800233e:	333f      	adds	r3, #63	; 0x3f
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	440b      	add	r3, r1
 8002354:	333f      	adds	r3, #63	; 0x3f
 8002356:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002358:	2b02      	cmp	r3, #2
 800235a:	d12f      	bne.n	80023bc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	3358      	adds	r3, #88	; 0x58
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d121      	bne.n	80023bc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	440b      	add	r3, r1
 8002386:	335d      	adds	r3, #93	; 0x5d
 8002388:	2203      	movs	r2, #3
 800238a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4413      	add	r3, r2
 8002394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	0151      	lsls	r1, r2, #5
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	440a      	add	r2, r1
 80023a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023a6:	f043 0302 	orr.w	r3, r3, #2
 80023aa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	4611      	mov	r1, r2
 80023b6:	4618      	mov	r0, r3
 80023b8:	f001 fe5b 	bl	8004072 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c8:	461a      	mov	r2, r3
 80023ca:	2310      	movs	r3, #16
 80023cc:	6093      	str	r3, [r2, #8]
}
 80023ce:	bf00      	nop
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b04      	cmp	r3, #4
 8002404:	d119      	bne.n	800243a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	015a      	lsls	r2, r3, #5
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	4413      	add	r3, r2
 800240e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002412:	461a      	mov	r2, r3
 8002414:	2304      	movs	r3, #4
 8002416:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	015a      	lsls	r2, r3, #5
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4413      	add	r3, r2
 8002420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	0151      	lsls	r1, r2, #5
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	440a      	add	r2, r1
 800242e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002432:	f043 0302 	orr.w	r3, r3, #2
 8002436:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002438:	e33e      	b.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4413      	add	r3, r2
 8002442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b20      	cmp	r3, #32
 800244e:	d141      	bne.n	80024d4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	015a      	lsls	r2, r3, #5
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	4413      	add	r3, r2
 8002458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800245c:	461a      	mov	r2, r3
 800245e:	2320      	movs	r3, #32
 8002460:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	440b      	add	r3, r1
 8002470:	333d      	adds	r3, #61	; 0x3d
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	f040 831f 	bne.w	8002ab8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	4613      	mov	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4413      	add	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	440b      	add	r3, r1
 8002488:	333d      	adds	r3, #61	; 0x3d
 800248a:	2200      	movs	r2, #0
 800248c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	440b      	add	r3, r1
 800249c:	335c      	adds	r3, #92	; 0x5c
 800249e:	2202      	movs	r2, #2
 80024a0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	015a      	lsls	r2, r3, #5
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	4413      	add	r3, r2
 80024aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	0151      	lsls	r1, r2, #5
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	440a      	add	r2, r1
 80024b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	4611      	mov	r1, r2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 fdd0 	bl	8004072 <USB_HC_Halt>
}
 80024d2:	e2f1      	b.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e6:	2b40      	cmp	r3, #64	; 0x40
 80024e8:	d13f      	bne.n	800256a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	335d      	adds	r3, #93	; 0x5d
 80024fa:	2204      	movs	r2, #4
 80024fc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4613      	mov	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	4413      	add	r3, r2
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	440b      	add	r3, r1
 800250c:	333d      	adds	r3, #61	; 0x3d
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	00db      	lsls	r3, r3, #3
 800251e:	440b      	add	r3, r1
 8002520:	3358      	adds	r3, #88	; 0x58
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	015a      	lsls	r2, r3, #5
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	4413      	add	r3, r2
 800252e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	0151      	lsls	r1, r2, #5
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	440a      	add	r2, r1
 800253c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002540:	f043 0302 	orr.w	r3, r3, #2
 8002544:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f001 fd8e 	bl	8004072 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4413      	add	r3, r2
 800255e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002562:	461a      	mov	r2, r3
 8002564:	2340      	movs	r3, #64	; 0x40
 8002566:	6093      	str	r3, [r2, #8]
}
 8002568:	e2a6      	b.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002580:	d122      	bne.n	80025c8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	015a      	lsls	r2, r3, #5
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4413      	add	r3, r2
 800258a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	0151      	lsls	r1, r2, #5
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	440a      	add	r2, r1
 8002598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800259c:	f043 0302 	orr.w	r3, r3, #2
 80025a0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f001 fd60 	bl	8004072 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025be:	461a      	mov	r2, r3
 80025c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025c4:	6093      	str	r3, [r2, #8]
}
 80025c6:	e277      	b.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d135      	bne.n	800264a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	440b      	add	r3, r1
 80025ec:	3358      	adds	r3, #88	; 0x58
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	0151      	lsls	r1, r2, #5
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	440a      	add	r2, r1
 8002608:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f001 fd28 	bl	8004072 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262e:	461a      	mov	r2, r3
 8002630:	2301      	movs	r3, #1
 8002632:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	4613      	mov	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4413      	add	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	440b      	add	r3, r1
 8002642:	335d      	adds	r3, #93	; 0x5d
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
}
 8002648:	e236      	b.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	015a      	lsls	r2, r3, #5
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4413      	add	r3, r2
 8002652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b08      	cmp	r3, #8
 800265e:	d12b      	bne.n	80026b8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	461a      	mov	r2, r3
 800266e:	2308      	movs	r3, #8
 8002670:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	0151      	lsls	r1, r2, #5
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	440a      	add	r2, r1
 8002688:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	4611      	mov	r1, r2
 800269c:	4618      	mov	r0, r3
 800269e:	f001 fce8 	bl	8004072 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	440b      	add	r3, r1
 80026b0:	335d      	adds	r3, #93	; 0x5d
 80026b2:	2205      	movs	r2, #5
 80026b4:	701a      	strb	r2, [r3, #0]
}
 80026b6:	e1ff      	b.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d155      	bne.n	800277a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4613      	mov	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	3358      	adds	r3, #88	; 0x58
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	440b      	add	r3, r1
 80026f0:	335d      	adds	r3, #93	; 0x5d
 80026f2:	2203      	movs	r2, #3
 80026f4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	440b      	add	r3, r1
 8002704:	333d      	adds	r3, #61	; 0x3d
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d114      	bne.n	8002736 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	440b      	add	r3, r1
 800271a:	333c      	adds	r3, #60	; 0x3c
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	333d      	adds	r3, #61	; 0x3d
 8002732:	2201      	movs	r2, #1
 8002734:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	0151      	lsls	r1, r2, #5
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	440a      	add	r2, r1
 800274c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	4611      	mov	r1, r2
 8002760:	4618      	mov	r0, r3
 8002762:	f001 fc86 	bl	8004072 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002772:	461a      	mov	r2, r3
 8002774:	2310      	movs	r3, #16
 8002776:	6093      	str	r3, [r2, #8]
}
 8002778:	e19e      	b.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4413      	add	r3, r2
 8002782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800278c:	2b80      	cmp	r3, #128	; 0x80
 800278e:	d12b      	bne.n	80027e8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	0151      	lsls	r1, r2, #5
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	440a      	add	r2, r1
 80027a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027aa:	f043 0302 	orr.w	r3, r3, #2
 80027ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f001 fc59 	bl	8004072 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	440b      	add	r3, r1
 80027ce:	335d      	adds	r3, #93	; 0x5d
 80027d0:	2206      	movs	r2, #6
 80027d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	461a      	mov	r2, r3
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	6093      	str	r3, [r2, #8]
}
 80027e6:	e167      	b.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fe:	d135      	bne.n	800286c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	0151      	lsls	r1, r2, #5
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	440a      	add	r2, r1
 8002816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800281a:	f043 0302 	orr.w	r3, r3, #2
 800281e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f001 fc21 	bl	8004072 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4413      	add	r3, r2
 8002838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800283c:	461a      	mov	r2, r3
 800283e:	2310      	movs	r3, #16
 8002840:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	015a      	lsls	r2, r3, #5
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4413      	add	r3, r2
 800284a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800284e:	461a      	mov	r2, r3
 8002850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002854:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	335d      	adds	r3, #93	; 0x5d
 8002866:	2208      	movs	r2, #8
 8002868:	701a      	strb	r2, [r3, #0]
}
 800286a:	e125      	b.n	8002ab8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	015a      	lsls	r2, r3, #5
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4413      	add	r3, r2
 8002874:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b02      	cmp	r3, #2
 8002880:	f040 811a 	bne.w	8002ab8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	0151      	lsls	r1, r2, #5
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	440a      	add	r2, r1
 800289a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800289e:	f023 0302 	bic.w	r3, r3, #2
 80028a2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	335d      	adds	r3, #93	; 0x5d
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d137      	bne.n	800292a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	335c      	adds	r3, #92	; 0x5c
 80028ca:	2201      	movs	r2, #1
 80028cc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	333f      	adds	r3, #63	; 0x3f
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d00b      	beq.n	80028fc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	440b      	add	r3, r1
 80028f2:	333f      	adds	r3, #63	; 0x3f
 80028f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	f040 80c5 	bne.w	8002a86 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	440b      	add	r3, r1
 800290a:	3351      	adds	r3, #81	; 0x51
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	f083 0301 	eor.w	r3, r3, #1
 8002912:	b2d8      	uxtb	r0, r3
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	440b      	add	r3, r1
 8002922:	3351      	adds	r3, #81	; 0x51
 8002924:	4602      	mov	r2, r0
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	e0ad      	b.n	8002a86 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4613      	mov	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	4413      	add	r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	440b      	add	r3, r1
 8002938:	335d      	adds	r3, #93	; 0x5d
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d10a      	bne.n	8002956 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	335c      	adds	r3, #92	; 0x5c
 8002950:	2202      	movs	r2, #2
 8002952:	701a      	strb	r2, [r3, #0]
 8002954:	e097      	b.n	8002a86 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	440b      	add	r3, r1
 8002964:	335d      	adds	r3, #93	; 0x5d
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b04      	cmp	r3, #4
 800296a:	d10a      	bne.n	8002982 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	335c      	adds	r3, #92	; 0x5c
 800297c:	2202      	movs	r2, #2
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	e081      	b.n	8002a86 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	68fa      	ldr	r2, [r7, #12]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	440b      	add	r3, r1
 8002990:	335d      	adds	r3, #93	; 0x5d
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b05      	cmp	r3, #5
 8002996:	d10a      	bne.n	80029ae <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	335c      	adds	r3, #92	; 0x5c
 80029a8:	2205      	movs	r2, #5
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	e06b      	b.n	8002a86 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	440b      	add	r3, r1
 80029bc:	335d      	adds	r3, #93	; 0x5d
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b06      	cmp	r3, #6
 80029c2:	d00a      	beq.n	80029da <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	440b      	add	r3, r1
 80029d2:	335d      	adds	r3, #93	; 0x5d
 80029d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029d6:	2b08      	cmp	r3, #8
 80029d8:	d155      	bne.n	8002a86 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	3358      	adds	r3, #88	; 0x58
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	1c59      	adds	r1, r3, #1
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4403      	add	r3, r0
 80029fc:	3358      	adds	r3, #88	; 0x58
 80029fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3358      	adds	r3, #88	; 0x58
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d914      	bls.n	8002a40 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	3358      	adds	r3, #88	; 0x58
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	335c      	adds	r3, #92	; 0x5c
 8002a3a:	2204      	movs	r2, #4
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e009      	b.n	8002a54 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	335c      	adds	r3, #92	; 0x5c
 8002a50:	2202      	movs	r2, #2
 8002a52:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a6a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a72:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	461a      	mov	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a92:	461a      	mov	r2, r3
 8002a94:	2302      	movs	r3, #2
 8002a96:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	b2d8      	uxtb	r0, r3
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	440b      	add	r3, r1
 8002aaa:	335c      	adds	r3, #92	; 0x5c
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	4601      	mov	r1, r0
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f003 fc72 	bl	800639c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ab8:	bf00      	nop
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08a      	sub	sp, #40	; 0x28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	0c5b      	lsrs	r3, r3, #17
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	091b      	lsrs	r3, r3, #4
 8002af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d003      	beq.n	8002b04 <HCD_RXQLVL_IRQHandler+0x44>
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	f000 8082 	beq.w	8002c06 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002b02:	e083      	b.n	8002c0c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d07f      	beq.n	8002c0a <HCD_RXQLVL_IRQHandler+0x14a>
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	3344      	adds	r3, #68	; 0x44
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d074      	beq.n	8002c0a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	6879      	ldr	r1, [r7, #4]
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	3344      	adds	r3, #68	; 0x44
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	b292      	uxth	r2, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f000 fe39 	bl	80037b2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3344      	adds	r3, #68	; 0x44
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	18d1      	adds	r1, r2, r3
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4403      	add	r3, r0
 8002b64:	3344      	adds	r3, #68	; 0x44
 8002b66:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	440b      	add	r3, r1
 8002b76:	334c      	adds	r3, #76	; 0x4c
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	18d1      	adds	r1, r2, r3
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4403      	add	r3, r0
 8002b8c:	334c      	adds	r3, #76	; 0x4c
 8002b8e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <HCD_RXQLVL_IRQHandler+0x154>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d031      	beq.n	8002c0a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002bbc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bc4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	015a      	lsls	r2, r3, #5
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	440b      	add	r3, r1
 8002be6:	3350      	adds	r3, #80	; 0x50
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	f083 0301 	eor.w	r3, r3, #1
 8002bee:	b2d8      	uxtb	r0, r3
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3350      	adds	r3, #80	; 0x50
 8002c00:	4602      	mov	r2, r0
 8002c02:	701a      	strb	r2, [r3, #0]
      break;
 8002c04:	e001      	b.n	8002c0a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002c0a:	bf00      	nop
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	3728      	adds	r7, #40	; 0x28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	1ff80000 	.word	0x1ff80000

08002c18 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002c44:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d10b      	bne.n	8002c68 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d102      	bne.n	8002c60 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f003 fb82 	bl	8006364 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f043 0302 	orr.w	r3, r3, #2
 8002c66:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d132      	bne.n	8002cd8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f043 0308 	orr.w	r3, r3, #8
 8002c78:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f003 0304 	and.w	r3, r3, #4
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d126      	bne.n	8002cd2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d113      	bne.n	8002cb4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002c92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c96:	d106      	bne.n	8002ca6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fec2 	bl	8003a28 <USB_InitFSLSPClkSel>
 8002ca4:	e011      	b.n	8002cca <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2101      	movs	r1, #1
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 febb 	bl	8003a28 <USB_InitFSLSPClkSel>
 8002cb2:	e00a      	b.n	8002cca <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d106      	bne.n	8002cca <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002cc8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f003 fb74 	bl	80063b8 <HAL_HCD_PortEnabled_Callback>
 8002cd0:	e002      	b.n	8002cd8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f003 fb7e 	bl	80063d4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0320 	and.w	r3, r3, #32
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	d103      	bne.n	8002cea <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f043 0320 	orr.w	r3, r3, #32
 8002ce8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	6013      	str	r3, [r2, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e25b      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d075      	beq.n	8002e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d1e:	4ba3      	ldr	r3, [pc, #652]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d00c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2a:	4ba0      	ldr	r3, [pc, #640]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d112      	bne.n	8002d5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d36:	4b9d      	ldr	r3, [pc, #628]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d42:	d10b      	bne.n	8002d5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	4b99      	ldr	r3, [pc, #612]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d05b      	beq.n	8002e08 <HAL_RCC_OscConfig+0x108>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d157      	bne.n	8002e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e236      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d64:	d106      	bne.n	8002d74 <HAL_RCC_OscConfig+0x74>
 8002d66:	4b91      	ldr	r3, [pc, #580]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a90      	ldr	r2, [pc, #576]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e01d      	b.n	8002db0 <HAL_RCC_OscConfig+0xb0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x98>
 8002d7e:	4b8b      	ldr	r3, [pc, #556]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a8a      	ldr	r2, [pc, #552]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b88      	ldr	r3, [pc, #544]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a87      	ldr	r2, [pc, #540]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e00b      	b.n	8002db0 <HAL_RCC_OscConfig+0xb0>
 8002d98:	4b84      	ldr	r3, [pc, #528]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a83      	ldr	r2, [pc, #524]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b81      	ldr	r3, [pc, #516]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a80      	ldr	r2, [pc, #512]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fd ffbe 	bl	8000d38 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7fd ffba 	bl	8000d38 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	; 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e1fb      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd2:	4b76      	ldr	r3, [pc, #472]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xc0>
 8002dde:	e014      	b.n	8002e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de0:	f7fd ffaa 	bl	8000d38 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002de8:	f7fd ffa6 	bl	8000d38 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	; 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e1e7      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfa:	4b6c      	ldr	r3, [pc, #432]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0xe8>
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d063      	beq.n	8002ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e16:	4b65      	ldr	r3, [pc, #404]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00b      	beq.n	8002e3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e22:	4b62      	ldr	r3, [pc, #392]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d11c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e2e:	4b5f      	ldr	r3, [pc, #380]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d116      	bne.n	8002e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	4b5c      	ldr	r3, [pc, #368]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <HAL_RCC_OscConfig+0x152>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d001      	beq.n	8002e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e1bb      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e52:	4b56      	ldr	r3, [pc, #344]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4952      	ldr	r1, [pc, #328]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e66:	e03a      	b.n	8002ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d020      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e70:	4b4f      	ldr	r3, [pc, #316]	; (8002fb0 <HAL_RCC_OscConfig+0x2b0>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fd ff5f 	bl	8000d38 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e7e:	f7fd ff5b 	bl	8000d38 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e19c      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e90:	4b46      	ldr	r3, [pc, #280]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9c:	4b43      	ldr	r3, [pc, #268]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4940      	ldr	r1, [pc, #256]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]
 8002eb0:	e015      	b.n	8002ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <HAL_RCC_OscConfig+0x2b0>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb8:	f7fd ff3e 	bl	8000d38 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec0:	f7fd ff3a 	bl	8000d38 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e17b      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ed2:	4b36      	ldr	r3, [pc, #216]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f0      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d030      	beq.n	8002f4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d016      	beq.n	8002f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ef2:	4b30      	ldr	r3, [pc, #192]	; (8002fb4 <HAL_RCC_OscConfig+0x2b4>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef8:	f7fd ff1e 	bl	8000d38 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f00:	f7fd ff1a 	bl	8000d38 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e15b      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f12:	4b26      	ldr	r3, [pc, #152]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x200>
 8002f1e:	e015      	b.n	8002f4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f20:	4b24      	ldr	r3, [pc, #144]	; (8002fb4 <HAL_RCC_OscConfig+0x2b4>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f26:	f7fd ff07 	bl	8000d38 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2e:	f7fd ff03 	bl	8000d38 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e144      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a0 	beq.w	800309a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5e:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10f      	bne.n	8002f8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	4a0e      	ldr	r2, [pc, #56]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f78:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	60bb      	str	r3, [r7, #8]
 8002f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_OscConfig+0x2b8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d121      	bne.n	8002fda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <HAL_RCC_OscConfig+0x2b8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a07      	ldr	r2, [pc, #28]	; (8002fb8 <HAL_RCC_OscConfig+0x2b8>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fa2:	f7fd fec9 	bl	8000d38 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa8:	e011      	b.n	8002fce <HAL_RCC_OscConfig+0x2ce>
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	42470000 	.word	0x42470000
 8002fb4:	42470e80 	.word	0x42470e80
 8002fb8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fbc:	f7fd febc 	bl	8000d38 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e0fd      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fce:	4b81      	ldr	r3, [pc, #516]	; (80031d4 <HAL_RCC_OscConfig+0x4d4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d106      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x2f0>
 8002fe2:	4b7d      	ldr	r3, [pc, #500]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a7c      	ldr	r2, [pc, #496]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 8002fe8:	f043 0301 	orr.w	r3, r3, #1
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70
 8002fee:	e01c      	b.n	800302a <HAL_RCC_OscConfig+0x32a>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b05      	cmp	r3, #5
 8002ff6:	d10c      	bne.n	8003012 <HAL_RCC_OscConfig+0x312>
 8002ff8:	4b77      	ldr	r3, [pc, #476]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	4a76      	ldr	r2, [pc, #472]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	6713      	str	r3, [r2, #112]	; 0x70
 8003004:	4b74      	ldr	r3, [pc, #464]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 8003006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003008:	4a73      	ldr	r2, [pc, #460]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	6713      	str	r3, [r2, #112]	; 0x70
 8003010:	e00b      	b.n	800302a <HAL_RCC_OscConfig+0x32a>
 8003012:	4b71      	ldr	r3, [pc, #452]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	4a70      	ldr	r2, [pc, #448]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 8003018:	f023 0301 	bic.w	r3, r3, #1
 800301c:	6713      	str	r3, [r2, #112]	; 0x70
 800301e:	4b6e      	ldr	r3, [pc, #440]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a6d      	ldr	r2, [pc, #436]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 8003024:	f023 0304 	bic.w	r3, r3, #4
 8003028:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d015      	beq.n	800305e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003032:	f7fd fe81 	bl	8000d38 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003038:	e00a      	b.n	8003050 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800303a:	f7fd fe7d 	bl	8000d38 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	f241 3288 	movw	r2, #5000	; 0x1388
 8003048:	4293      	cmp	r3, r2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e0bc      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003050:	4b61      	ldr	r3, [pc, #388]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 8003052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0ee      	beq.n	800303a <HAL_RCC_OscConfig+0x33a>
 800305c:	e014      	b.n	8003088 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800305e:	f7fd fe6b 	bl	8000d38 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003064:	e00a      	b.n	800307c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003066:	f7fd fe67 	bl	8000d38 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f241 3288 	movw	r2, #5000	; 0x1388
 8003074:	4293      	cmp	r3, r2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e0a6      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800307c:	4b56      	ldr	r3, [pc, #344]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ee      	bne.n	8003066 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003088:	7dfb      	ldrb	r3, [r7, #23]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d105      	bne.n	800309a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b52      	ldr	r3, [pc, #328]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	4a51      	ldr	r2, [pc, #324]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 8003094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003098:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f000 8092 	beq.w	80031c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030a4:	4b4c      	ldr	r3, [pc, #304]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d05c      	beq.n	800316a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d141      	bne.n	800313c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b8:	4b48      	ldr	r3, [pc, #288]	; (80031dc <HAL_RCC_OscConfig+0x4dc>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030be:	f7fd fe3b 	bl	8000d38 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030c6:	f7fd fe37 	bl	8000d38 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e078      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030d8:	4b3f      	ldr	r3, [pc, #252]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f0      	bne.n	80030c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69da      	ldr	r2, [r3, #28]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f2:	019b      	lsls	r3, r3, #6
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	3b01      	subs	r3, #1
 80030fe:	041b      	lsls	r3, r3, #16
 8003100:	431a      	orrs	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	061b      	lsls	r3, r3, #24
 8003108:	4933      	ldr	r1, [pc, #204]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 800310a:	4313      	orrs	r3, r2
 800310c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310e:	4b33      	ldr	r3, [pc, #204]	; (80031dc <HAL_RCC_OscConfig+0x4dc>)
 8003110:	2201      	movs	r2, #1
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fd fe10 	bl	8000d38 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311c:	f7fd fe0c 	bl	8000d38 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e04d      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312e:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d0f0      	beq.n	800311c <HAL_RCC_OscConfig+0x41c>
 800313a:	e045      	b.n	80031c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313c:	4b27      	ldr	r3, [pc, #156]	; (80031dc <HAL_RCC_OscConfig+0x4dc>)
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003142:	f7fd fdf9 	bl	8000d38 <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314a:	f7fd fdf5 	bl	8000d38 <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e036      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315c:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1f0      	bne.n	800314a <HAL_RCC_OscConfig+0x44a>
 8003168:	e02e      	b.n	80031c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e029      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003176:	4b18      	ldr	r3, [pc, #96]	; (80031d8 <HAL_RCC_OscConfig+0x4d8>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	429a      	cmp	r2, r3
 8003188:	d11c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003194:	429a      	cmp	r2, r3
 8003196:	d115      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800319e:	4013      	ands	r3, r2
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d10d      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d106      	bne.n	80031c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e000      	b.n	80031ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40007000 	.word	0x40007000
 80031d8:	40023800 	.word	0x40023800
 80031dc:	42470060 	.word	0x42470060

080031e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0cc      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b68      	ldr	r3, [pc, #416]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d90c      	bls.n	800321c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a58      	ldr	r2, [pc, #352]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d044      	beq.n	8003300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d119      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d003      	beq.n	800329e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	2b03      	cmp	r3, #3
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329e:	4b3f      	ldr	r3, [pc, #252]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ae:	4b3b      	ldr	r3, [pc, #236]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e067      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4934      	ldr	r1, [pc, #208]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d0:	f7fd fd32 	bl	8000d38 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fd fd2e 	bl	8000d38 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e04f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d20c      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4601      	mov	r1, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	5cd3      	ldrb	r3, [r2, r3]
 800337a:	fa21 f303 	lsr.w	r3, r1, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd fc92 	bl	8000cb0 <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023c00 	.word	0x40023c00
 800339c:	40023800 	.word	0x40023800
 80033a0:	080069ec 	.word	0x080069ec
 80033a4:	20000000 	.word	0x20000000
 80033a8:	20000004 	.word	0x20000004

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	2300      	movs	r3, #0
 80033bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c2:	4b63      	ldr	r3, [pc, #396]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 030c 	and.w	r3, r3, #12
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d007      	beq.n	80033de <HAL_RCC_GetSysClockFreq+0x32>
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	d008      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x38>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f040 80b4 	bne.w	8003540 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033d8:	4b5e      	ldr	r3, [pc, #376]	; (8003554 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033da:	60bb      	str	r3, [r7, #8]
       break;
 80033dc:	e0b3      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033de:	4b5e      	ldr	r3, [pc, #376]	; (8003558 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80033e0:	60bb      	str	r3, [r7, #8]
      break;
 80033e2:	e0b0      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033e4:	4b5a      	ldr	r3, [pc, #360]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033ee:	4b58      	ldr	r3, [pc, #352]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d04a      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033fa:	4b55      	ldr	r3, [pc, #340]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	099b      	lsrs	r3, r3, #6
 8003400:	f04f 0400 	mov.w	r4, #0
 8003404:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	ea03 0501 	and.w	r5, r3, r1
 8003410:	ea04 0602 	and.w	r6, r4, r2
 8003414:	4629      	mov	r1, r5
 8003416:	4632      	mov	r2, r6
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	f04f 0400 	mov.w	r4, #0
 8003420:	0154      	lsls	r4, r2, #5
 8003422:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003426:	014b      	lsls	r3, r1, #5
 8003428:	4619      	mov	r1, r3
 800342a:	4622      	mov	r2, r4
 800342c:	1b49      	subs	r1, r1, r5
 800342e:	eb62 0206 	sbc.w	r2, r2, r6
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	f04f 0400 	mov.w	r4, #0
 800343a:	0194      	lsls	r4, r2, #6
 800343c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003440:	018b      	lsls	r3, r1, #6
 8003442:	1a5b      	subs	r3, r3, r1
 8003444:	eb64 0402 	sbc.w	r4, r4, r2
 8003448:	f04f 0100 	mov.w	r1, #0
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	00e2      	lsls	r2, r4, #3
 8003452:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003456:	00d9      	lsls	r1, r3, #3
 8003458:	460b      	mov	r3, r1
 800345a:	4614      	mov	r4, r2
 800345c:	195b      	adds	r3, r3, r5
 800345e:	eb44 0406 	adc.w	r4, r4, r6
 8003462:	f04f 0100 	mov.w	r1, #0
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	0262      	lsls	r2, r4, #9
 800346c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003470:	0259      	lsls	r1, r3, #9
 8003472:	460b      	mov	r3, r1
 8003474:	4614      	mov	r4, r2
 8003476:	4618      	mov	r0, r3
 8003478:	4621      	mov	r1, r4
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f04f 0400 	mov.w	r4, #0
 8003480:	461a      	mov	r2, r3
 8003482:	4623      	mov	r3, r4
 8003484:	f7fc fea0 	bl	80001c8 <__aeabi_uldivmod>
 8003488:	4603      	mov	r3, r0
 800348a:	460c      	mov	r4, r1
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	e049      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003490:	4b2f      	ldr	r3, [pc, #188]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	099b      	lsrs	r3, r3, #6
 8003496:	f04f 0400 	mov.w	r4, #0
 800349a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	ea03 0501 	and.w	r5, r3, r1
 80034a6:	ea04 0602 	and.w	r6, r4, r2
 80034aa:	4629      	mov	r1, r5
 80034ac:	4632      	mov	r2, r6
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	f04f 0400 	mov.w	r4, #0
 80034b6:	0154      	lsls	r4, r2, #5
 80034b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034bc:	014b      	lsls	r3, r1, #5
 80034be:	4619      	mov	r1, r3
 80034c0:	4622      	mov	r2, r4
 80034c2:	1b49      	subs	r1, r1, r5
 80034c4:	eb62 0206 	sbc.w	r2, r2, r6
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	f04f 0400 	mov.w	r4, #0
 80034d0:	0194      	lsls	r4, r2, #6
 80034d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034d6:	018b      	lsls	r3, r1, #6
 80034d8:	1a5b      	subs	r3, r3, r1
 80034da:	eb64 0402 	sbc.w	r4, r4, r2
 80034de:	f04f 0100 	mov.w	r1, #0
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	00e2      	lsls	r2, r4, #3
 80034e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034ec:	00d9      	lsls	r1, r3, #3
 80034ee:	460b      	mov	r3, r1
 80034f0:	4614      	mov	r4, r2
 80034f2:	195b      	adds	r3, r3, r5
 80034f4:	eb44 0406 	adc.w	r4, r4, r6
 80034f8:	f04f 0100 	mov.w	r1, #0
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	02a2      	lsls	r2, r4, #10
 8003502:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003506:	0299      	lsls	r1, r3, #10
 8003508:	460b      	mov	r3, r1
 800350a:	4614      	mov	r4, r2
 800350c:	4618      	mov	r0, r3
 800350e:	4621      	mov	r1, r4
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f04f 0400 	mov.w	r4, #0
 8003516:	461a      	mov	r2, r3
 8003518:	4623      	mov	r3, r4
 800351a:	f7fc fe55 	bl	80001c8 <__aeabi_uldivmod>
 800351e:	4603      	mov	r3, r0
 8003520:	460c      	mov	r4, r1
 8003522:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	3301      	adds	r3, #1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	60bb      	str	r3, [r7, #8]
      break;
 800353e:	e002      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b04      	ldr	r3, [pc, #16]	; (8003554 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003542:	60bb      	str	r3, [r7, #8]
      break;
 8003544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003546:	68bb      	ldr	r3, [r7, #8]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3714      	adds	r7, #20
 800354c:	46bd      	mov	sp, r7
 800354e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003550:	40023800 	.word	0x40023800
 8003554:	00f42400 	.word	0x00f42400
 8003558:	007a1200 	.word	0x007a1200

0800355c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800355c:	b084      	sub	sp, #16
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	f107 001c 	add.w	r0, r7, #28
 800356a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800356e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003570:	2b01      	cmp	r3, #1
 8003572:	d122      	bne.n	80035ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003578:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800359c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d105      	bne.n	80035ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f94a 	bl	8003848 <USB_CoreReset>
 80035b4:	4603      	mov	r3, r0
 80035b6:	73fb      	strb	r3, [r7, #15]
 80035b8:	e01a      	b.n	80035f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f93e 	bl	8003848 <USB_CoreReset>
 80035cc:	4603      	mov	r3, r0
 80035ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80035d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d106      	bne.n	80035e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	639a      	str	r2, [r3, #56]	; 0x38
 80035e2:	e005      	b.n	80035f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d10b      	bne.n	800360e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f043 0206 	orr.w	r2, r3, #6
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f043 0220 	orr.w	r2, r3, #32
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800360e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800361a:	b004      	add	sp, #16
 800361c:	4770      	bx	lr

0800361e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f043 0201 	orr.w	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f023 0201 	bic.w	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
 800366a:	460b      	mov	r3, r1
 800366c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d106      	bne.n	800368e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60da      	str	r2, [r3, #12]
 800368c:	e00b      	b.n	80036a6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	60da      	str	r2, [r3, #12]
 80036a0:	e001      	b.n	80036a6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e003      	b.n	80036ae <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80036a6:	2032      	movs	r0, #50	; 0x32
 80036a8:	f7fd fb52 	bl	8000d50 <HAL_Delay>

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	019b      	lsls	r3, r3, #6
 80036ca:	f043 0220 	orr.w	r2, r3, #32
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	3301      	adds	r3, #1
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4a09      	ldr	r2, [pc, #36]	; (8003700 <USB_FlushTxFifo+0x48>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d901      	bls.n	80036e4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e006      	b.n	80036f2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d0f0      	beq.n	80036d2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	00030d40 	.word	0x00030d40

08003704 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003704:	b480      	push	{r7}
 8003706:	b085      	sub	sp, #20
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2210      	movs	r2, #16
 8003714:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	3301      	adds	r3, #1
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4a09      	ldr	r2, [pc, #36]	; (8003744 <USB_FlushRxFifo+0x40>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d901      	bls.n	8003728 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e006      	b.n	8003736 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b10      	cmp	r3, #16
 8003732:	d0f0      	beq.n	8003716 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	00030d40 	.word	0x00030d40

08003748 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	; 0x24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	4611      	mov	r1, r2
 8003754:	461a      	mov	r2, r3
 8003756:	460b      	mov	r3, r1
 8003758:	71fb      	strb	r3, [r7, #7]
 800375a:	4613      	mov	r3, r2
 800375c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003766:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800376a:	2b00      	cmp	r3, #0
 800376c:	d11a      	bne.n	80037a4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800376e:	88bb      	ldrh	r3, [r7, #4]
 8003770:	3303      	adds	r3, #3
 8003772:	089b      	lsrs	r3, r3, #2
 8003774:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	e00f      	b.n	800379c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800377c:	79fb      	ldrb	r3, [r7, #7]
 800377e:	031a      	lsls	r2, r3, #12
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	4413      	add	r3, r2
 8003784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003788:	461a      	mov	r2, r3
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	3304      	adds	r3, #4
 8003794:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	3301      	adds	r3, #1
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d3eb      	bcc.n	800377c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3724      	adds	r7, #36	; 0x24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b089      	sub	sp, #36	; 0x24
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	4613      	mov	r3, r2
 80037be:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80037c8:	88fb      	ldrh	r3, [r7, #6]
 80037ca:	3303      	adds	r3, #3
 80037cc:	089b      	lsrs	r3, r3, #2
 80037ce:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	e00b      	b.n	80037ee <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	601a      	str	r2, [r3, #0]
    pDest++;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3304      	adds	r3, #4
 80037e6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	3301      	adds	r3, #1
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d3ef      	bcc.n	80037d6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80037f6:	69fb      	ldr	r3, [r7, #28]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3724      	adds	r7, #36	; 0x24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4013      	ands	r3, r2
 800381a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800381c:	68fb      	ldr	r3, [r7, #12]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0301 	and.w	r3, r3, #1
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3301      	adds	r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a13      	ldr	r2, [pc, #76]	; (80038ac <USB_CoreReset+0x64>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e01b      	b.n	800389e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	daf2      	bge.n	8003854 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f043 0201 	orr.w	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	3301      	adds	r3, #1
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a09      	ldr	r2, [pc, #36]	; (80038ac <USB_CoreReset+0x64>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e006      	b.n	800389e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b01      	cmp	r3, #1
 800389a:	d0f0      	beq.n	800387e <USB_CoreReset+0x36>

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	00030d40 	.word	0x00030d40

080038b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038b0:	b084      	sub	sp, #16
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	f107 001c 	add.w	r0, r7, #28
 80038be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038cc:	461a      	mov	r2, r3
 80038ce:	2300      	movs	r3, #0
 80038d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ee:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d018      	beq.n	8003934 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	2b01      	cmp	r3, #1
 8003906:	d10a      	bne.n	800391e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003916:	f043 0304 	orr.w	r3, r3, #4
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	e014      	b.n	8003948 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800392c:	f023 0304 	bic.w	r3, r3, #4
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e009      	b.n	8003948 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003942:	f023 0304 	bic.w	r3, r3, #4
 8003946:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8003948:	2110      	movs	r1, #16
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff feb4 	bl	80036b8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f7ff fed7 	bl	8003704 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	e015      	b.n	8003988 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	015a      	lsls	r2, r3, #5
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	4413      	add	r3, r2
 8003964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003968:	461a      	mov	r2, r3
 800396a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800396e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4413      	add	r3, r2
 8003978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397c:	461a      	mov	r2, r3
 800397e:	2300      	movs	r3, #0
 8003980:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3301      	adds	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	429a      	cmp	r2, r3
 800398e:	d3e5      	bcc.n	800395c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8003990:	2101      	movs	r1, #1
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f8ac 	bl	8003af0 <USB_DriveVbus>

  HAL_Delay(200U);
 8003998:	20c8      	movs	r0, #200	; 0xc8
 800399a:	f7fd f9d9 	bl	8000d50 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039aa:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00b      	beq.n	80039d0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039be:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a14      	ldr	r2, [pc, #80]	; (8003a14 <USB_HostInit+0x164>)
 80039c4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a13      	ldr	r2, [pc, #76]	; (8003a18 <USB_HostInit+0x168>)
 80039ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80039ce:	e009      	b.n	80039e4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a10      	ldr	r2, [pc, #64]	; (8003a1c <USB_HostInit+0x16c>)
 80039da:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a10      	ldr	r2, [pc, #64]	; (8003a20 <USB_HostInit+0x170>)
 80039e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d105      	bne.n	80039f6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f043 0210 	orr.w	r2, r3, #16
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699a      	ldr	r2, [r3, #24]
 80039fa:	4b0a      	ldr	r3, [pc, #40]	; (8003a24 <USB_HostInit+0x174>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a0e:	b004      	add	sp, #16
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	01000200 	.word	0x01000200
 8003a18:	00e00300 	.word	0x00e00300
 8003a1c:	00600080 	.word	0x00600080
 8003a20:	004000e0 	.word	0x004000e0
 8003a24:	a3200008 	.word	0xa3200008

08003a28 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003a46:	f023 0303 	bic.w	r3, r3, #3
 8003a4a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	68f9      	ldr	r1, [r7, #12]
 8003a5c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003a60:	4313      	orrs	r3, r2
 8003a62:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8003a64:	78fb      	ldrb	r3, [r7, #3]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d107      	bne.n	8003a7a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a70:	461a      	mov	r2, r3
 8003a72:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003a76:	6053      	str	r3, [r2, #4]
 8003a78:	e009      	b.n	8003a8e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d106      	bne.n	8003a8e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a86:	461a      	mov	r2, r3
 8003a88:	f241 7370 	movw	r3, #6000	; 0x1770
 8003a8c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003abc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aca:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8003acc:	2064      	movs	r0, #100	; 0x64
 8003ace:	f7fd f93f 	bl	8000d50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003ada:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ade:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8003ae0:	200a      	movs	r0, #10
 8003ae2:	f7fd f935 	bl	8000d50 <HAL_Delay>

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	460b      	mov	r3, r1
 8003afa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003b14:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <USB_DriveVbus+0x44>
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d106      	bne.n	8003b34 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003b2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b32:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b3e:	d109      	bne.n	8003b54 <USB_DriveVbus+0x64>
 8003b40:	78fb      	ldrb	r3, [r7, #3]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8003b4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b52:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b085      	sub	sp, #20
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	0c5b      	lsrs	r3, r3, #17
 8003b80:	f003 0303 	and.w	r3, r3, #3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	b29b      	uxth	r3, r3
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
	...

08003bb4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	70fb      	strb	r3, [r7, #3]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	70bb      	strb	r3, [r7, #2]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be2:	461a      	mov	r2, r3
 8003be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003be8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003bea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d87e      	bhi.n	8003cf0 <USB_HC_Init+0x13c>
 8003bf2:	a201      	add	r2, pc, #4	; (adr r2, 8003bf8 <USB_HC_Init+0x44>)
 8003bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003cb3 	.word	0x08003cb3
 8003c00:	08003c09 	.word	0x08003c09
 8003c04:	08003c75 	.word	0x08003c75
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c14:	461a      	mov	r2, r3
 8003c16:	f240 439d 	movw	r3, #1181	; 0x49d
 8003c1a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8003c1c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	da10      	bge.n	8003c46 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	0151      	lsls	r1, r2, #5
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	440a      	add	r2, r1
 8003c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c42:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8003c44:	e057      	b.n	8003cf6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d051      	beq.n	8003cf6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003c52:	78fb      	ldrb	r3, [r7, #3]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	0151      	lsls	r1, r2, #5
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	440a      	add	r2, r1
 8003c68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c6c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c70:	60d3      	str	r3, [r2, #12]
      break;
 8003c72:	e040      	b.n	8003cf6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003c74:	78fb      	ldrb	r3, [r7, #3]
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c80:	461a      	mov	r2, r3
 8003c82:	f240 639d 	movw	r3, #1693	; 0x69d
 8003c86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003c88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	da34      	bge.n	8003cfa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003caa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cae:	60d3      	str	r3, [r2, #12]
      }

      break;
 8003cb0:	e023      	b.n	8003cfa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003cb2:	78fb      	ldrb	r3, [r7, #3]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f240 2325 	movw	r3, #549	; 0x225
 8003cc4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003cc6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	da17      	bge.n	8003cfe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003cce:	78fb      	ldrb	r3, [r7, #3]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	0151      	lsls	r1, r2, #5
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	440a      	add	r2, r1
 8003ce4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ce8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8003cec:	60d3      	str	r3, [r2, #12]
      }
      break;
 8003cee:	e006      	b.n	8003cfe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf4:	e004      	b.n	8003d00 <USB_HC_Init+0x14c>
      break;
 8003cf6:	bf00      	nop
 8003cf8:	e002      	b.n	8003d00 <USB_HC_Init+0x14c>
      break;
 8003cfa:	bf00      	nop
 8003cfc:	e000      	b.n	8003d00 <USB_HC_Init+0x14c>
      break;
 8003cfe:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003d06:	699a      	ldr	r2, [r3, #24]
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	2101      	movs	r1, #1
 8003d10:	fa01 f303 	lsl.w	r3, r1, r3
 8003d14:	68b9      	ldr	r1, [r7, #8]
 8003d16:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	699b      	ldr	r3, [r3, #24]
 8003d22:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8003d2a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	da03      	bge.n	8003d3a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	e001      	b.n	8003d3e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8003d3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d103      	bne.n	8003d4e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003d46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	e001      	b.n	8003d52 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003d52:	787b      	ldrb	r3, [r7, #1]
 8003d54:	059b      	lsls	r3, r3, #22
 8003d56:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003d5a:	78bb      	ldrb	r3, [r7, #2]
 8003d5c:	02db      	lsls	r3, r3, #11
 8003d5e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003d62:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003d64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d68:	049b      	lsls	r3, r3, #18
 8003d6a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003d6e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003d70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003d76:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003d7c:	78fb      	ldrb	r3, [r7, #3]
 8003d7e:	0159      	lsls	r1, r3, #5
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	440b      	add	r3, r1
 8003d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d88:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003d8e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8003d90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003d94:	2b03      	cmp	r3, #3
 8003d96:	d10f      	bne.n	8003db8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	78fa      	ldrb	r2, [r7, #3]
 8003da8:	0151      	lsls	r1, r2, #5
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	440a      	add	r2, r1
 8003dae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003db2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003db6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8003db8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop

08003dc8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08c      	sub	sp, #48	; 0x30
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	785b      	ldrb	r3, [r3, #1]
 8003dde:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8003de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003de4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d028      	beq.n	8003e44 <USB_HC_StartXfer+0x7c>
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	791b      	ldrb	r3, [r3, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d124      	bne.n	8003e44 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8003dfa:	79fb      	ldrb	r3, [r7, #7]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <USB_HC_StartXfer+0x50>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	795b      	ldrb	r3, [r3, #5]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d107      	bne.n	8003e18 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	785b      	ldrb	r3, [r3, #1]
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 fa2e 	bl	8004270 <USB_DoPing>
      return HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	e112      	b.n	800403e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d112      	bne.n	8003e44 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	69fa      	ldr	r2, [r7, #28]
 8003e2e:	0151      	lsls	r1, r2, #5
 8003e30:	6a3a      	ldr	r2, [r7, #32]
 8003e32:	440a      	add	r2, r1
 8003e34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e38:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003e3c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	2200      	movs	r2, #0
 8003e42:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d018      	beq.n	8003e7e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	8912      	ldrh	r2, [r2, #8]
 8003e54:	4413      	add	r3, r2
 8003e56:	3b01      	subs	r3, #1
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	8912      	ldrh	r2, [r2, #8]
 8003e5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e60:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8003e62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003e64:	8b7b      	ldrh	r3, [r7, #26]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d90b      	bls.n	8003e82 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8003e6a:	8b7b      	ldrh	r3, [r7, #26]
 8003e6c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003e6e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	8912      	ldrh	r2, [r2, #8]
 8003e74:	fb02 f203 	mul.w	r2, r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	611a      	str	r2, [r3, #16]
 8003e7c:	e001      	b.n	8003e82 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	78db      	ldrb	r3, [r3, #3]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d006      	beq.n	8003e98 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003e8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	8912      	ldrh	r2, [r2, #8]
 8003e90:	fb02 f203 	mul.w	r2, r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003ea0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ea2:	04d9      	lsls	r1, r3, #19
 8003ea4:	4b68      	ldr	r3, [pc, #416]	; (8004048 <USB_HC_StartXfer+0x280>)
 8003ea6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003ea8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	7a9b      	ldrb	r3, [r3, #10]
 8003eae:	075b      	lsls	r3, r3, #29
 8003eb0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003eb4:	69f9      	ldr	r1, [r7, #28]
 8003eb6:	0148      	lsls	r0, r1, #5
 8003eb8:	6a39      	ldr	r1, [r7, #32]
 8003eba:	4401      	add	r1, r0
 8003ebc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003ec0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003ec2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8003ec4:	79fb      	ldrb	r3, [r7, #7]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	68d9      	ldr	r1, [r3, #12]
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	015a      	lsls	r2, r3, #5
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eda:	460a      	mov	r2, r1
 8003edc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bf0c      	ite	eq
 8003eee:	2301      	moveq	r3, #1
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69fa      	ldr	r2, [r7, #28]
 8003f06:	0151      	lsls	r1, r2, #5
 8003f08:	6a3a      	ldr	r2, [r7, #32]
 8003f0a:	440a      	add	r2, r1
 8003f0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003f14:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	6a3b      	ldr	r3, [r7, #32]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	7e7b      	ldrb	r3, [r7, #25]
 8003f26:	075b      	lsls	r3, r3, #29
 8003f28:	69f9      	ldr	r1, [r7, #28]
 8003f2a:	0148      	lsls	r0, r1, #5
 8003f2c:	6a39      	ldr	r1, [r7, #32]
 8003f2e:	4401      	add	r1, r0
 8003f30:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a41      	ldr	r2, [pc, #260]	; (800404c <USB_HC_StartXfer+0x284>)
 8003f48:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f4a:	4b40      	ldr	r3, [pc, #256]	; (800404c <USB_HC_StartXfer+0x284>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f52:	4a3e      	ldr	r2, [pc, #248]	; (800404c <USB_HC_StartXfer+0x284>)
 8003f54:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	78db      	ldrb	r3, [r3, #3]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d006      	beq.n	8003f6c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	; (800404c <USB_HC_StartXfer+0x284>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f66:	4a39      	ldr	r2, [pc, #228]	; (800404c <USB_HC_StartXfer+0x284>)
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	e005      	b.n	8003f78 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003f6c:	4b37      	ldr	r3, [pc, #220]	; (800404c <USB_HC_StartXfer+0x284>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f74:	4a35      	ldr	r2, [pc, #212]	; (800404c <USB_HC_StartXfer+0x284>)
 8003f76:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f78:	4b34      	ldr	r3, [pc, #208]	; (800404c <USB_HC_StartXfer+0x284>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f80:	4a32      	ldr	r2, [pc, #200]	; (800404c <USB_HC_StartXfer+0x284>)
 8003f82:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f90:	461a      	mov	r2, r3
 8003f92:	4b2e      	ldr	r3, [pc, #184]	; (800404c <USB_HC_StartXfer+0x284>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d14e      	bne.n	800403c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	78db      	ldrb	r3, [r3, #3]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d14a      	bne.n	800403c <USB_HC_StartXfer+0x274>
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d046      	beq.n	800403c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	79db      	ldrb	r3, [r3, #7]
 8003fb2:	2b03      	cmp	r3, #3
 8003fb4:	d830      	bhi.n	8004018 <USB_HC_StartXfer+0x250>
 8003fb6:	a201      	add	r2, pc, #4	; (adr r2, 8003fbc <USB_HC_StartXfer+0x1f4>)
 8003fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fbc:	08003fcd 	.word	0x08003fcd
 8003fc0:	08003ff1 	.word	0x08003ff1
 8003fc4:	08003fcd 	.word	0x08003fcd
 8003fc8:	08003ff1 	.word	0x08003ff1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	3303      	adds	r3, #3
 8003fd2:	089b      	lsrs	r3, r3, #2
 8003fd4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003fd6:	8afa      	ldrh	r2, [r7, #22]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d91c      	bls.n	800401c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	699b      	ldr	r3, [r3, #24]
 8003fe6:	f043 0220 	orr.w	r2, r3, #32
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	619a      	str	r2, [r3, #24]
          }
          break;
 8003fee:	e015      	b.n	800401c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	3303      	adds	r3, #3
 8003ff6:	089b      	lsrs	r3, r3, #2
 8003ff8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003ffa:	8afa      	ldrh	r2, [r7, #22]
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	b29b      	uxth	r3, r3
 8004006:	429a      	cmp	r2, r3
 8004008:	d90a      	bls.n	8004020 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	619a      	str	r2, [r3, #24]
          }
          break;
 8004016:	e003      	b.n	8004020 <USB_HC_StartXfer+0x258>

        default:
          break;
 8004018:	bf00      	nop
 800401a:	e002      	b.n	8004022 <USB_HC_StartXfer+0x25a>
          break;
 800401c:	bf00      	nop
 800401e:	e000      	b.n	8004022 <USB_HC_StartXfer+0x25a>
          break;
 8004020:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	68d9      	ldr	r1, [r3, #12]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	785a      	ldrb	r2, [r3, #1]
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	b298      	uxth	r0, r3
 8004030:	2300      	movs	r3, #0
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	4603      	mov	r3, r0
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff fb86 	bl	8003748 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3728      	adds	r7, #40	; 0x28
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	1ff80000 	.word	0x1ff80000
 800404c:	200000b0 	.word	0x200000b0

08004050 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	b29b      	uxth	r3, r3
}
 8004066:	4618      	mov	r0, r3
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004072:	b480      	push	{r7}
 8004074:	b087      	sub	sp, #28
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4413      	add	r3, r2
 8004092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	0c9b      	lsrs	r3, r3, #18
 800409a:	f003 0303 	and.w	r3, r3, #3
 800409e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <USB_HC_Halt+0x3a>
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d16c      	bne.n	8004186 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	0151      	lsls	r1, r2, #5
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	440a      	add	r2, r1
 80040c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040ca:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d143      	bne.n	8004160 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	0151      	lsls	r1, r2, #5
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	440a      	add	r2, r1
 80040ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	0151      	lsls	r1, r2, #5
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	440a      	add	r2, r1
 800410e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004112:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004116:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	4413      	add	r3, r2
 8004120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	0151      	lsls	r1, r2, #5
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	440a      	add	r2, r1
 800412e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004132:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004136:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	3301      	adds	r3, #1
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004144:	d81d      	bhi.n	8004182 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4413      	add	r3, r2
 800414e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800415c:	d0ec      	beq.n	8004138 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800415e:	e080      	b.n	8004262 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4413      	add	r3, r2
 8004168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	0151      	lsls	r1, r2, #5
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	440a      	add	r2, r1
 8004176:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800417a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800417e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004180:	e06f      	b.n	8004262 <USB_HC_Halt+0x1f0>
          break;
 8004182:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004184:	e06d      	b.n	8004262 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4413      	add	r3, r2
 800418e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	0151      	lsls	r1, r2, #5
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	440a      	add	r2, r1
 800419c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041a4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d143      	bne.n	800423e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80041d4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	0151      	lsls	r1, r2, #5
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	440a      	add	r2, r1
 80041ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80041f4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	0151      	lsls	r1, r2, #5
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	440a      	add	r2, r1
 800420c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004210:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004214:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	3301      	adds	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004222:	d81d      	bhi.n	8004260 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4413      	add	r3, r2
 800422c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800423a:	d0ec      	beq.n	8004216 <USB_HC_Halt+0x1a4>
 800423c:	e011      	b.n	8004262 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4413      	add	r3, r2
 8004246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	0151      	lsls	r1, r2, #5
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	440a      	add	r2, r1
 8004254:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004258:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e000      	b.n	8004262 <USB_HC_Halt+0x1f0>
          break;
 8004260:	bf00      	nop
    }
  }

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	371c      	adds	r7, #28
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8004284:	2301      	movs	r3, #1
 8004286:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	04da      	lsls	r2, r3, #19
 800428c:	4b15      	ldr	r3, [pc, #84]	; (80042e4 <USB_DoPing+0x74>)
 800428e:	4013      	ands	r3, r2
 8004290:	693a      	ldr	r2, [r7, #16]
 8004292:	0151      	lsls	r1, r2, #5
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	440a      	add	r2, r1
 8004298:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800429c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	015a      	lsls	r2, r3, #5
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	4413      	add	r3, r2
 80042aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ce:	461a      	mov	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	371c      	adds	r7, #28
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	1ff80000 	.word	0x1ff80000

080042e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff f9a1 	bl	8003640 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80042fe:	2110      	movs	r1, #16
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f7ff f9d9 	bl	80036b8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff f9fc 	bl	8003704 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800430c:	2300      	movs	r3, #0
 800430e:	613b      	str	r3, [r7, #16]
 8004310:	e01f      	b.n	8004352 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004328:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004330:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004338:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004346:	461a      	mov	r2, r3
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	3301      	adds	r3, #1
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	2b0f      	cmp	r3, #15
 8004356:	d9dc      	bls.n	8004312 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004358:	2300      	movs	r3, #0
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	e034      	b.n	80043c8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4413      	add	r3, r2
 8004366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004374:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800437c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004384:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4413      	add	r3, r2
 800438e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004392:	461a      	mov	r2, r3
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	3301      	adds	r3, #1
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043a4:	d80c      	bhi.n	80043c0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	015a      	lsls	r2, r3, #5
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4413      	add	r3, r2
 80043ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043bc:	d0ec      	beq.n	8004398 <USB_StopHost+0xb0>
 80043be:	e000      	b.n	80043c2 <USB_StopHost+0xda>
        break;
 80043c0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3301      	adds	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b0f      	cmp	r3, #15
 80043cc:	d9c7      	bls.n	800435e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043d4:	461a      	mov	r2, r3
 80043d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043da:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043e2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff f91a 	bl	800361e <USB_EnableGlobalInt>

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b089      	sub	sp, #36	; 0x24
 80043f8:	af04      	add	r7, sp, #16
 80043fa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80043fc:	2301      	movs	r3, #1
 80043fe:	2202      	movs	r2, #2
 8004400:	2102      	movs	r1, #2
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fc68 	bl	8004cd8 <USBH_FindInterface>
 8004408:	4603      	mov	r3, r0
 800440a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2bff      	cmp	r3, #255	; 0xff
 8004410:	d002      	beq.n	8004418 <USBH_CDC_InterfaceInit+0x24>
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d901      	bls.n	800441c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8004418:	2302      	movs	r3, #2
 800441a:	e13d      	b.n	8004698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	4619      	mov	r1, r3
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fc3d 	bl	8004ca0 <USBH_SelectInterface>
 8004426:	4603      	mov	r3, r0
 8004428:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800442a:	7bbb      	ldrb	r3, [r7, #14]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d001      	beq.n	8004434 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8004430:	2302      	movs	r3, #2
 8004432:	e131      	b.n	8004698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800443a:	2050      	movs	r0, #80	; 0x50
 800443c:	f002 f9f6 	bl	800682c <malloc>
 8004440:	4603      	mov	r3, r0
 8004442:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8004454:	2302      	movs	r3, #2
 8004456:	e11f      	b.n	8004698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8004458:	2250      	movs	r2, #80	; 0x50
 800445a:	2100      	movs	r1, #0
 800445c:	68b8      	ldr	r0, [r7, #8]
 800445e:	f002 f9f5 	bl	800684c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	211a      	movs	r1, #26
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	4413      	add	r3, r2
 800446e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	b25b      	sxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	da15      	bge.n	80044a6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	211a      	movs	r1, #26
 8004480:	fb01 f303 	mul.w	r3, r1, r3
 8004484:	4413      	add	r3, r2
 8004486:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800448a:	781a      	ldrb	r2, [r3, #0]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	211a      	movs	r1, #26
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	4413      	add	r3, r2
 800449c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80044a0:	881a      	ldrh	r2, [r3, #0]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	785b      	ldrb	r3, [r3, #1]
 80044aa:	4619      	mov	r1, r3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f001 fe36 	bl	800611e <USBH_AllocPipe>
 80044b2:	4603      	mov	r3, r0
 80044b4:	461a      	mov	r2, r3
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	7819      	ldrb	r1, [r3, #0]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	7858      	ldrb	r0, [r3, #1]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	8952      	ldrh	r2, [r2, #10]
 80044d2:	9202      	str	r2, [sp, #8]
 80044d4:	2203      	movs	r2, #3
 80044d6:	9201      	str	r2, [sp, #4]
 80044d8:	9300      	str	r3, [sp, #0]
 80044da:	4623      	mov	r3, r4
 80044dc:	4602      	mov	r2, r0
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f001 fdee 	bl	80060c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2200      	movs	r2, #0
 80044ea:	4619      	mov	r1, r3
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f002 f8ed 	bl	80066cc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80044f2:	2300      	movs	r3, #0
 80044f4:	2200      	movs	r2, #0
 80044f6:	210a      	movs	r1, #10
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fbed 	bl	8004cd8 <USBH_FindInterface>
 80044fe:	4603      	mov	r3, r0
 8004500:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	2bff      	cmp	r3, #255	; 0xff
 8004506:	d002      	beq.n	800450e <USBH_CDC_InterfaceInit+0x11a>
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d901      	bls.n	8004512 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800450e:	2302      	movs	r3, #2
 8004510:	e0c2      	b.n	8004698 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8004512:	7bfb      	ldrb	r3, [r7, #15]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	211a      	movs	r1, #26
 8004518:	fb01 f303 	mul.w	r3, r1, r3
 800451c:	4413      	add	r3, r2
 800451e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	b25b      	sxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	da16      	bge.n	8004558 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800452a:	7bfb      	ldrb	r3, [r7, #15]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	211a      	movs	r1, #26
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	4413      	add	r3, r2
 8004536:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800453a:	781a      	ldrb	r2, [r3, #0]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	211a      	movs	r1, #26
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	4413      	add	r3, r2
 800454c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004550:	881a      	ldrh	r2, [r3, #0]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	835a      	strh	r2, [r3, #26]
 8004556:	e015      	b.n	8004584 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	211a      	movs	r1, #26
 800455e:	fb01 f303 	mul.w	r3, r1, r3
 8004562:	4413      	add	r3, r2
 8004564:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8004568:	781a      	ldrb	r2, [r3, #0]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	211a      	movs	r1, #26
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	4413      	add	r3, r2
 800457a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800457e:	881a      	ldrh	r2, [r3, #0]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	211a      	movs	r1, #26
 800458a:	fb01 f303 	mul.w	r3, r1, r3
 800458e:	4413      	add	r3, r2
 8004590:	f203 3356 	addw	r3, r3, #854	; 0x356
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	b25b      	sxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	da16      	bge.n	80045ca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800459c:	7bfb      	ldrb	r3, [r7, #15]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	211a      	movs	r1, #26
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	211a      	movs	r1, #26
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	4413      	add	r3, r2
 80045be:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80045c2:	881a      	ldrh	r2, [r3, #0]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	835a      	strh	r2, [r3, #26]
 80045c8:	e015      	b.n	80045f6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80045ca:	7bfb      	ldrb	r3, [r7, #15]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	211a      	movs	r1, #26
 80045d0:	fb01 f303 	mul.w	r3, r1, r3
 80045d4:	4413      	add	r3, r2
 80045d6:	f203 3356 	addw	r3, r3, #854	; 0x356
 80045da:	781a      	ldrb	r2, [r3, #0]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	211a      	movs	r1, #26
 80045e6:	fb01 f303 	mul.w	r3, r1, r3
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80045f0:	881a      	ldrh	r2, [r3, #0]
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	7b9b      	ldrb	r3, [r3, #14]
 80045fa:	4619      	mov	r1, r3
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f001 fd8e 	bl	800611e <USBH_AllocPipe>
 8004602:	4603      	mov	r3, r0
 8004604:	461a      	mov	r2, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	7bdb      	ldrb	r3, [r3, #15]
 800460e:	4619      	mov	r1, r3
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f001 fd84 	bl	800611e <USBH_AllocPipe>
 8004616:	4603      	mov	r3, r0
 8004618:	461a      	mov	r2, r3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	7b59      	ldrb	r1, [r3, #13]
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	7b98      	ldrb	r0, [r3, #14]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	8b12      	ldrh	r2, [r2, #24]
 8004636:	9202      	str	r2, [sp, #8]
 8004638:	2202      	movs	r2, #2
 800463a:	9201      	str	r2, [sp, #4]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	4623      	mov	r3, r4
 8004640:	4602      	mov	r2, r0
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f001 fd3c 	bl	80060c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	7b19      	ldrb	r1, [r3, #12]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	7bd8      	ldrb	r0, [r3, #15]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	8b52      	ldrh	r2, [r2, #26]
 8004660:	9202      	str	r2, [sp, #8]
 8004662:	2202      	movs	r2, #2
 8004664:	9201      	str	r2, [sp, #4]
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	4623      	mov	r3, r4
 800466a:	4602      	mov	r2, r0
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f001 fd27 	bl	80060c0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	7b5b      	ldrb	r3, [r3, #13]
 800467e:	2200      	movs	r2, #0
 8004680:	4619      	mov	r1, r3
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f002 f822 	bl	80066cc <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	7b1b      	ldrb	r3, [r3, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f002 f81b 	bl	80066cc <USBH_LL_SetToggle>

  return USBH_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	bd90      	pop	{r4, r7, pc}

080046a0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00e      	beq.n	80046d8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	4619      	mov	r1, r3
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f001 fd1c 	bl	80060fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f001 fd47 	bl	8006160 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	7b1b      	ldrb	r3, [r3, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00e      	beq.n	80046fe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	7b1b      	ldrb	r3, [r3, #12]
 80046e4:	4619      	mov	r1, r3
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f001 fd09 	bl	80060fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	7b1b      	ldrb	r3, [r3, #12]
 80046f0:	4619      	mov	r1, r3
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f001 fd34 	bl	8006160 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	7b5b      	ldrb	r3, [r3, #13]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00e      	beq.n	8004724 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	7b5b      	ldrb	r3, [r3, #13]
 800470a:	4619      	mov	r1, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f001 fcf6 	bl	80060fe <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	7b5b      	ldrb	r3, [r3, #13]
 8004716:	4619      	mov	r1, r3
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f001 fd21 	bl	8006160 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00b      	beq.n	8004748 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	4618      	mov	r0, r3
 800473a:	f002 f87f 	bl	800683c <free>
    phost->pActiveClass->pData = 0U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004744:	2200      	movs	r2, #0
 8004746:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3710      	adds	r7, #16
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b084      	sub	sp, #16
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3340      	adds	r3, #64	; 0x40
 8004768:	4619      	mov	r1, r3
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f8b1 	bl	80048d2 <GetLineCoding>
 8004770:	4603      	mov	r3, r0
 8004772:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8004774:	7afb      	ldrb	r3, [r7, #11]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d105      	bne.n	8004786 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004780:	2102      	movs	r1, #2
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8004786:	7afb      	ldrb	r3, [r7, #11]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80047a6:	69db      	ldr	r3, [r3, #28]
 80047a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d877      	bhi.n	80048a4 <USBH_CDC_Process+0x114>
 80047b4:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <USBH_CDC_Process+0x2c>)
 80047b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ba:	bf00      	nop
 80047bc:	080047d1 	.word	0x080047d1
 80047c0:	080047d7 	.word	0x080047d7
 80047c4:	08004807 	.word	0x08004807
 80047c8:	0800487b 	.word	0x0800487b
 80047cc:	08004889 	.word	0x08004889
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	73fb      	strb	r3, [r7, #15]
      break;
 80047d4:	e06d      	b.n	80048b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047da:	4619      	mov	r1, r3
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f897 	bl	8004910 <SetLineCoding>
 80047e2:	4603      	mov	r3, r0
 80047e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80047e6:	7bbb      	ldrb	r3, [r7, #14]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d104      	bne.n	80047f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2202      	movs	r2, #2
 80047f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80047f4:	e058      	b.n	80048a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80047f6:	7bbb      	ldrb	r3, [r7, #14]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d055      	beq.n	80048a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2204      	movs	r2, #4
 8004800:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004804:	e050      	b.n	80048a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	3340      	adds	r3, #64	; 0x40
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f860 	bl	80048d2 <GetLineCoding>
 8004812:	4603      	mov	r3, r0
 8004814:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004816:	7bbb      	ldrb	r3, [r7, #14]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d126      	bne.n	800486a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800482e:	791b      	ldrb	r3, [r3, #4]
 8004830:	429a      	cmp	r2, r3
 8004832:	d13b      	bne.n	80048ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8004840:	429a      	cmp	r2, r3
 8004842:	d133      	bne.n	80048ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800484e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8004850:	429a      	cmp	r2, r3
 8004852:	d12b      	bne.n	80048ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800485e:	429a      	cmp	r2, r3
 8004860:	d124      	bne.n	80048ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f95a 	bl	8004b1c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8004868:	e020      	b.n	80048ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800486a:	7bbb      	ldrb	r3, [r7, #14]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d01d      	beq.n	80048ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	2204      	movs	r2, #4
 8004874:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8004878:	e018      	b.n	80048ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f867 	bl	800494e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f8dc 	bl	8004a3e <CDC_ProcessReception>
      break;
 8004886:	e014      	b.n	80048b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8004888:	2100      	movs	r1, #0
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 ffe5 	bl	800585a <USBH_ClrFeature>
 8004890:	4603      	mov	r3, r0
 8004892:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8004894:	7bbb      	ldrb	r3, [r7, #14]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10a      	bne.n	80048b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80048a2:	e005      	b.n	80048b0 <USBH_CDC_Process+0x120>

    default:
      break;
 80048a4:	bf00      	nop
 80048a6:	e004      	b.n	80048b2 <USBH_CDC_Process+0x122>
      break;
 80048a8:	bf00      	nop
 80048aa:	e002      	b.n	80048b2 <USBH_CDC_Process+0x122>
      break;
 80048ac:	bf00      	nop
 80048ae:	e000      	b.n	80048b2 <USBH_CDC_Process+0x122>
      break;
 80048b0:	bf00      	nop

  }

  return status;
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b082      	sub	sp, #8
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	22a1      	movs	r2, #161	; 0xa1
 80048e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2221      	movs	r2, #33	; 0x21
 80048e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2207      	movs	r2, #7
 80048f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2207      	movs	r2, #7
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f001 f98a 	bl	8005c1a <USBH_CtlReq>
 8004906:	4603      	mov	r3, r0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3708      	adds	r7, #8
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2221      	movs	r2, #33	; 0x21
 800491e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2220      	movs	r2, #32
 8004924:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2207      	movs	r2, #7
 8004936:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2207      	movs	r2, #7
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f001 f96b 	bl	8005c1a <USBH_CtlReq>
 8004944:	4603      	mov	r3, r0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b086      	sub	sp, #24
 8004952:	af02      	add	r7, sp, #8
 8004954:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004960:	2300      	movs	r3, #0
 8004962:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800496a:	2b01      	cmp	r3, #1
 800496c:	d002      	beq.n	8004974 <CDC_ProcessTransmission+0x26>
 800496e:	2b02      	cmp	r3, #2
 8004970:	d025      	beq.n	80049be <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 8004972:	e060      	b.n	8004a36 <CDC_ProcessTransmission+0xe8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	8b12      	ldrh	r2, [r2, #24]
 800497c:	4293      	cmp	r3, r2
 800497e:	d90c      	bls.n	800499a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	69d9      	ldr	r1, [r3, #28]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8b1a      	ldrh	r2, [r3, #24]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	7b58      	ldrb	r0, [r3, #13]
 800498c:	2301      	movs	r3, #1
 800498e:	9300      	str	r3, [sp, #0]
 8004990:	4603      	mov	r3, r0
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f001 fb51 	bl	800603a <USBH_BulkSendData>
 8004998:	e00c      	b.n	80049b4 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	7b58      	ldrb	r0, [r3, #13]
 80049a8:	2301      	movs	r3, #1
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	4603      	mov	r3, r0
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f001 fb43 	bl	800603a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2202      	movs	r2, #2
 80049b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80049bc:	e03b      	b.n	8004a36 <CDC_ProcessTransmission+0xe8>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	7b5b      	ldrb	r3, [r3, #13]
 80049c2:	4619      	mov	r1, r3
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f001 fe57 	bl	8006678 <USBH_LL_GetURBState>
 80049ca:	4603      	mov	r3, r0
 80049cc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80049ce:	7afb      	ldrb	r3, [r7, #11]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d128      	bne.n	8004a26 <CDC_ProcessTransmission+0xd8>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	8b12      	ldrh	r2, [r2, #24]
 80049dc:	4293      	cmp	r3, r2
 80049de:	d90e      	bls.n	80049fe <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	8b12      	ldrh	r2, [r2, #24]
 80049e8:	1a9a      	subs	r2, r3, r2
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	8b12      	ldrh	r2, [r2, #24]
 80049f6:	441a      	add	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	61da      	str	r2, [r3, #28]
 80049fc:	e002      	b.n	8004a04 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d004      	beq.n	8004a16 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004a14:	e00e      	b.n	8004a34 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f868 	bl	8004af4 <USBH_CDC_TransmitCallback>
      break;
 8004a24:	e006      	b.n	8004a34 <CDC_ProcessTransmission+0xe6>
        if (URB_Status == USBH_URB_NOTREADY)
 8004a26:	7afb      	ldrb	r3, [r7, #11]
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d103      	bne.n	8004a34 <CDC_ProcessTransmission+0xe6>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8004a34:	bf00      	nop
  }
}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b086      	sub	sp, #24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d002      	beq.n	8004a64 <CDC_ProcessReception+0x26>
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d00e      	beq.n	8004a80 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8004a62:	e043      	b.n	8004aec <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	6a19      	ldr	r1, [r3, #32]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	8b5a      	ldrh	r2, [r3, #26]
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	7b1b      	ldrb	r3, [r3, #12]
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f001 fb07 	bl	8006084 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2204      	movs	r2, #4
 8004a7a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004a7e:	e035      	b.n	8004aec <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	7b1b      	ldrb	r3, [r3, #12]
 8004a84:	4619      	mov	r1, r3
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f001 fdf6 	bl	8006678 <USBH_LL_GetURBState>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8004a90:	7cfb      	ldrb	r3, [r7, #19]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d129      	bne.n	8004aea <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	7b1b      	ldrb	r3, [r3, #12]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f001 fd59 	bl	8006554 <USBH_LL_GetLastXferSize>
 8004aa2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d016      	beq.n	8004adc <CDC_ProcessReception+0x9e>
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	8b5b      	ldrh	r3, [r3, #26]
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d910      	bls.n	8004adc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	1ad2      	subs	r2, r2, r3
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	6a1a      	ldr	r2, [r3, #32]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	441a      	add	r2, r3
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8004ada:	e006      	b.n	8004aea <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f80f 	bl	8004b08 <USBH_CDC_ReceiveCallback>
      break;
 8004aea:	bf00      	nop
  }
}
 8004aec:	bf00      	nop
 8004aee:	3718      	adds	r7, #24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8004b44:	2302      	movs	r3, #2
 8004b46:	e029      	b.n	8004b9c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	79fa      	ldrb	r2, [r7, #7]
 8004b4c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f81f 	bl	8004ba4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f001 fc2b 	bl	80063f0 <USBH_LL_Init>

  return USBH_OK;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	e009      	b.n	8004bca <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	33e0      	adds	r3, #224	; 0xe0
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2b0e      	cmp	r3, #14
 8004bce:	d9f2      	bls.n	8004bb6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e009      	b.n	8004bea <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004be0:	2200      	movs	r2, #0
 8004be2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3301      	adds	r3, #1
 8004be8:	60fb      	str	r3, [r7, #12]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf0:	d3f1      	bcc.n	8004bd6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2240      	movs	r2, #64	; 0x40
 8004c16:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d016      	beq.n	8004c8e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10e      	bne.n	8004c88 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004c70:	1c59      	adds	r1, r3, #1
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	33de      	adds	r3, #222	; 0xde
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	73fb      	strb	r3, [r7, #15]
 8004c86:	e004      	b.n	8004c92 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8004c88:	2302      	movs	r3, #2
 8004c8a:	73fb      	strb	r3, [r7, #15]
 8004c8c:	e001      	b.n	8004c92 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8004cb6:	78fa      	ldrb	r2, [r7, #3]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d204      	bcs.n	8004cc6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	78fa      	ldrb	r2, [r7, #3]
 8004cc0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8004cc4:	e001      	b.n	8004cca <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	70fb      	strb	r3, [r7, #3]
 8004cea:	460b      	mov	r3, r1
 8004cec:	70bb      	strb	r3, [r7, #2]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8004d00:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004d02:	e025      	b.n	8004d50 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
 8004d06:	221a      	movs	r2, #26
 8004d08:	fb02 f303 	mul.w	r3, r2, r3
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4413      	add	r3, r2
 8004d12:	3302      	adds	r3, #2
 8004d14:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	795b      	ldrb	r3, [r3, #5]
 8004d1a:	78fa      	ldrb	r2, [r7, #3]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d002      	beq.n	8004d26 <USBH_FindInterface+0x4e>
 8004d20:	78fb      	ldrb	r3, [r7, #3]
 8004d22:	2bff      	cmp	r3, #255	; 0xff
 8004d24:	d111      	bne.n	8004d4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004d2a:	78ba      	ldrb	r2, [r7, #2]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d002      	beq.n	8004d36 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004d30:	78bb      	ldrb	r3, [r7, #2]
 8004d32:	2bff      	cmp	r3, #255	; 0xff
 8004d34:	d109      	bne.n	8004d4a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004d3a:	787a      	ldrb	r2, [r7, #1]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d002      	beq.n	8004d46 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004d40:	787b      	ldrb	r3, [r7, #1]
 8004d42:	2bff      	cmp	r3, #255	; 0xff
 8004d44:	d101      	bne.n	8004d4a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8004d46:	7dfb      	ldrb	r3, [r7, #23]
 8004d48:	e006      	b.n	8004d58 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d9d6      	bls.n	8004d04 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8004d56:	23ff      	movs	r3, #255	; 0xff
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	371c      	adds	r7, #28
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f001 fb7b 	bl	8006468 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8004d72:	2101      	movs	r1, #1
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f001 fc92 	bl	800669e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b088      	sub	sp, #32
 8004d88:	af04      	add	r7, sp, #16
 8004d8a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d102      	bne.n	8004da6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2203      	movs	r2, #3
 8004da4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b0b      	cmp	r3, #11
 8004dae:	f200 81b3 	bhi.w	8005118 <USBH_Process+0x394>
 8004db2:	a201      	add	r2, pc, #4	; (adr r2, 8004db8 <USBH_Process+0x34>)
 8004db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db8:	08004de9 	.word	0x08004de9
 8004dbc:	08004e1b 	.word	0x08004e1b
 8004dc0:	08004e83 	.word	0x08004e83
 8004dc4:	080050b3 	.word	0x080050b3
 8004dc8:	08005119 	.word	0x08005119
 8004dcc:	08004f27 	.word	0x08004f27
 8004dd0:	08005059 	.word	0x08005059
 8004dd4:	08004f5d 	.word	0x08004f5d
 8004dd8:	08004f7d 	.word	0x08004f7d
 8004ddc:	08004f9d 	.word	0x08004f9d
 8004de0:	08004fcb 	.word	0x08004fcb
 8004de4:	0800509b 	.word	0x0800509b
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 8193 	beq.w	800511c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8004dfc:	20c8      	movs	r0, #200	; 0xc8
 8004dfe:	f001 fc98 	bl	8006732 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f001 fb8b 	bl	800651e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8004e18:	e180      	b.n	800511c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d107      	bne.n	8004e34 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2202      	movs	r2, #2
 8004e30:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004e32:	e182      	b.n	800513a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e3e:	d914      	bls.n	8004e6a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004e46:	3301      	adds	r3, #1
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d903      	bls.n	8004e62 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	220d      	movs	r2, #13
 8004e5e:	701a      	strb	r2, [r3, #0]
      break;
 8004e60:	e16b      	b.n	800513a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	701a      	strb	r2, [r3, #0]
      break;
 8004e68:	e167      	b.n	800513a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8004e70:	f103 020a 	add.w	r2, r3, #10
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8004e7a:	200a      	movs	r0, #10
 8004e7c:	f001 fc59 	bl	8006732 <USBH_Delay>
      break;
 8004e80:	e15b      	b.n	800513a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d005      	beq.n	8004e98 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004e92:	2104      	movs	r1, #4
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8004e98:	2064      	movs	r0, #100	; 0x64
 8004e9a:	f001 fc4a 	bl	8006732 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f001 fb18 	bl	80064d4 <USBH_LL_GetSpeed>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2205      	movs	r2, #5
 8004eb2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f001 f931 	bl	800611e <USBH_AllocPipe>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8004ec4:	2180      	movs	r1, #128	; 0x80
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f001 f929 	bl	800611e <USBH_AllocPipe>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	461a      	mov	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	7919      	ldrb	r1, [r3, #4]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004ee8:	b292      	uxth	r2, r2
 8004eea:	9202      	str	r2, [sp, #8]
 8004eec:	2200      	movs	r2, #0
 8004eee:	9201      	str	r2, [sp, #4]
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2280      	movs	r2, #128	; 0x80
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f001 f8e2 	bl	80060c0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	7959      	ldrb	r1, [r3, #5]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004f10:	b292      	uxth	r2, r2
 8004f12:	9202      	str	r2, [sp, #8]
 8004f14:	2200      	movs	r2, #0
 8004f16:	9201      	str	r2, [sp, #4]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f001 f8ce 	bl	80060c0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004f24:	e109      	b.n	800513a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f90c 	bl	8005144 <USBH_HandleEnum>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8004f30:	7bbb      	ldrb	r3, [r7, #14]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f040 80f3 	bne.w	8005120 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d103      	bne.n	8004f54 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2208      	movs	r2, #8
 8004f50:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8004f52:	e0e5      	b.n	8005120 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2207      	movs	r2, #7
 8004f58:	701a      	strb	r2, [r3, #0]
      break;
 8004f5a:	e0e1      	b.n	8005120 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 80de 	beq.w	8005124 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8004f6e:	2101      	movs	r1, #1
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2208      	movs	r2, #8
 8004f78:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8004f7a:	e0d3      	b.n	8005124 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	4619      	mov	r1, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fc20 	bl	80057cc <USBH_SetCfg>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f040 80ca 	bne.w	8005128 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2209      	movs	r2, #9
 8004f98:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004f9a:	e0c5      	b.n	8005128 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8004faa:	2101      	movs	r1, #1
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fc30 	bl	8005812 <USBH_SetFeature>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f040 80b9 	bne.w	800512c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	220a      	movs	r2, #10
 8004fbe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8004fc0:	e0b4      	b.n	800512c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	220a      	movs	r2, #10
 8004fc6:	701a      	strb	r2, [r3, #0]
      break;
 8004fc8:	e0b0      	b.n	800512c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f000 80ad 	beq.w	8005130 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
 8004fe2:	e016      	b.n	8005012 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004fe4:	7bfa      	ldrb	r2, [r7, #15]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	32de      	adds	r2, #222	; 0xde
 8004fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fee:	791a      	ldrb	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d108      	bne.n	800500c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8004ffa:	7bfa      	ldrb	r2, [r7, #15]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	32de      	adds	r2, #222	; 0xde
 8005000:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800500a:	e005      	b.n	8005018 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800500c:	7bfb      	ldrb	r3, [r7, #15]
 800500e:	3301      	adds	r3, #1
 8005010:	73fb      	strb	r3, [r7, #15]
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0e5      	beq.n	8004fe4 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d016      	beq.n	8005050 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	4798      	blx	r3
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d109      	bne.n	8005048 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2206      	movs	r2, #6
 8005038:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005040:	2103      	movs	r1, #3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005046:	e073      	b.n	8005130 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	220d      	movs	r2, #13
 800504c:	701a      	strb	r2, [r3, #0]
      break;
 800504e:	e06f      	b.n	8005130 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	220d      	movs	r2, #13
 8005054:	701a      	strb	r2, [r3, #0]
      break;
 8005056:	e06b      	b.n	8005130 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d017      	beq.n	8005092 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
 800506e:	4603      	mov	r3, r0
 8005070:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8005072:	7bbb      	ldrb	r3, [r7, #14]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	220b      	movs	r2, #11
 800507e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8005080:	e058      	b.n	8005134 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8005082:	7bbb      	ldrb	r3, [r7, #14]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d154      	bne.n	8005134 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	220d      	movs	r2, #13
 800508e:	701a      	strb	r2, [r3, #0]
      break;
 8005090:	e050      	b.n	8005134 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	220d      	movs	r2, #13
 8005096:	701a      	strb	r2, [r3, #0]
      break;
 8005098:	e04c      	b.n	8005134 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d049      	beq.n	8005138 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	4798      	blx	r3
      }
      break;
 80050b0:	e042      	b.n	8005138 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff fd72 	bl	8004ba4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80050ee:	2105      	movs	r1, #5
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d107      	bne.n	8005110 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff fe2b 	bl	8004d64 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800510e:	e014      	b.n	800513a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f001 f9a9 	bl	8006468 <USBH_LL_Start>
      break;
 8005116:	e010      	b.n	800513a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8005118:	bf00      	nop
 800511a:	e00e      	b.n	800513a <USBH_Process+0x3b6>
      break;
 800511c:	bf00      	nop
 800511e:	e00c      	b.n	800513a <USBH_Process+0x3b6>
      break;
 8005120:	bf00      	nop
 8005122:	e00a      	b.n	800513a <USBH_Process+0x3b6>
    break;
 8005124:	bf00      	nop
 8005126:	e008      	b.n	800513a <USBH_Process+0x3b6>
      break;
 8005128:	bf00      	nop
 800512a:	e006      	b.n	800513a <USBH_Process+0x3b6>
      break;
 800512c:	bf00      	nop
 800512e:	e004      	b.n	800513a <USBH_Process+0x3b6>
      break;
 8005130:	bf00      	nop
 8005132:	e002      	b.n	800513a <USBH_Process+0x3b6>
      break;
 8005134:	bf00      	nop
 8005136:	e000      	b.n	800513a <USBH_Process+0x3b6>
      break;
 8005138:	bf00      	nop
  }
  return USBH_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af04      	add	r7, sp, #16
 800514a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800514c:	2301      	movs	r3, #1
 800514e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8005150:	2301      	movs	r3, #1
 8005152:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	785b      	ldrb	r3, [r3, #1]
 8005158:	2b07      	cmp	r3, #7
 800515a:	f200 81c1 	bhi.w	80054e0 <USBH_HandleEnum+0x39c>
 800515e:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <USBH_HandleEnum+0x20>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	08005185 	.word	0x08005185
 8005168:	08005243 	.word	0x08005243
 800516c:	080052ad 	.word	0x080052ad
 8005170:	0800533b 	.word	0x0800533b
 8005174:	080053a5 	.word	0x080053a5
 8005178:	08005415 	.word	0x08005415
 800517c:	0800545b 	.word	0x0800545b
 8005180:	080054a1 	.word	0x080054a1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8005184:	2108      	movs	r1, #8
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa50 	bl	800562c <USBH_Get_DevDesc>
 800518c:	4603      	mov	r3, r0
 800518e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005190:	7bbb      	ldrb	r3, [r7, #14]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d130      	bne.n	80051f8 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	7919      	ldrb	r1, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80051ba:	b292      	uxth	r2, r2
 80051bc:	9202      	str	r2, [sp, #8]
 80051be:	2200      	movs	r2, #0
 80051c0:	9201      	str	r2, [sp, #4]
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	4603      	mov	r3, r0
 80051c6:	2280      	movs	r2, #128	; 0x80
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 ff79 	bl	80060c0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	7959      	ldrb	r1, [r3, #5]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80051e2:	b292      	uxth	r2, r2
 80051e4:	9202      	str	r2, [sp, #8]
 80051e6:	2200      	movs	r2, #0
 80051e8:	9201      	str	r2, [sp, #4]
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	4603      	mov	r3, r0
 80051ee:	2200      	movs	r2, #0
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 ff65 	bl	80060c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80051f6:	e175      	b.n	80054e4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80051f8:	7bbb      	ldrb	r3, [r7, #14]
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	f040 8172 	bne.w	80054e4 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005206:	3301      	adds	r3, #1
 8005208:	b2da      	uxtb	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005216:	2b03      	cmp	r3, #3
 8005218:	d903      	bls.n	8005222 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	220d      	movs	r2, #13
 800521e:	701a      	strb	r2, [r3, #0]
      break;
 8005220:	e160      	b.n	80054e4 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	795b      	ldrb	r3, [r3, #5]
 8005226:	4619      	mov	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 ff99 	bl	8006160 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	791b      	ldrb	r3, [r3, #4]
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 ff93 	bl	8006160 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]
      break;
 8005240:	e150      	b.n	80054e4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8005242:	2112      	movs	r1, #18
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f9f1 	bl	800562c <USBH_Get_DevDesc>
 800524a:	4603      	mov	r3, r0
 800524c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800524e:	7bbb      	ldrb	r3, [r7, #14]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d103      	bne.n	800525c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800525a:	e145      	b.n	80054e8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800525c:	7bbb      	ldrb	r3, [r7, #14]
 800525e:	2b03      	cmp	r3, #3
 8005260:	f040 8142 	bne.w	80054e8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800526a:	3301      	adds	r3, #1
 800526c:	b2da      	uxtb	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800527a:	2b03      	cmp	r3, #3
 800527c:	d903      	bls.n	8005286 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	220d      	movs	r2, #13
 8005282:	701a      	strb	r2, [r3, #0]
      break;
 8005284:	e130      	b.n	80054e8 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	795b      	ldrb	r3, [r3, #5]
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 ff67 	bl	8006160 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	791b      	ldrb	r3, [r3, #4]
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 ff61 	bl	8006160 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	701a      	strb	r2, [r3, #0]
      break;
 80052aa:	e11d      	b.n	80054e8 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80052ac:	2101      	movs	r1, #1
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa68 	bl	8005784 <USBH_SetAddress>
 80052b4:	4603      	mov	r3, r0
 80052b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80052b8:	7bbb      	ldrb	r3, [r7, #14]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d132      	bne.n	8005324 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 80052be:	2002      	movs	r0, #2
 80052c0:	f001 fa37 	bl	8006732 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2203      	movs	r2, #3
 80052d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	7919      	ldrb	r1, [r3, #4]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80052e6:	b292      	uxth	r2, r2
 80052e8:	9202      	str	r2, [sp, #8]
 80052ea:	2200      	movs	r2, #0
 80052ec:	9201      	str	r2, [sp, #4]
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	4603      	mov	r3, r0
 80052f2:	2280      	movs	r2, #128	; 0x80
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fee3 	bl	80060c0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7959      	ldrb	r1, [r3, #5]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800530e:	b292      	uxth	r2, r2
 8005310:	9202      	str	r2, [sp, #8]
 8005312:	2200      	movs	r2, #0
 8005314:	9201      	str	r2, [sp, #4]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	4603      	mov	r3, r0
 800531a:	2200      	movs	r2, #0
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 fecf 	bl	80060c0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8005322:	e0e3      	b.n	80054ec <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005324:	7bbb      	ldrb	r3, [r7, #14]
 8005326:	2b03      	cmp	r3, #3
 8005328:	f040 80e0 	bne.w	80054ec <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	220d      	movs	r2, #13
 8005330:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	705a      	strb	r2, [r3, #1]
      break;
 8005338:	e0d8      	b.n	80054ec <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800533a:	2109      	movs	r1, #9
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f000 f99d 	bl	800567c <USBH_Get_CfgDesc>
 8005342:	4603      	mov	r3, r0
 8005344:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8005346:	7bbb      	ldrb	r3, [r7, #14]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d103      	bne.n	8005354 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2204      	movs	r2, #4
 8005350:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8005352:	e0cd      	b.n	80054f0 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005354:	7bbb      	ldrb	r3, [r7, #14]
 8005356:	2b03      	cmp	r3, #3
 8005358:	f040 80ca 	bne.w	80054f0 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005362:	3301      	adds	r3, #1
 8005364:	b2da      	uxtb	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005372:	2b03      	cmp	r3, #3
 8005374:	d903      	bls.n	800537e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	220d      	movs	r2, #13
 800537a:	701a      	strb	r2, [r3, #0]
      break;
 800537c:	e0b8      	b.n	80054f0 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	795b      	ldrb	r3, [r3, #5]
 8005382:	4619      	mov	r1, r3
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 feeb 	bl	8006160 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	791b      	ldrb	r3, [r3, #4]
 800538e:	4619      	mov	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 fee5 	bl	8006160 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	701a      	strb	r2, [r3, #0]
      break;
 80053a2:	e0a5      	b.n	80054f0 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f965 	bl	800567c <USBH_Get_CfgDesc>
 80053b2:	4603      	mov	r3, r0
 80053b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80053b6:	7bbb      	ldrb	r3, [r7, #14]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d103      	bne.n	80053c4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2205      	movs	r2, #5
 80053c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80053c2:	e097      	b.n	80054f4 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80053c4:	7bbb      	ldrb	r3, [r7, #14]
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	f040 8094 	bne.w	80054f4 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80053d2:	3301      	adds	r3, #1
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d903      	bls.n	80053ee <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	220d      	movs	r2, #13
 80053ea:	701a      	strb	r2, [r3, #0]
      break;
 80053ec:	e082      	b.n	80054f4 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	795b      	ldrb	r3, [r3, #5]
 80053f2:	4619      	mov	r1, r3
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 feb3 	bl	8006160 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	791b      	ldrb	r3, [r3, #4]
 80053fe:	4619      	mov	r1, r3
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fead 	bl	8006160 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	701a      	strb	r2, [r3, #0]
      break;
 8005412:	e06f      	b.n	80054f4 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800541a:	2b00      	cmp	r3, #0
 800541c:	d019      	beq.n	8005452 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800542a:	23ff      	movs	r3, #255	; 0xff
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f949 	bl	80056c4 <USBH_Get_StringDesc>
 8005432:	4603      	mov	r3, r0
 8005434:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8005436:	7bbb      	ldrb	r3, [r7, #14]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d103      	bne.n	8005444 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2206      	movs	r2, #6
 8005440:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005442:	e059      	b.n	80054f8 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8005444:	7bbb      	ldrb	r3, [r7, #14]
 8005446:	2b03      	cmp	r3, #3
 8005448:	d156      	bne.n	80054f8 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2206      	movs	r2, #6
 800544e:	705a      	strb	r2, [r3, #1]
      break;
 8005450:	e052      	b.n	80054f8 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2206      	movs	r2, #6
 8005456:	705a      	strb	r2, [r3, #1]
      break;
 8005458:	e04e      	b.n	80054f8 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8005460:	2b00      	cmp	r3, #0
 8005462:	d019      	beq.n	8005498 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8005470:	23ff      	movs	r3, #255	; 0xff
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f000 f926 	bl	80056c4 <USBH_Get_StringDesc>
 8005478:	4603      	mov	r3, r0
 800547a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800547c:	7bbb      	ldrb	r3, [r7, #14]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d103      	bne.n	800548a <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2207      	movs	r2, #7
 8005486:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8005488:	e038      	b.n	80054fc <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800548a:	7bbb      	ldrb	r3, [r7, #14]
 800548c:	2b03      	cmp	r3, #3
 800548e:	d135      	bne.n	80054fc <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2207      	movs	r2, #7
 8005494:	705a      	strb	r2, [r3, #1]
      break;
 8005496:	e031      	b.n	80054fc <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2207      	movs	r2, #7
 800549c:	705a      	strb	r2, [r3, #1]
      break;
 800549e:	e02d      	b.n	80054fc <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d017      	beq.n	80054da <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80054b6:	23ff      	movs	r3, #255	; 0xff
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f903 	bl	80056c4 <USBH_Get_StringDesc>
 80054be:	4603      	mov	r3, r0
 80054c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80054c2:	7bbb      	ldrb	r3, [r7, #14]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d102      	bne.n	80054ce <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80054c8:	2300      	movs	r3, #0
 80054ca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80054cc:	e018      	b.n	8005500 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80054ce:	7bbb      	ldrb	r3, [r7, #14]
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d115      	bne.n	8005500 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	73fb      	strb	r3, [r7, #15]
      break;
 80054d8:	e012      	b.n	8005500 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	73fb      	strb	r3, [r7, #15]
      break;
 80054de:	e00f      	b.n	8005500 <USBH_HandleEnum+0x3bc>

    default:
      break;
 80054e0:	bf00      	nop
 80054e2:	e00e      	b.n	8005502 <USBH_HandleEnum+0x3be>
      break;
 80054e4:	bf00      	nop
 80054e6:	e00c      	b.n	8005502 <USBH_HandleEnum+0x3be>
      break;
 80054e8:	bf00      	nop
 80054ea:	e00a      	b.n	8005502 <USBH_HandleEnum+0x3be>
      break;
 80054ec:	bf00      	nop
 80054ee:	e008      	b.n	8005502 <USBH_HandleEnum+0x3be>
      break;
 80054f0:	bf00      	nop
 80054f2:	e006      	b.n	8005502 <USBH_HandleEnum+0x3be>
      break;
 80054f4:	bf00      	nop
 80054f6:	e004      	b.n	8005502 <USBH_HandleEnum+0x3be>
      break;
 80054f8:	bf00      	nop
 80054fa:	e002      	b.n	8005502 <USBH_HandleEnum+0x3be>
      break;
 80054fc:	bf00      	nop
 80054fe:	e000      	b.n	8005502 <USBH_HandleEnum+0x3be>
      break;
 8005500:	bf00      	nop
  }
  return Status;
 8005502:	7bfb      	ldrb	r3, [r7, #15]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b082      	sub	sp, #8
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f804 	bl	800554e <USBH_HandleSof>
}
 8005546:	bf00      	nop
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b0b      	cmp	r3, #11
 800555e:	d10a      	bne.n	8005576 <USBH_HandleSof+0x28>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	4798      	blx	r3
  }
}
 8005576:	bf00      	nop
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800558e:	bf00      	nop
}
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80055aa:	bf00      	nop
}
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 ff4a 	bl	800649e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	791b      	ldrb	r3, [r3, #4]
 800560e:	4619      	mov	r1, r3
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 fda5 	bl	8006160 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	795b      	ldrb	r3, [r3, #5]
 800561a:	4619      	mov	r1, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f000 fd9f 	bl	8006160 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af02      	add	r7, sp, #8
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800563e:	78fb      	ldrb	r3, [r7, #3]
 8005640:	b29b      	uxth	r3, r3
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	4613      	mov	r3, r2
 8005646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800564a:	2100      	movs	r1, #0
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f864 	bl	800571a <USBH_GetDescriptor>
 8005652:	4603      	mov	r3, r0
 8005654:	73fb      	strb	r3, [r7, #15]
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10a      	bne.n	8005672 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f203 3026 	addw	r0, r3, #806	; 0x326
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005668:	78fa      	ldrb	r2, [r7, #3]
 800566a:	b292      	uxth	r2, r2
 800566c:	4619      	mov	r1, r3
 800566e:	f000 f918 	bl	80058a2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8005672:	7bfb      	ldrb	r3, [r7, #15]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af02      	add	r7, sp, #8
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	331c      	adds	r3, #28
 800568c:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800568e:	887b      	ldrh	r3, [r7, #2]
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005698:	2100      	movs	r1, #0
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f83d 	bl	800571a <USBH_GetDescriptor>
 80056a0:	4603      	mov	r3, r0
 80056a2:	72fb      	strb	r3, [r7, #11]
 80056a4:	7afb      	ldrb	r3, [r7, #11]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d107      	bne.n	80056ba <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80056b0:	887a      	ldrh	r2, [r7, #2]
 80056b2:	68f9      	ldr	r1, [r7, #12]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 f964 	bl	8005982 <USBH_ParseCfgDesc>
  }

  return status;
 80056ba:	7afb      	ldrb	r3, [r7, #11]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	607a      	str	r2, [r7, #4]
 80056ce:	461a      	mov	r2, r3
 80056d0:	460b      	mov	r3, r1
 80056d2:	72fb      	strb	r3, [r7, #11]
 80056d4:	4613      	mov	r3, r2
 80056d6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 80056d8:	7afb      	ldrb	r3, [r7, #11]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80056e0:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80056e8:	893b      	ldrh	r3, [r7, #8]
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	460b      	mov	r3, r1
 80056ee:	2100      	movs	r1, #0
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f812 	bl	800571a <USBH_GetDescriptor>
 80056f6:	4603      	mov	r3, r0
 80056f8:	75fb      	strb	r3, [r7, #23]
 80056fa:	7dfb      	ldrb	r3, [r7, #23]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d107      	bne.n	8005710 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005706:	893a      	ldrh	r2, [r7, #8]
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fa37 	bl	8005b7e <USBH_ParseStringDesc>
  }

  return status;
 8005710:	7dfb      	ldrb	r3, [r7, #23]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3718      	adds	r7, #24
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b084      	sub	sp, #16
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	607b      	str	r3, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	72fb      	strb	r3, [r7, #11]
 8005728:	4613      	mov	r3, r2
 800572a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	789b      	ldrb	r3, [r3, #2]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d11c      	bne.n	800576e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005734:	7afb      	ldrb	r3, [r7, #11]
 8005736:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800573a:	b2da      	uxtb	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2206      	movs	r2, #6
 8005744:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	893a      	ldrh	r2, [r7, #8]
 800574a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800574c:	893b      	ldrh	r3, [r7, #8]
 800574e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005756:	d104      	bne.n	8005762 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f240 4209 	movw	r2, #1033	; 0x409
 800575e:	829a      	strh	r2, [r3, #20]
 8005760:	e002      	b.n	8005768 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8b3a      	ldrh	r2, [r7, #24]
 800576c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800576e:	8b3b      	ldrh	r3, [r7, #24]
 8005770:	461a      	mov	r2, r3
 8005772:	6879      	ldr	r1, [r7, #4]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 fa50 	bl	8005c1a <USBH_CtlReq>
 800577a:	4603      	mov	r3, r0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	460b      	mov	r3, r1
 800578e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	789b      	ldrb	r3, [r3, #2]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d10f      	bne.n	80057b8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2205      	movs	r2, #5
 80057a2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80057a4:	78fb      	ldrb	r3, [r7, #3]
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80057b8:	2200      	movs	r2, #0
 80057ba:	2100      	movs	r1, #0
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fa2c 	bl	8005c1a <USBH_CtlReq>
 80057c2:	4603      	mov	r3, r0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3708      	adds	r7, #8
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	460b      	mov	r3, r1
 80057d6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	789b      	ldrb	r3, [r3, #2]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d10e      	bne.n	80057fe <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2209      	movs	r2, #9
 80057ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	887a      	ldrh	r2, [r7, #2]
 80057f0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80057fe:	2200      	movs	r2, #0
 8005800:	2100      	movs	r1, #0
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fa09 	bl	8005c1a <USBH_CtlReq>
 8005808:	4603      	mov	r3, r0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	460b      	mov	r3, r1
 800581c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	789b      	ldrb	r3, [r3, #2]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d10f      	bne.n	8005846 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2203      	movs	r2, #3
 8005830:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8005846:	2200      	movs	r2, #0
 8005848:	2100      	movs	r1, #0
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f9e5 	bl	8005c1a <USBH_CtlReq>
 8005850:	4603      	mov	r3, r0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	460b      	mov	r3, r1
 8005864:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	789b      	ldrb	r3, [r3, #2]
 800586a:	2b01      	cmp	r3, #1
 800586c:	d10f      	bne.n	800588e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2202      	movs	r2, #2
 8005872:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8005880:	78fb      	ldrb	r3, [r7, #3]
 8005882:	b29a      	uxth	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800588e:	2200      	movs	r2, #0
 8005890:	2100      	movs	r1, #0
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 f9c1 	bl	8005c1a <USBH_CtlReq>
 8005898:	4603      	mov	r3, r0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3708      	adds	r7, #8
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b085      	sub	sp, #20
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	60f8      	str	r0, [r7, #12]
 80058aa:	60b9      	str	r1, [r7, #8]
 80058ac:	4613      	mov	r3, r2
 80058ae:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	781a      	ldrb	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	785a      	ldrb	r2, [r3, #1]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	3302      	adds	r3, #2
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	3303      	adds	r3, #3
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	021b      	lsls	r3, r3, #8
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	4313      	orrs	r3, r2
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	791a      	ldrb	r2, [r3, #4]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	795a      	ldrb	r2, [r3, #5]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	799a      	ldrb	r2, [r3, #6]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	79da      	ldrb	r2, [r3, #7]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80058fc:	88fb      	ldrh	r3, [r7, #6]
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d939      	bls.n	8005976 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	3308      	adds	r3, #8
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	b29a      	uxth	r2, r3
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	3309      	adds	r3, #9
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	021b      	lsls	r3, r3, #8
 8005914:	b29b      	uxth	r3, r3
 8005916:	4313      	orrs	r3, r2
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	330a      	adds	r3, #10
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	b29a      	uxth	r2, r3
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	330b      	adds	r3, #11
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	b29b      	uxth	r3, r3
 800592e:	021b      	lsls	r3, r3, #8
 8005930:	b29b      	uxth	r3, r3
 8005932:	4313      	orrs	r3, r2
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	330c      	adds	r3, #12
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	b29a      	uxth	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	330d      	adds	r3, #13
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	b29b      	uxth	r3, r3
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	b29b      	uxth	r3, r3
 800594e:	4313      	orrs	r3, r2
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	7b9a      	ldrb	r2, [r3, #14]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	7bda      	ldrb	r2, [r3, #15]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	7c1a      	ldrb	r2, [r3, #16]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	7c5a      	ldrb	r2, [r3, #17]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	745a      	strb	r2, [r3, #17]
  }
}
 8005976:	bf00      	nop
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b08a      	sub	sp, #40	; 0x28
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	4613      	mov	r3, r2
 800598e:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	781a      	ldrb	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	785a      	ldrb	r2, [r3, #1]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	3302      	adds	r3, #2
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	3303      	adds	r3, #3
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	4313      	orrs	r3, r2
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	791a      	ldrb	r2, [r3, #4]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	795a      	ldrb	r2, [r3, #5]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	799a      	ldrb	r2, [r3, #6]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	79da      	ldrb	r2, [r3, #7]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	7a1a      	ldrb	r2, [r3, #8]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80059f8:	88fb      	ldrh	r3, [r7, #6]
 80059fa:	2b09      	cmp	r3, #9
 80059fc:	d95f      	bls.n	8005abe <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80059fe:	2309      	movs	r3, #9
 8005a00:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8005a02:	2300      	movs	r3, #0
 8005a04:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005a06:	e051      	b.n	8005aac <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005a08:	f107 0316 	add.w	r3, r7, #22
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a10:	f000 f8e8 	bl	8005be4 <USBH_GetNextDesc>
 8005a14:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8005a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a18:	785b      	ldrb	r3, [r3, #1]
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d146      	bne.n	8005aac <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8005a1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a22:	221a      	movs	r2, #26
 8005a24:	fb02 f303 	mul.w	r3, r2, r3
 8005a28:	3308      	adds	r3, #8
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	3302      	adds	r3, #2
 8005a30:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8005a32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a34:	69f8      	ldr	r0, [r7, #28]
 8005a36:	f000 f846 	bl	8005ac6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005a44:	e022      	b.n	8005a8c <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8005a46:	f107 0316 	add.w	r3, r7, #22
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a4e:	f000 f8c9 	bl	8005be4 <USBH_GetNextDesc>
 8005a52:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	2b05      	cmp	r3, #5
 8005a5a:	d117      	bne.n	8005a8c <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8005a5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a60:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005a64:	3201      	adds	r2, #1
 8005a66:	00d2      	lsls	r2, r2, #3
 8005a68:	211a      	movs	r1, #26
 8005a6a:	fb01 f303 	mul.w	r3, r1, r3
 8005a6e:	4413      	add	r3, r2
 8005a70:	3308      	adds	r3, #8
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	3304      	adds	r3, #4
 8005a78:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8005a7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a7c:	69b8      	ldr	r0, [r7, #24]
 8005a7e:	f000 f851 	bl	8005b24 <USBH_ParseEPDesc>
            ep_ix++;
 8005a82:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8005a86:	3301      	adds	r3, #1
 8005a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	791b      	ldrb	r3, [r3, #4]
 8005a90:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d204      	bcs.n	8005aa2 <USBH_ParseCfgDesc+0x120>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	885a      	ldrh	r2, [r3, #2]
 8005a9c:	8afb      	ldrh	r3, [r7, #22]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d8d1      	bhi.n	8005a46 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8005aa2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d804      	bhi.n	8005abe <USBH_ParseCfgDesc+0x13c>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	885a      	ldrh	r2, [r3, #2]
 8005ab8:	8afb      	ldrh	r3, [r7, #22]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d8a4      	bhi.n	8005a08 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8005abe:	bf00      	nop
 8005ac0:	3728      	adds	r7, #40	; 0x28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781a      	ldrb	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	785a      	ldrb	r2, [r3, #1]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	789a      	ldrb	r2, [r3, #2]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	78da      	ldrb	r2, [r3, #3]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	791a      	ldrb	r2, [r3, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	795a      	ldrb	r2, [r3, #5]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	799a      	ldrb	r2, [r3, #6]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	79da      	ldrb	r2, [r3, #7]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	7a1a      	ldrb	r2, [r3, #8]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	721a      	strb	r2, [r3, #8]
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781a      	ldrb	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	785a      	ldrb	r2, [r3, #1]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	789a      	ldrb	r2, [r3, #2]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	78da      	ldrb	r2, [r3, #3]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	3304      	adds	r3, #4
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	3305      	adds	r3, #5
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	4313      	orrs	r3, r2
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	799a      	ldrb	r2, [r3, #6]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	719a      	strb	r2, [r3, #6]
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b087      	sub	sp, #28
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d120      	bne.n	8005bd8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	1e9a      	subs	r2, r3, #2
 8005b9c:	88fb      	ldrh	r3, [r7, #6]
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	bf28      	it	cs
 8005ba2:	4613      	movcs	r3, r2
 8005ba4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3302      	adds	r3, #2
 8005baa:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8005bac:	2300      	movs	r3, #0
 8005bae:	82fb      	strh	r3, [r7, #22]
 8005bb0:	e00b      	b.n	8005bca <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8005bb2:	8afb      	ldrh	r3, [r7, #22]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	781a      	ldrb	r2, [r3, #0]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	701a      	strb	r2, [r3, #0]
      pdest++;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8005bc4:	8afb      	ldrh	r3, [r7, #22]
 8005bc6:	3302      	adds	r3, #2
 8005bc8:	82fb      	strh	r3, [r7, #22]
 8005bca:	8afa      	ldrh	r2, [r7, #22]
 8005bcc:	8abb      	ldrh	r3, [r7, #20]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d3ef      	bcc.n	8005bb2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	701a      	strb	r2, [r3, #0]
  }
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	881a      	ldrh	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	4413      	add	r3, r2
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4413      	add	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr

08005c1a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b086      	sub	sp, #24
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	4613      	mov	r3, r2
 8005c26:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	789b      	ldrb	r3, [r3, #2]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d002      	beq.n	8005c3a <USBH_CtlReq+0x20>
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d00f      	beq.n	8005c58 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8005c38:	e027      	b.n	8005c8a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	88fa      	ldrh	r2, [r7, #6]
 8005c44:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8005c52:	2301      	movs	r3, #1
 8005c54:	75fb      	strb	r3, [r7, #23]
      break;
 8005c56:	e018      	b.n	8005c8a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f81b 	bl	8005c94 <USBH_HandleControl>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8005c62:	7dfb      	ldrb	r3, [r7, #23]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d002      	beq.n	8005c6e <USBH_CtlReq+0x54>
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d106      	bne.n	8005c7c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	761a      	strb	r2, [r3, #24]
      break;
 8005c7a:	e005      	b.n	8005c88 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8005c7c:	7dfb      	ldrb	r3, [r7, #23]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d102      	bne.n	8005c88 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	709a      	strb	r2, [r3, #2]
      break;
 8005c88:	bf00      	nop
  }
  return status;
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	7e1b      	ldrb	r3, [r3, #24]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	2b0a      	cmp	r3, #10
 8005cac:	f200 8158 	bhi.w	8005f60 <USBH_HandleControl+0x2cc>
 8005cb0:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <USBH_HandleControl+0x24>)
 8005cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb6:	bf00      	nop
 8005cb8:	08005ce5 	.word	0x08005ce5
 8005cbc:	08005cff 	.word	0x08005cff
 8005cc0:	08005d69 	.word	0x08005d69
 8005cc4:	08005d8f 	.word	0x08005d8f
 8005cc8:	08005dc7 	.word	0x08005dc7
 8005ccc:	08005df3 	.word	0x08005df3
 8005cd0:	08005e45 	.word	0x08005e45
 8005cd4:	08005e67 	.word	0x08005e67
 8005cd8:	08005ea3 	.word	0x08005ea3
 8005cdc:	08005ecb 	.word	0x08005ecb
 8005ce0:	08005f09 	.word	0x08005f09
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f103 0110 	add.w	r1, r3, #16
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	795b      	ldrb	r3, [r3, #5]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f945 	bl	8005f80 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	761a      	strb	r2, [r3, #24]
      break;
 8005cfc:	e13b      	b.n	8005f76 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	795b      	ldrb	r3, [r3, #5]
 8005d02:	4619      	mov	r1, r3
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fcb7 	bl	8006678 <USBH_LL_GetURBState>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8005d0e:	7bbb      	ldrb	r3, [r7, #14]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d11e      	bne.n	8005d52 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	7c1b      	ldrb	r3, [r3, #16]
 8005d18:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d1c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	8adb      	ldrh	r3, [r3, #22]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8005d26:	7b7b      	ldrb	r3, [r7, #13]
 8005d28:	2b80      	cmp	r3, #128	; 0x80
 8005d2a:	d103      	bne.n	8005d34 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2203      	movs	r2, #3
 8005d30:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005d32:	e117      	b.n	8005f64 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2205      	movs	r2, #5
 8005d38:	761a      	strb	r2, [r3, #24]
      break;
 8005d3a:	e113      	b.n	8005f64 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8005d3c:	7b7b      	ldrb	r3, [r7, #13]
 8005d3e:	2b80      	cmp	r3, #128	; 0x80
 8005d40:	d103      	bne.n	8005d4a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2209      	movs	r2, #9
 8005d46:	761a      	strb	r2, [r3, #24]
      break;
 8005d48:	e10c      	b.n	8005f64 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2207      	movs	r2, #7
 8005d4e:	761a      	strb	r2, [r3, #24]
      break;
 8005d50:	e108      	b.n	8005f64 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d003      	beq.n	8005d60 <USBH_HandleControl+0xcc>
 8005d58:	7bbb      	ldrb	r3, [r7, #14]
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	f040 8102 	bne.w	8005f64 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	220b      	movs	r2, #11
 8005d64:	761a      	strb	r2, [r3, #24]
      break;
 8005d66:	e0fd      	b.n	8005f64 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6899      	ldr	r1, [r3, #8]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	899a      	ldrh	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	791b      	ldrb	r3, [r3, #4]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 f93c 	bl	8005ffe <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2204      	movs	r2, #4
 8005d8a:	761a      	strb	r2, [r3, #24]
      break;
 8005d8c:	e0f3      	b.n	8005f76 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	791b      	ldrb	r3, [r3, #4]
 8005d92:	4619      	mov	r1, r3
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f000 fc6f 	bl	8006678 <USBH_LL_GetURBState>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8005d9e:	7bbb      	ldrb	r3, [r7, #14]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d102      	bne.n	8005daa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2209      	movs	r2, #9
 8005da8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8005daa:	7bbb      	ldrb	r3, [r7, #14]
 8005dac:	2b05      	cmp	r3, #5
 8005dae:	d102      	bne.n	8005db6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8005db0:	2303      	movs	r3, #3
 8005db2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005db4:	e0d8      	b.n	8005f68 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8005db6:	7bbb      	ldrb	r3, [r7, #14]
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	f040 80d5 	bne.w	8005f68 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	220b      	movs	r2, #11
 8005dc2:	761a      	strb	r2, [r3, #24]
      break;
 8005dc4:	e0d0      	b.n	8005f68 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6899      	ldr	r1, [r3, #8]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	899a      	ldrh	r2, [r3, #12]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	7958      	ldrb	r0, [r3, #5]
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 f8eb 	bl	8005fb4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2206      	movs	r2, #6
 8005dee:	761a      	strb	r2, [r3, #24]
      break;
 8005df0:	e0c1      	b.n	8005f76 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	795b      	ldrb	r3, [r3, #5]
 8005df6:	4619      	mov	r1, r3
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 fc3d 	bl	8006678 <USBH_LL_GetURBState>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005e02:	7bbb      	ldrb	r3, [r7, #14]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d103      	bne.n	8005e10 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2207      	movs	r2, #7
 8005e0c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005e0e:	e0ad      	b.n	8005f6c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8005e10:	7bbb      	ldrb	r3, [r7, #14]
 8005e12:	2b05      	cmp	r3, #5
 8005e14:	d105      	bne.n	8005e22 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	220c      	movs	r2, #12
 8005e1a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005e20:	e0a4      	b.n	8005f6c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005e22:	7bbb      	ldrb	r3, [r7, #14]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d103      	bne.n	8005e30 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2205      	movs	r2, #5
 8005e2c:	761a      	strb	r2, [r3, #24]
      break;
 8005e2e:	e09d      	b.n	8005f6c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8005e30:	7bbb      	ldrb	r3, [r7, #14]
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	f040 809a 	bne.w	8005f6c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	220b      	movs	r2, #11
 8005e3c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8005e3e:	2302      	movs	r3, #2
 8005e40:	73fb      	strb	r3, [r7, #15]
      break;
 8005e42:	e093      	b.n	8005f6c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	791b      	ldrb	r3, [r3, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f8d6 	bl	8005ffe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2208      	movs	r2, #8
 8005e62:	761a      	strb	r2, [r3, #24]

      break;
 8005e64:	e087      	b.n	8005f76 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	791b      	ldrb	r3, [r3, #4]
 8005e6a:	4619      	mov	r1, r3
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fc03 	bl	8006678 <USBH_LL_GetURBState>
 8005e72:	4603      	mov	r3, r0
 8005e74:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8005e76:	7bbb      	ldrb	r3, [r7, #14]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d105      	bne.n	8005e88 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	220d      	movs	r2, #13
 8005e80:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005e86:	e073      	b.n	8005f70 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d103      	bne.n	8005e96 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	220b      	movs	r2, #11
 8005e92:	761a      	strb	r2, [r3, #24]
      break;
 8005e94:	e06c      	b.n	8005f70 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 8005e96:	7bbb      	ldrb	r3, [r7, #14]
 8005e98:	2b05      	cmp	r3, #5
 8005e9a:	d169      	bne.n	8005f70 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea0:	e066      	b.n	8005f70 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	795a      	ldrb	r2, [r3, #5]
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	2200      	movs	r2, #0
 8005eae:	2100      	movs	r1, #0
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f87f 	bl	8005fb4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	220a      	movs	r2, #10
 8005ec6:	761a      	strb	r2, [r3, #24]
      break;
 8005ec8:	e055      	b.n	8005f76 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	795b      	ldrb	r3, [r3, #5]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fbd1 	bl	8006678 <USBH_LL_GetURBState>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8005eda:	7bbb      	ldrb	r3, [r7, #14]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d105      	bne.n	8005eec <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	220d      	movs	r2, #13
 8005ee8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8005eea:	e043      	b.n	8005f74 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8005eec:	7bbb      	ldrb	r3, [r7, #14]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d103      	bne.n	8005efa <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2209      	movs	r2, #9
 8005ef6:	761a      	strb	r2, [r3, #24]
      break;
 8005ef8:	e03c      	b.n	8005f74 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8005efa:	7bbb      	ldrb	r3, [r7, #14]
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d139      	bne.n	8005f74 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	220b      	movs	r2, #11
 8005f04:	761a      	strb	r2, [r3, #24]
      break;
 8005f06:	e035      	b.n	8005f74 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	7e5b      	ldrb	r3, [r3, #25]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	765a      	strb	r2, [r3, #25]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	7e5b      	ldrb	r3, [r3, #25]
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d806      	bhi.n	8005f2a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8005f28:	e025      	b.n	8005f76 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f30:	2106      	movs	r1, #6
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	795b      	ldrb	r3, [r3, #5]
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f90c 	bl	8006160 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	791b      	ldrb	r3, [r3, #4]
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f906 	bl	8006160 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8005f5a:	2302      	movs	r3, #2
 8005f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8005f5e:	e00a      	b.n	8005f76 <USBH_HandleControl+0x2e2>

    default:
      break;
 8005f60:	bf00      	nop
 8005f62:	e008      	b.n	8005f76 <USBH_HandleControl+0x2e2>
      break;
 8005f64:	bf00      	nop
 8005f66:	e006      	b.n	8005f76 <USBH_HandleControl+0x2e2>
      break;
 8005f68:	bf00      	nop
 8005f6a:	e004      	b.n	8005f76 <USBH_HandleControl+0x2e2>
      break;
 8005f6c:	bf00      	nop
 8005f6e:	e002      	b.n	8005f76 <USBH_HandleControl+0x2e2>
      break;
 8005f70:	bf00      	nop
 8005f72:	e000      	b.n	8005f76 <USBH_HandleControl+0x2e2>
      break;
 8005f74:	bf00      	nop
  }

  return status;
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af04      	add	r7, sp, #16
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005f8e:	79f9      	ldrb	r1, [r7, #7]
 8005f90:	2300      	movs	r3, #0
 8005f92:	9303      	str	r3, [sp, #12]
 8005f94:	2308      	movs	r3, #8
 8005f96:	9302      	str	r3, [sp, #8]
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	9301      	str	r3, [sp, #4]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fb36 	bl	8006616 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b088      	sub	sp, #32
 8005fb8:	af04      	add	r7, sp, #16
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	4611      	mov	r1, r2
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	460b      	mov	r3, r1
 8005fc4:	80fb      	strh	r3, [r7, #6]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d001      	beq.n	8005fd8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8005fd8:	7979      	ldrb	r1, [r7, #5]
 8005fda:	7e3b      	ldrb	r3, [r7, #24]
 8005fdc:	9303      	str	r3, [sp, #12]
 8005fde:	88fb      	ldrh	r3, [r7, #6]
 8005fe0:	9302      	str	r3, [sp, #8]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	9301      	str	r3, [sp, #4]
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	2300      	movs	r3, #0
 8005fec:	2200      	movs	r2, #0
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f000 fb11 	bl	8006616 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b088      	sub	sp, #32
 8006002:	af04      	add	r7, sp, #16
 8006004:	60f8      	str	r0, [r7, #12]
 8006006:	60b9      	str	r1, [r7, #8]
 8006008:	4611      	mov	r1, r2
 800600a:	461a      	mov	r2, r3
 800600c:	460b      	mov	r3, r1
 800600e:	80fb      	strh	r3, [r7, #6]
 8006010:	4613      	mov	r3, r2
 8006012:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8006014:	7979      	ldrb	r1, [r7, #5]
 8006016:	2300      	movs	r3, #0
 8006018:	9303      	str	r3, [sp, #12]
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	9302      	str	r3, [sp, #8]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	9301      	str	r3, [sp, #4]
 8006022:	2301      	movs	r3, #1
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	2300      	movs	r3, #0
 8006028:	2201      	movs	r2, #1
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 faf3 	bl	8006616 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8006030:	2300      	movs	r3, #0

}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b088      	sub	sp, #32
 800603e:	af04      	add	r7, sp, #16
 8006040:	60f8      	str	r0, [r7, #12]
 8006042:	60b9      	str	r1, [r7, #8]
 8006044:	4611      	mov	r1, r2
 8006046:	461a      	mov	r2, r3
 8006048:	460b      	mov	r3, r1
 800604a:	80fb      	strh	r3, [r7, #6]
 800604c:	4613      	mov	r3, r2
 800604e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800605a:	2300      	movs	r3, #0
 800605c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800605e:	7979      	ldrb	r1, [r7, #5]
 8006060:	7e3b      	ldrb	r3, [r7, #24]
 8006062:	9303      	str	r3, [sp, #12]
 8006064:	88fb      	ldrh	r3, [r7, #6]
 8006066:	9302      	str	r3, [sp, #8]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	9301      	str	r3, [sp, #4]
 800606c:	2301      	movs	r3, #1
 800606e:	9300      	str	r3, [sp, #0]
 8006070:	2302      	movs	r3, #2
 8006072:	2200      	movs	r2, #0
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f000 face 	bl	8006616 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af04      	add	r7, sp, #16
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	4611      	mov	r1, r2
 8006090:	461a      	mov	r2, r3
 8006092:	460b      	mov	r3, r1
 8006094:	80fb      	strh	r3, [r7, #6]
 8006096:	4613      	mov	r3, r2
 8006098:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800609a:	7979      	ldrb	r1, [r7, #5]
 800609c:	2300      	movs	r3, #0
 800609e:	9303      	str	r3, [sp, #12]
 80060a0:	88fb      	ldrh	r3, [r7, #6]
 80060a2:	9302      	str	r3, [sp, #8]
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	2301      	movs	r3, #1
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	2302      	movs	r3, #2
 80060ae:	2201      	movs	r2, #1
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 fab0 	bl	8006616 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af04      	add	r7, sp, #16
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	4608      	mov	r0, r1
 80060ca:	4611      	mov	r1, r2
 80060cc:	461a      	mov	r2, r3
 80060ce:	4603      	mov	r3, r0
 80060d0:	70fb      	strb	r3, [r7, #3]
 80060d2:	460b      	mov	r3, r1
 80060d4:	70bb      	strb	r3, [r7, #2]
 80060d6:	4613      	mov	r3, r2
 80060d8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80060da:	7878      	ldrb	r0, [r7, #1]
 80060dc:	78ba      	ldrb	r2, [r7, #2]
 80060de:	78f9      	ldrb	r1, [r7, #3]
 80060e0:	8b3b      	ldrh	r3, [r7, #24]
 80060e2:	9302      	str	r3, [sp, #8]
 80060e4:	7d3b      	ldrb	r3, [r7, #20]
 80060e6:	9301      	str	r3, [sp, #4]
 80060e8:	7c3b      	ldrb	r3, [r7, #16]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	4603      	mov	r3, r0
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fa43 	bl	800657a <USBH_LL_OpenPipe>

  return USBH_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	460b      	mov	r3, r1
 8006108:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	4619      	mov	r1, r3
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 fa62 	bl	80065d8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	3708      	adds	r7, #8
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f836 	bl	800619c <USBH_GetFreePipe>
 8006130:	4603      	mov	r3, r0
 8006132:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006134:	89fb      	ldrh	r3, [r7, #14]
 8006136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800613a:	4293      	cmp	r3, r2
 800613c:	d00a      	beq.n	8006154 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800613e:	78fa      	ldrb	r2, [r7, #3]
 8006140:	89fb      	ldrh	r3, [r7, #14]
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	33e0      	adds	r3, #224	; 0xe0
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	440b      	add	r3, r1
 8006152:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006154:	89fb      	ldrh	r3, [r7, #14]
 8006156:	b2db      	uxtb	r3, r3
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	2b0a      	cmp	r3, #10
 8006170:	d80d      	bhi.n	800618e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006172:	78fb      	ldrb	r3, [r7, #3]
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	33e0      	adds	r3, #224	; 0xe0
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	78fb      	ldrb	r3, [r7, #3]
 8006180:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	33e0      	adds	r3, #224	; 0xe0
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	440b      	add	r3, r1
 800618c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80061a8:	2300      	movs	r3, #0
 80061aa:	73fb      	strb	r3, [r7, #15]
 80061ac:	e00f      	b.n	80061ce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	33e0      	adds	r3, #224	; 0xe0
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4413      	add	r3, r2
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d102      	bne.n	80061c8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	e007      	b.n	80061d8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 80061c8:	7bfb      	ldrb	r3, [r7, #15]
 80061ca:	3301      	adds	r3, #1
 80061cc:	73fb      	strb	r3, [r7, #15]
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	2b0a      	cmp	r3, #10
 80061d2:	d9ec      	bls.n	80061ae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80061d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80061e8:	2201      	movs	r2, #1
 80061ea:	490e      	ldr	r1, [pc, #56]	; (8006224 <MX_USB_HOST_Init+0x40>)
 80061ec:	480e      	ldr	r0, [pc, #56]	; (8006228 <MX_USB_HOST_Init+0x44>)
 80061ee:	f7fe fc9f 	bl	8004b30 <USBH_Init>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80061f8:	f7fa fc5a 	bl	8000ab0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80061fc:	490b      	ldr	r1, [pc, #44]	; (800622c <MX_USB_HOST_Init+0x48>)
 80061fe:	480a      	ldr	r0, [pc, #40]	; (8006228 <MX_USB_HOST_Init+0x44>)
 8006200:	f7fe fd24 	bl	8004c4c <USBH_RegisterClass>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800620a:	f7fa fc51 	bl	8000ab0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800620e:	4806      	ldr	r0, [pc, #24]	; (8006228 <MX_USB_HOST_Init+0x44>)
 8006210:	f7fe fda8 	bl	8004d64 <USBH_Start>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800621a:	f7fa fc49 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800621e:	bf00      	nop
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	08006245 	.word	0x08006245
 8006228:	200000c4 	.word	0x200000c4
 800622c:	2000000c 	.word	0x2000000c

08006230 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8006234:	4802      	ldr	r0, [pc, #8]	; (8006240 <MX_USB_HOST_Process+0x10>)
 8006236:	f7fe fda5 	bl	8004d84 <USBH_Process>
}
 800623a:	bf00      	nop
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	200000c4 	.word	0x200000c4

08006244 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006250:	78fb      	ldrb	r3, [r7, #3]
 8006252:	3b01      	subs	r3, #1
 8006254:	2b04      	cmp	r3, #4
 8006256:	d819      	bhi.n	800628c <USBH_UserProcess+0x48>
 8006258:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <USBH_UserProcess+0x1c>)
 800625a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625e:	bf00      	nop
 8006260:	0800628d 	.word	0x0800628d
 8006264:	0800627d 	.word	0x0800627d
 8006268:	0800628d 	.word	0x0800628d
 800626c:	08006285 	.word	0x08006285
 8006270:	08006275 	.word	0x08006275
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006274:	4b09      	ldr	r3, [pc, #36]	; (800629c <USBH_UserProcess+0x58>)
 8006276:	2203      	movs	r2, #3
 8006278:	701a      	strb	r2, [r3, #0]
  break;
 800627a:	e008      	b.n	800628e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800627c:	4b07      	ldr	r3, [pc, #28]	; (800629c <USBH_UserProcess+0x58>)
 800627e:	2202      	movs	r2, #2
 8006280:	701a      	strb	r2, [r3, #0]
  break;
 8006282:	e004      	b.n	800628e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006284:	4b05      	ldr	r3, [pc, #20]	; (800629c <USBH_UserProcess+0x58>)
 8006286:	2201      	movs	r2, #1
 8006288:	701a      	strb	r2, [r3, #0]
  break;
 800628a:	e000      	b.n	800628e <USBH_UserProcess+0x4a>

  default:
  break;
 800628c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800628e:	bf00      	nop
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	200000b4 	.word	0x200000b4

080062a0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b08a      	sub	sp, #40	; 0x28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062a8:	f107 0314 	add.w	r3, r7, #20
 80062ac:	2200      	movs	r2, #0
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	605a      	str	r2, [r3, #4]
 80062b2:	609a      	str	r2, [r3, #8]
 80062b4:	60da      	str	r2, [r3, #12]
 80062b6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80062c0:	d13a      	bne.n	8006338 <HAL_HCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80062c2:	2300      	movs	r3, #0
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	4b1e      	ldr	r3, [pc, #120]	; (8006340 <HAL_HCD_MspInit+0xa0>)
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	4a1d      	ldr	r2, [pc, #116]	; (8006340 <HAL_HCD_MspInit+0xa0>)
 80062cc:	f043 0301 	orr.w	r3, r3, #1
 80062d0:	6313      	str	r3, [r2, #48]	; 0x30
 80062d2:	4b1b      	ldr	r3, [pc, #108]	; (8006340 <HAL_HCD_MspInit+0xa0>)
 80062d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d6:	f003 0301 	and.w	r3, r3, #1
 80062da:	613b      	str	r3, [r7, #16]
 80062dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80062de:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80062e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062e4:	2302      	movs	r3, #2
 80062e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e8:	2300      	movs	r3, #0
 80062ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062ec:	2300      	movs	r3, #0
 80062ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80062f0:	230a      	movs	r3, #10
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062f4:	f107 0314 	add.w	r3, r7, #20
 80062f8:	4619      	mov	r1, r3
 80062fa:	4812      	ldr	r0, [pc, #72]	; (8006344 <HAL_HCD_MspInit+0xa4>)
 80062fc:	f7fa fe5c 	bl	8000fb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006300:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <HAL_HCD_MspInit+0xa0>)
 8006302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006304:	4a0e      	ldr	r2, [pc, #56]	; (8006340 <HAL_HCD_MspInit+0xa0>)
 8006306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800630a:	6353      	str	r3, [r2, #52]	; 0x34
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <HAL_HCD_MspInit+0xa0>)
 8006312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006314:	4a0a      	ldr	r2, [pc, #40]	; (8006340 <HAL_HCD_MspInit+0xa0>)
 8006316:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800631a:	6453      	str	r3, [r2, #68]	; 0x44
 800631c:	4b08      	ldr	r3, [pc, #32]	; (8006340 <HAL_HCD_MspInit+0xa0>)
 800631e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006320:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006324:	60fb      	str	r3, [r7, #12]
 8006326:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006328:	2200      	movs	r2, #0
 800632a:	2100      	movs	r1, #0
 800632c:	2043      	movs	r0, #67	; 0x43
 800632e:	f7fa fe0c 	bl	8000f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006332:	2043      	movs	r0, #67	; 0x43
 8006334:	f7fa fe25 	bl	8000f82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006338:	bf00      	nop
 800633a:	3728      	adds	r7, #40	; 0x28
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40023800 	.word	0x40023800
 8006344:	40020000 	.word	0x40020000

08006348 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff f8e7 	bl	800552a <USBH_LL_IncTimer>
}
 800635c:	bf00      	nop
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff f91f 	bl	80055b6 <USBH_LL_Connect>
}
 8006378:	bf00      	nop
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff f928 	bl	80055e4 <USBH_LL_Disconnect>
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	460b      	mov	r3, r1
 80063a6:	70fb      	strb	r3, [r7, #3]
 80063a8:	4613      	mov	r3, r2
 80063aa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff f8d9 	bl	800557e <USBH_LL_PortEnabled>
}
 80063cc:	bf00      	nop
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff f8d9 	bl	800559a <USBH_LL_PortDisabled>
}
 80063e8:	bf00      	nop
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d12a      	bne.n	8006458 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006402:	4a18      	ldr	r2, [pc, #96]	; (8006464 <USBH_LL_Init+0x74>)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a15      	ldr	r2, [pc, #84]	; (8006464 <USBH_LL_Init+0x74>)
 800640e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006412:	4b14      	ldr	r3, [pc, #80]	; (8006464 <USBH_LL_Init+0x74>)
 8006414:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006418:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800641a:	4b12      	ldr	r3, [pc, #72]	; (8006464 <USBH_LL_Init+0x74>)
 800641c:	2208      	movs	r2, #8
 800641e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006420:	4b10      	ldr	r3, [pc, #64]	; (8006464 <USBH_LL_Init+0x74>)
 8006422:	2201      	movs	r2, #1
 8006424:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006426:	4b0f      	ldr	r3, [pc, #60]	; (8006464 <USBH_LL_Init+0x74>)
 8006428:	2200      	movs	r2, #0
 800642a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800642c:	4b0d      	ldr	r3, [pc, #52]	; (8006464 <USBH_LL_Init+0x74>)
 800642e:	2202      	movs	r2, #2
 8006430:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006432:	4b0c      	ldr	r3, [pc, #48]	; (8006464 <USBH_LL_Init+0x74>)
 8006434:	2200      	movs	r2, #0
 8006436:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006438:	480a      	ldr	r0, [pc, #40]	; (8006464 <USBH_LL_Init+0x74>)
 800643a:	f7fa ff70 	bl	800131e <HAL_HCD_Init>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006444:	f7fa fb34 	bl	8000ab0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006448:	4806      	ldr	r0, [pc, #24]	; (8006464 <USBH_LL_Init+0x74>)
 800644a:	f7fb fb73 	bl	8001b34 <HAL_HCD_GetCurrentFrame>
 800644e:	4603      	mov	r3, r0
 8006450:	4619      	mov	r1, r3
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7ff f85a 	bl	800550c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	2000049c 	.word	0x2000049c

08006468 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800647e:	4618      	mov	r0, r3
 8006480:	f7fb fae0 	bl	8001a44 <HAL_HCD_Start>
 8006484:	4603      	mov	r3, r0
 8006486:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006488:	7bfb      	ldrb	r3, [r7, #15]
 800648a:	4618      	mov	r0, r3
 800648c:	f000 f95c 	bl	8006748 <USBH_Get_USB_Status>
 8006490:	4603      	mov	r3, r0
 8006492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006494:	7bbb      	ldrb	r3, [r7, #14]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b084      	sub	sp, #16
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fb fae8 	bl	8001a8a <HAL_HCD_Stop>
 80064ba:	4603      	mov	r3, r0
 80064bc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 f941 	bl	8006748 <USBH_Get_USB_Status>
 80064c6:	4603      	mov	r3, r0
 80064c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3710      	adds	r7, #16
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80064dc:	2301      	movs	r3, #1
 80064de:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80064e6:	4618      	mov	r0, r3
 80064e8:	f7fb fb32 	bl	8001b50 <HAL_HCD_GetCurrentSpeed>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d007      	beq.n	8006502 <USBH_LL_GetSpeed+0x2e>
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d302      	bcc.n	80064fc <USBH_LL_GetSpeed+0x28>
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d006      	beq.n	8006508 <USBH_LL_GetSpeed+0x34>
 80064fa:	e008      	b.n	800650e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80064fc:	2300      	movs	r3, #0
 80064fe:	73fb      	strb	r3, [r7, #15]
    break;
 8006500:	e008      	b.n	8006514 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8006502:	2301      	movs	r3, #1
 8006504:	73fb      	strb	r3, [r7, #15]
    break;
 8006506:	e005      	b.n	8006514 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8006508:	2302      	movs	r3, #2
 800650a:	73fb      	strb	r3, [r7, #15]
    break;
 800650c:	e002      	b.n	8006514 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800650e:	2301      	movs	r3, #1
 8006510:	73fb      	strb	r3, [r7, #15]
    break;
 8006512:	bf00      	nop
  }
  return  speed;
 8006514:	7bfb      	ldrb	r3, [r7, #15]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006526:	2300      	movs	r3, #0
 8006528:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006534:	4618      	mov	r0, r3
 8006536:	f7fb fac5 	bl	8001ac4 <HAL_HCD_ResetPort>
 800653a:	4603      	mov	r3, r0
 800653c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	4618      	mov	r0, r3
 8006542:	f000 f901 	bl	8006748 <USBH_Get_USB_Status>
 8006546:	4603      	mov	r3, r0
 8006548:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800654a:	7bbb      	ldrb	r3, [r7, #14]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	460b      	mov	r3, r1
 800655e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006566:	78fa      	ldrb	r2, [r7, #3]
 8006568:	4611      	mov	r1, r2
 800656a:	4618      	mov	r0, r3
 800656c:	f7fb facd 	bl	8001b0a <HAL_HCD_HC_GetXferCount>
 8006570:	4603      	mov	r3, r0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800657a:	b590      	push	{r4, r7, lr}
 800657c:	b089      	sub	sp, #36	; 0x24
 800657e:	af04      	add	r7, sp, #16
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	4608      	mov	r0, r1
 8006584:	4611      	mov	r1, r2
 8006586:	461a      	mov	r2, r3
 8006588:	4603      	mov	r3, r0
 800658a:	70fb      	strb	r3, [r7, #3]
 800658c:	460b      	mov	r3, r1
 800658e:	70bb      	strb	r3, [r7, #2]
 8006590:	4613      	mov	r3, r2
 8006592:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80065a2:	787c      	ldrb	r4, [r7, #1]
 80065a4:	78ba      	ldrb	r2, [r7, #2]
 80065a6:	78f9      	ldrb	r1, [r7, #3]
 80065a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80065aa:	9302      	str	r3, [sp, #8]
 80065ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80065b6:	9300      	str	r3, [sp, #0]
 80065b8:	4623      	mov	r3, r4
 80065ba:	f7fa ff12 	bl	80013e2 <HAL_HCD_HC_Init>
 80065be:	4603      	mov	r3, r0
 80065c0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 f8bf 	bl	8006748 <USBH_Get_USB_Status>
 80065ca:	4603      	mov	r3, r0
 80065cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd90      	pop	{r4, r7, pc}

080065d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	460b      	mov	r3, r1
 80065e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80065e8:	2300      	movs	r3, #0
 80065ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80065f2:	78fa      	ldrb	r2, [r7, #3]
 80065f4:	4611      	mov	r1, r2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fa ff8b 	bl	8001512 <HAL_HCD_HC_Halt>
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	4618      	mov	r0, r3
 8006604:	f000 f8a0 	bl	8006748 <USBH_Get_USB_Status>
 8006608:	4603      	mov	r3, r0
 800660a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800660c:	7bbb      	ldrb	r3, [r7, #14]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3710      	adds	r7, #16
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006616:	b590      	push	{r4, r7, lr}
 8006618:	b089      	sub	sp, #36	; 0x24
 800661a:	af04      	add	r7, sp, #16
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	4608      	mov	r0, r1
 8006620:	4611      	mov	r1, r2
 8006622:	461a      	mov	r2, r3
 8006624:	4603      	mov	r3, r0
 8006626:	70fb      	strb	r3, [r7, #3]
 8006628:	460b      	mov	r3, r1
 800662a:	70bb      	strb	r3, [r7, #2]
 800662c:	4613      	mov	r3, r2
 800662e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006630:	2300      	movs	r3, #0
 8006632:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800663e:	787c      	ldrb	r4, [r7, #1]
 8006640:	78ba      	ldrb	r2, [r7, #2]
 8006642:	78f9      	ldrb	r1, [r7, #3]
 8006644:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006648:	9303      	str	r3, [sp, #12]
 800664a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800664c:	9302      	str	r3, [sp, #8]
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	9301      	str	r3, [sp, #4]
 8006652:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	4623      	mov	r3, r4
 800665a:	f7fa ff7d 	bl	8001558 <HAL_HCD_HC_SubmitRequest>
 800665e:	4603      	mov	r3, r0
 8006660:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006662:	7bfb      	ldrb	r3, [r7, #15]
 8006664:	4618      	mov	r0, r3
 8006666:	f000 f86f 	bl	8006748 <USBH_Get_USB_Status>
 800666a:	4603      	mov	r3, r0
 800666c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800666e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	bd90      	pop	{r4, r7, pc}

08006678 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	460b      	mov	r3, r1
 8006682:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800668a:	78fa      	ldrb	r2, [r7, #3]
 800668c:	4611      	mov	r1, r2
 800668e:	4618      	mov	r0, r3
 8006690:	f7fb fa26 	bl	8001ae0 <HAL_HCD_HC_GetURBState>
 8006694:	4603      	mov	r3, r0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b082      	sub	sp, #8
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d103      	bne.n	80066bc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 f872 	bl	80067a0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80066bc:	20c8      	movs	r0, #200	; 0xc8
 80066be:	f7fa fb47 	bl	8000d50 <HAL_Delay>
  return USBH_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	460b      	mov	r3, r1
 80066d6:	70fb      	strb	r3, [r7, #3]
 80066d8:	4613      	mov	r3, r2
 80066da:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80066e2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80066e4:	78fa      	ldrb	r2, [r7, #3]
 80066e6:	68f9      	ldr	r1, [r7, #12]
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	440b      	add	r3, r1
 80066f2:	333b      	adds	r3, #59	; 0x3b
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00a      	beq.n	8006710 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80066fa:	78fa      	ldrb	r2, [r7, #3]
 80066fc:	68f9      	ldr	r1, [r7, #12]
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	440b      	add	r3, r1
 8006708:	3350      	adds	r3, #80	; 0x50
 800670a:	78ba      	ldrb	r2, [r7, #2]
 800670c:	701a      	strb	r2, [r3, #0]
 800670e:	e009      	b.n	8006724 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006710:	78fa      	ldrb	r2, [r7, #3]
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	4613      	mov	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	440b      	add	r3, r1
 800671e:	3351      	adds	r3, #81	; 0x51
 8006720:	78ba      	ldrb	r2, [r7, #2]
 8006722:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3714      	adds	r7, #20
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7fa fb08 	bl	8000d50 <HAL_Delay>
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}

08006748 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	4603      	mov	r3, r0
 8006750:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006756:	79fb      	ldrb	r3, [r7, #7]
 8006758:	2b03      	cmp	r3, #3
 800675a:	d817      	bhi.n	800678c <USBH_Get_USB_Status+0x44>
 800675c:	a201      	add	r2, pc, #4	; (adr r2, 8006764 <USBH_Get_USB_Status+0x1c>)
 800675e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006762:	bf00      	nop
 8006764:	08006775 	.word	0x08006775
 8006768:	0800677b 	.word	0x0800677b
 800676c:	08006781 	.word	0x08006781
 8006770:	08006787 	.word	0x08006787
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006774:	2300      	movs	r3, #0
 8006776:	73fb      	strb	r3, [r7, #15]
    break;
 8006778:	e00b      	b.n	8006792 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800677a:	2302      	movs	r3, #2
 800677c:	73fb      	strb	r3, [r7, #15]
    break;
 800677e:	e008      	b.n	8006792 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006780:	2301      	movs	r3, #1
 8006782:	73fb      	strb	r3, [r7, #15]
    break;
 8006784:	e005      	b.n	8006792 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006786:	2302      	movs	r3, #2
 8006788:	73fb      	strb	r3, [r7, #15]
    break;
 800678a:	e002      	b.n	8006792 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800678c:	2302      	movs	r3, #2
 800678e:	73fb      	strb	r3, [r7, #15]
    break;
 8006790:	bf00      	nop
  }
  return usb_status;
 8006792:	7bfb      	ldrb	r3, [r7, #15]
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	4603      	mov	r3, r0
 80067a8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80067aa:	79fb      	ldrb	r3, [r7, #7]
 80067ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80067ae:	79fb      	ldrb	r3, [r7, #7]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d102      	bne.n	80067ba <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 80067b4:	2301      	movs	r3, #1
 80067b6:	73fb      	strb	r3, [r7, #15]
 80067b8:	e001      	b.n	80067be <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	461a      	mov	r2, r3
 80067c2:	2101      	movs	r1, #1
 80067c4:	4803      	ldr	r0, [pc, #12]	; (80067d4 <MX_DriverVbusFS+0x34>)
 80067c6:	f7fa fd91 	bl	80012ec <HAL_GPIO_WritePin>
}
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40020800 	.word	0x40020800

080067d8 <__errno>:
 80067d8:	4b01      	ldr	r3, [pc, #4]	; (80067e0 <__errno+0x8>)
 80067da:	6818      	ldr	r0, [r3, #0]
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	2000002c 	.word	0x2000002c

080067e4 <__libc_init_array>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	4e0d      	ldr	r6, [pc, #52]	; (800681c <__libc_init_array+0x38>)
 80067e8:	4c0d      	ldr	r4, [pc, #52]	; (8006820 <__libc_init_array+0x3c>)
 80067ea:	1ba4      	subs	r4, r4, r6
 80067ec:	10a4      	asrs	r4, r4, #2
 80067ee:	2500      	movs	r5, #0
 80067f0:	42a5      	cmp	r5, r4
 80067f2:	d109      	bne.n	8006808 <__libc_init_array+0x24>
 80067f4:	4e0b      	ldr	r6, [pc, #44]	; (8006824 <__libc_init_array+0x40>)
 80067f6:	4c0c      	ldr	r4, [pc, #48]	; (8006828 <__libc_init_array+0x44>)
 80067f8:	f000 f8ea 	bl	80069d0 <_init>
 80067fc:	1ba4      	subs	r4, r4, r6
 80067fe:	10a4      	asrs	r4, r4, #2
 8006800:	2500      	movs	r5, #0
 8006802:	42a5      	cmp	r5, r4
 8006804:	d105      	bne.n	8006812 <__libc_init_array+0x2e>
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800680c:	4798      	blx	r3
 800680e:	3501      	adds	r5, #1
 8006810:	e7ee      	b.n	80067f0 <__libc_init_array+0xc>
 8006812:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006816:	4798      	blx	r3
 8006818:	3501      	adds	r5, #1
 800681a:	e7f2      	b.n	8006802 <__libc_init_array+0x1e>
 800681c:	08006a04 	.word	0x08006a04
 8006820:	08006a04 	.word	0x08006a04
 8006824:	08006a04 	.word	0x08006a04
 8006828:	08006a08 	.word	0x08006a08

0800682c <malloc>:
 800682c:	4b02      	ldr	r3, [pc, #8]	; (8006838 <malloc+0xc>)
 800682e:	4601      	mov	r1, r0
 8006830:	6818      	ldr	r0, [r3, #0]
 8006832:	f000 b861 	b.w	80068f8 <_malloc_r>
 8006836:	bf00      	nop
 8006838:	2000002c 	.word	0x2000002c

0800683c <free>:
 800683c:	4b02      	ldr	r3, [pc, #8]	; (8006848 <free+0xc>)
 800683e:	4601      	mov	r1, r0
 8006840:	6818      	ldr	r0, [r3, #0]
 8006842:	f000 b80b 	b.w	800685c <_free_r>
 8006846:	bf00      	nop
 8006848:	2000002c 	.word	0x2000002c

0800684c <memset>:
 800684c:	4402      	add	r2, r0
 800684e:	4603      	mov	r3, r0
 8006850:	4293      	cmp	r3, r2
 8006852:	d100      	bne.n	8006856 <memset+0xa>
 8006854:	4770      	bx	lr
 8006856:	f803 1b01 	strb.w	r1, [r3], #1
 800685a:	e7f9      	b.n	8006850 <memset+0x4>

0800685c <_free_r>:
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	4605      	mov	r5, r0
 8006860:	2900      	cmp	r1, #0
 8006862:	d045      	beq.n	80068f0 <_free_r+0x94>
 8006864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006868:	1f0c      	subs	r4, r1, #4
 800686a:	2b00      	cmp	r3, #0
 800686c:	bfb8      	it	lt
 800686e:	18e4      	addlt	r4, r4, r3
 8006870:	f000 f8ac 	bl	80069cc <__malloc_lock>
 8006874:	4a1f      	ldr	r2, [pc, #124]	; (80068f4 <_free_r+0x98>)
 8006876:	6813      	ldr	r3, [r2, #0]
 8006878:	4610      	mov	r0, r2
 800687a:	b933      	cbnz	r3, 800688a <_free_r+0x2e>
 800687c:	6063      	str	r3, [r4, #4]
 800687e:	6014      	str	r4, [r2, #0]
 8006880:	4628      	mov	r0, r5
 8006882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006886:	f000 b8a2 	b.w	80069ce <__malloc_unlock>
 800688a:	42a3      	cmp	r3, r4
 800688c:	d90c      	bls.n	80068a8 <_free_r+0x4c>
 800688e:	6821      	ldr	r1, [r4, #0]
 8006890:	1862      	adds	r2, r4, r1
 8006892:	4293      	cmp	r3, r2
 8006894:	bf04      	itt	eq
 8006896:	681a      	ldreq	r2, [r3, #0]
 8006898:	685b      	ldreq	r3, [r3, #4]
 800689a:	6063      	str	r3, [r4, #4]
 800689c:	bf04      	itt	eq
 800689e:	1852      	addeq	r2, r2, r1
 80068a0:	6022      	streq	r2, [r4, #0]
 80068a2:	6004      	str	r4, [r0, #0]
 80068a4:	e7ec      	b.n	8006880 <_free_r+0x24>
 80068a6:	4613      	mov	r3, r2
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	b10a      	cbz	r2, 80068b0 <_free_r+0x54>
 80068ac:	42a2      	cmp	r2, r4
 80068ae:	d9fa      	bls.n	80068a6 <_free_r+0x4a>
 80068b0:	6819      	ldr	r1, [r3, #0]
 80068b2:	1858      	adds	r0, r3, r1
 80068b4:	42a0      	cmp	r0, r4
 80068b6:	d10b      	bne.n	80068d0 <_free_r+0x74>
 80068b8:	6820      	ldr	r0, [r4, #0]
 80068ba:	4401      	add	r1, r0
 80068bc:	1858      	adds	r0, r3, r1
 80068be:	4282      	cmp	r2, r0
 80068c0:	6019      	str	r1, [r3, #0]
 80068c2:	d1dd      	bne.n	8006880 <_free_r+0x24>
 80068c4:	6810      	ldr	r0, [r2, #0]
 80068c6:	6852      	ldr	r2, [r2, #4]
 80068c8:	605a      	str	r2, [r3, #4]
 80068ca:	4401      	add	r1, r0
 80068cc:	6019      	str	r1, [r3, #0]
 80068ce:	e7d7      	b.n	8006880 <_free_r+0x24>
 80068d0:	d902      	bls.n	80068d8 <_free_r+0x7c>
 80068d2:	230c      	movs	r3, #12
 80068d4:	602b      	str	r3, [r5, #0]
 80068d6:	e7d3      	b.n	8006880 <_free_r+0x24>
 80068d8:	6820      	ldr	r0, [r4, #0]
 80068da:	1821      	adds	r1, r4, r0
 80068dc:	428a      	cmp	r2, r1
 80068de:	bf04      	itt	eq
 80068e0:	6811      	ldreq	r1, [r2, #0]
 80068e2:	6852      	ldreq	r2, [r2, #4]
 80068e4:	6062      	str	r2, [r4, #4]
 80068e6:	bf04      	itt	eq
 80068e8:	1809      	addeq	r1, r1, r0
 80068ea:	6021      	streq	r1, [r4, #0]
 80068ec:	605c      	str	r4, [r3, #4]
 80068ee:	e7c7      	b.n	8006880 <_free_r+0x24>
 80068f0:	bd38      	pop	{r3, r4, r5, pc}
 80068f2:	bf00      	nop
 80068f4:	200000b8 	.word	0x200000b8

080068f8 <_malloc_r>:
 80068f8:	b570      	push	{r4, r5, r6, lr}
 80068fa:	1ccd      	adds	r5, r1, #3
 80068fc:	f025 0503 	bic.w	r5, r5, #3
 8006900:	3508      	adds	r5, #8
 8006902:	2d0c      	cmp	r5, #12
 8006904:	bf38      	it	cc
 8006906:	250c      	movcc	r5, #12
 8006908:	2d00      	cmp	r5, #0
 800690a:	4606      	mov	r6, r0
 800690c:	db01      	blt.n	8006912 <_malloc_r+0x1a>
 800690e:	42a9      	cmp	r1, r5
 8006910:	d903      	bls.n	800691a <_malloc_r+0x22>
 8006912:	230c      	movs	r3, #12
 8006914:	6033      	str	r3, [r6, #0]
 8006916:	2000      	movs	r0, #0
 8006918:	bd70      	pop	{r4, r5, r6, pc}
 800691a:	f000 f857 	bl	80069cc <__malloc_lock>
 800691e:	4a21      	ldr	r2, [pc, #132]	; (80069a4 <_malloc_r+0xac>)
 8006920:	6814      	ldr	r4, [r2, #0]
 8006922:	4621      	mov	r1, r4
 8006924:	b991      	cbnz	r1, 800694c <_malloc_r+0x54>
 8006926:	4c20      	ldr	r4, [pc, #128]	; (80069a8 <_malloc_r+0xb0>)
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	b91b      	cbnz	r3, 8006934 <_malloc_r+0x3c>
 800692c:	4630      	mov	r0, r6
 800692e:	f000 f83d 	bl	80069ac <_sbrk_r>
 8006932:	6020      	str	r0, [r4, #0]
 8006934:	4629      	mov	r1, r5
 8006936:	4630      	mov	r0, r6
 8006938:	f000 f838 	bl	80069ac <_sbrk_r>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d124      	bne.n	800698a <_malloc_r+0x92>
 8006940:	230c      	movs	r3, #12
 8006942:	6033      	str	r3, [r6, #0]
 8006944:	4630      	mov	r0, r6
 8006946:	f000 f842 	bl	80069ce <__malloc_unlock>
 800694a:	e7e4      	b.n	8006916 <_malloc_r+0x1e>
 800694c:	680b      	ldr	r3, [r1, #0]
 800694e:	1b5b      	subs	r3, r3, r5
 8006950:	d418      	bmi.n	8006984 <_malloc_r+0x8c>
 8006952:	2b0b      	cmp	r3, #11
 8006954:	d90f      	bls.n	8006976 <_malloc_r+0x7e>
 8006956:	600b      	str	r3, [r1, #0]
 8006958:	50cd      	str	r5, [r1, r3]
 800695a:	18cc      	adds	r4, r1, r3
 800695c:	4630      	mov	r0, r6
 800695e:	f000 f836 	bl	80069ce <__malloc_unlock>
 8006962:	f104 000b 	add.w	r0, r4, #11
 8006966:	1d23      	adds	r3, r4, #4
 8006968:	f020 0007 	bic.w	r0, r0, #7
 800696c:	1ac3      	subs	r3, r0, r3
 800696e:	d0d3      	beq.n	8006918 <_malloc_r+0x20>
 8006970:	425a      	negs	r2, r3
 8006972:	50e2      	str	r2, [r4, r3]
 8006974:	e7d0      	b.n	8006918 <_malloc_r+0x20>
 8006976:	428c      	cmp	r4, r1
 8006978:	684b      	ldr	r3, [r1, #4]
 800697a:	bf16      	itet	ne
 800697c:	6063      	strne	r3, [r4, #4]
 800697e:	6013      	streq	r3, [r2, #0]
 8006980:	460c      	movne	r4, r1
 8006982:	e7eb      	b.n	800695c <_malloc_r+0x64>
 8006984:	460c      	mov	r4, r1
 8006986:	6849      	ldr	r1, [r1, #4]
 8006988:	e7cc      	b.n	8006924 <_malloc_r+0x2c>
 800698a:	1cc4      	adds	r4, r0, #3
 800698c:	f024 0403 	bic.w	r4, r4, #3
 8006990:	42a0      	cmp	r0, r4
 8006992:	d005      	beq.n	80069a0 <_malloc_r+0xa8>
 8006994:	1a21      	subs	r1, r4, r0
 8006996:	4630      	mov	r0, r6
 8006998:	f000 f808 	bl	80069ac <_sbrk_r>
 800699c:	3001      	adds	r0, #1
 800699e:	d0cf      	beq.n	8006940 <_malloc_r+0x48>
 80069a0:	6025      	str	r5, [r4, #0]
 80069a2:	e7db      	b.n	800695c <_malloc_r+0x64>
 80069a4:	200000b8 	.word	0x200000b8
 80069a8:	200000bc 	.word	0x200000bc

080069ac <_sbrk_r>:
 80069ac:	b538      	push	{r3, r4, r5, lr}
 80069ae:	4c06      	ldr	r4, [pc, #24]	; (80069c8 <_sbrk_r+0x1c>)
 80069b0:	2300      	movs	r3, #0
 80069b2:	4605      	mov	r5, r0
 80069b4:	4608      	mov	r0, r1
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	f7fa f8e2 	bl	8000b80 <_sbrk>
 80069bc:	1c43      	adds	r3, r0, #1
 80069be:	d102      	bne.n	80069c6 <_sbrk_r+0x1a>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	b103      	cbz	r3, 80069c6 <_sbrk_r+0x1a>
 80069c4:	602b      	str	r3, [r5, #0]
 80069c6:	bd38      	pop	{r3, r4, r5, pc}
 80069c8:	20000760 	.word	0x20000760

080069cc <__malloc_lock>:
 80069cc:	4770      	bx	lr

080069ce <__malloc_unlock>:
 80069ce:	4770      	bx	lr

080069d0 <_init>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	bf00      	nop
 80069d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d6:	bc08      	pop	{r3}
 80069d8:	469e      	mov	lr, r3
 80069da:	4770      	bx	lr

080069dc <_fini>:
 80069dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069de:	bf00      	nop
 80069e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e2:	bc08      	pop	{r3}
 80069e4:	469e      	mov	lr, r3
 80069e6:	4770      	bx	lr
