
TestCubeMxAllBussesandGPIOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800a0dc  0800a0dc  0001a0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1b8  0800a1b8  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1b8  0800a1b8  0001a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1c0  0800a1c0  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1c0  0800a1c0  0001a1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1c4  0800a1c4  0001a1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800a1c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c04  200001c8  0800a390  000201c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dcc  0800a390  00020dcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c515  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003af7  00000000  00000000  0003c70d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013e0  00000000  00000000  00040208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001240  00000000  00000000  000415e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025ec5  00000000  00000000  00042828  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013914  00000000  00000000  000686ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d030a  00000000  00000000  0007c001  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c30b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b4  00000000  00000000  0014c388  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001c8 	.word	0x200001c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a0c4 	.word	0x0800a0c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001cc 	.word	0x200001cc
 80001c4:	0800a0c4 	.word	0x0800a0c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <pintoggle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void pintoggle(char port , int pin){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b084      	sub	sp, #16
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	6039      	str	r1, [r7, #0]
 80004d2:	71fb      	strb	r3, [r7, #7]
GPIO_TypeDef * PORT__BASE;
uint16_t pin_number=0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	817b      	strh	r3, [r7, #10]

switch (port){
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	3b61      	subs	r3, #97	; 0x61
 80004dc:	2b04      	cmp	r3, #4
 80004de:	d81c      	bhi.n	800051a <pintoggle+0x52>
 80004e0:	a201      	add	r2, pc, #4	; (adr r2, 80004e8 <pintoggle+0x20>)
 80004e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e6:	bf00      	nop
 80004e8:	080004fd 	.word	0x080004fd
 80004ec:	08000503 	.word	0x08000503
 80004f0:	08000509 	.word	0x08000509
 80004f4:	0800050f 	.word	0x0800050f
 80004f8:	08000515 	.word	0x08000515
	case 'a': PORT__BASE = GPIOA;
 80004fc:	4b42      	ldr	r3, [pc, #264]	; (8000608 <pintoggle+0x140>)
 80004fe:	60fb      	str	r3, [r7, #12]
	break;
 8000500:	e00e      	b.n	8000520 <pintoggle+0x58>
	case 'b': PORT__BASE = GPIOB;
 8000502:	4b42      	ldr	r3, [pc, #264]	; (800060c <pintoggle+0x144>)
 8000504:	60fb      	str	r3, [r7, #12]
	break;
 8000506:	e00b      	b.n	8000520 <pintoggle+0x58>
	case 'c': PORT__BASE = GPIOC;
 8000508:	4b41      	ldr	r3, [pc, #260]	; (8000610 <pintoggle+0x148>)
 800050a:	60fb      	str	r3, [r7, #12]
	break;
 800050c:	e008      	b.n	8000520 <pintoggle+0x58>
	case 'd': PORT__BASE = GPIOD;
 800050e:	4b41      	ldr	r3, [pc, #260]	; (8000614 <pintoggle+0x14c>)
 8000510:	60fb      	str	r3, [r7, #12]
	break;
 8000512:	e005      	b.n	8000520 <pintoggle+0x58>
	case 'e': PORT__BASE = GPIOE;
 8000514:	4b40      	ldr	r3, [pc, #256]	; (8000618 <pintoggle+0x150>)
 8000516:	60fb      	str	r3, [r7, #12]
	break;
 8000518:	e002      	b.n	8000520 <pintoggle+0x58>
	default: PORT__BASE = GPIOA;
 800051a:	4b3b      	ldr	r3, [pc, #236]	; (8000608 <pintoggle+0x140>)
 800051c:	60fb      	str	r3, [r7, #12]
	break;
 800051e:	bf00      	nop
	}
switch (pin){
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	2b0f      	cmp	r3, #15
 8000524:	d85a      	bhi.n	80005dc <pintoggle+0x114>
 8000526:	a201      	add	r2, pc, #4	; (adr r2, 800052c <pintoggle+0x64>)
 8000528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800052c:	0800056d 	.word	0x0800056d
 8000530:	08000573 	.word	0x08000573
 8000534:	08000579 	.word	0x08000579
 8000538:	0800057f 	.word	0x0800057f
 800053c:	08000585 	.word	0x08000585
 8000540:	0800058b 	.word	0x0800058b
 8000544:	08000591 	.word	0x08000591
 8000548:	08000597 	.word	0x08000597
 800054c:	0800059d 	.word	0x0800059d
 8000550:	080005a5 	.word	0x080005a5
 8000554:	080005ad 	.word	0x080005ad
 8000558:	080005b5 	.word	0x080005b5
 800055c:	080005bd 	.word	0x080005bd
 8000560:	080005c5 	.word	0x080005c5
 8000564:	080005cd 	.word	0x080005cd
 8000568:	080005d5 	.word	0x080005d5
	case 0: pin_number = 0x0001;
 800056c:	2301      	movs	r3, #1
 800056e:	817b      	strh	r3, [r7, #10]
	break;
 8000570:	e034      	b.n	80005dc <pintoggle+0x114>
	case 1: pin_number = 0x0002;
 8000572:	2302      	movs	r3, #2
 8000574:	817b      	strh	r3, [r7, #10]
	break;
 8000576:	e031      	b.n	80005dc <pintoggle+0x114>
	case 2: pin_number = 0x0004;
 8000578:	2304      	movs	r3, #4
 800057a:	817b      	strh	r3, [r7, #10]
	break;
 800057c:	e02e      	b.n	80005dc <pintoggle+0x114>
	case 3: pin_number = 0x0008;
 800057e:	2308      	movs	r3, #8
 8000580:	817b      	strh	r3, [r7, #10]
	break;
 8000582:	e02b      	b.n	80005dc <pintoggle+0x114>
	case 4: pin_number = 0x0010;
 8000584:	2310      	movs	r3, #16
 8000586:	817b      	strh	r3, [r7, #10]
	break;
 8000588:	e028      	b.n	80005dc <pintoggle+0x114>
	case 5: pin_number = 0x0020;
 800058a:	2320      	movs	r3, #32
 800058c:	817b      	strh	r3, [r7, #10]
	break;
 800058e:	e025      	b.n	80005dc <pintoggle+0x114>
	case 6: pin_number = 0x0040;
 8000590:	2340      	movs	r3, #64	; 0x40
 8000592:	817b      	strh	r3, [r7, #10]
	break;
 8000594:	e022      	b.n	80005dc <pintoggle+0x114>
	case 7: pin_number = 0x0080;
 8000596:	2380      	movs	r3, #128	; 0x80
 8000598:	817b      	strh	r3, [r7, #10]
	break;
 800059a:	e01f      	b.n	80005dc <pintoggle+0x114>
	case 8: pin_number = 0x0100;
 800059c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005a0:	817b      	strh	r3, [r7, #10]
	break;
 80005a2:	e01b      	b.n	80005dc <pintoggle+0x114>
	case 9: pin_number = 0x0200;
 80005a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a8:	817b      	strh	r3, [r7, #10]
	break;
 80005aa:	e017      	b.n	80005dc <pintoggle+0x114>
	case 10: pin_number = 0x0400;
 80005ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b0:	817b      	strh	r3, [r7, #10]
	break;
 80005b2:	e013      	b.n	80005dc <pintoggle+0x114>
	case 11: pin_number = 0x0800;
 80005b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80005b8:	817b      	strh	r3, [r7, #10]
	break;
 80005ba:	e00f      	b.n	80005dc <pintoggle+0x114>
	case 12: pin_number = 0x1000;
 80005bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c0:	817b      	strh	r3, [r7, #10]
	break;
 80005c2:	e00b      	b.n	80005dc <pintoggle+0x114>
	case 13: pin_number = 0x2000;
 80005c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005c8:	817b      	strh	r3, [r7, #10]
	break;
 80005ca:	e007      	b.n	80005dc <pintoggle+0x114>
	case 14: pin_number = 0x4000;
 80005cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005d0:	817b      	strh	r3, [r7, #10]
	break;
 80005d2:	e003      	b.n	80005dc <pintoggle+0x114>
	case 15: pin_number = 0x8000;
 80005d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005d8:	817b      	strh	r3, [r7, #10]
	break;
 80005da:	bf00      	nop
	}
	HAL_GPIO_WritePin(PORT__BASE, pin_number, 1);
 80005dc:	897b      	ldrh	r3, [r7, #10]
 80005de:	2201      	movs	r2, #1
 80005e0:	4619      	mov	r1, r3
 80005e2:	68f8      	ldr	r0, [r7, #12]
 80005e4:	f001 fdc8 	bl	8002178 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005e8:	200a      	movs	r0, #10
 80005ea:	f001 f895 	bl	8001718 <HAL_Delay>
    HAL_GPIO_WritePin(PORT__BASE, pin_number, 0);
 80005ee:	897b      	ldrh	r3, [r7, #10]
 80005f0:	2200      	movs	r2, #0
 80005f2:	4619      	mov	r1, r3
 80005f4:	68f8      	ldr	r0, [r7, #12]
 80005f6:	f001 fdbf 	bl	8002178 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005fa:	200a      	movs	r0, #10
 80005fc:	f001 f88c 	bl	8001718 <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40020000 	.word	0x40020000
 800060c:	40020400 	.word	0x40020400
 8000610:	40020800 	.word	0x40020800
 8000614:	40020c00 	.word	0x40020c00
 8000618:	40021000 	.word	0x40021000

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b09b      	sub	sp, #108	; 0x6c
 8000620:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000622:	f001 f807 	bl	8001634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000626:	f000 f96f 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062a:	f000 fbcf 	bl	8000dcc <MX_GPIO_Init>
  MX_I2C1_Init();
 800062e:	f000 fa27 	bl	8000a80 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000632:	f000 fa53 	bl	8000adc <MX_I2C2_Init>
  MX_SPI1_Init();
 8000636:	f000 fa7f 	bl	8000b38 <MX_SPI1_Init>
  MX_SPI2_Init();
 800063a:	f000 fab3 	bl	8000ba4 <MX_SPI2_Init>
  MX_SPI3_Init();
 800063e:	f000 fae7 	bl	8000c10 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000642:	f000 fb1b 	bl	8000c7c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000646:	f000 fb6d 	bl	8000d24 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800064a:	f000 fb95 	bl	8000d78 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800064e:	f000 f9c5 	bl	80009dc <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000652:	f008 ff6f 	bl	8009534 <MX_USB_DEVICE_Init>
  MX_USART2_UART_Init();
 8000656:	f000 fb3b 	bl	8000cd0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	/* USER CODE END WHILE */

    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 800065a:	2201      	movs	r2, #1
 800065c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000660:	489a      	ldr	r0, [pc, #616]	; (80008cc <main+0x2b0>)
 8000662:	f001 fd89 	bl	8002178 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000666:	200a      	movs	r0, #10
 8000668:	f001 f856 	bl	8001718 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000672:	4896      	ldr	r0, [pc, #600]	; (80008cc <main+0x2b0>)
 8000674:	f001 fd80 	bl	8002178 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000678:	200a      	movs	r0, #10
 800067a:	f001 f84d 	bl	8001718 <HAL_Delay>


         // PWM_ CONTROL
    pintoggle('c',8);  // PWM_HEATER - BATTERY
 800067e:	2108      	movs	r1, #8
 8000680:	2063      	movs	r0, #99	; 0x63
 8000682:	f7ff ff21 	bl	80004c8 <pintoggle>

    pintoggle('a',0);  // PWM_HEATER - BATTERY
 8000686:	2100      	movs	r1, #0
 8000688:	2061      	movs	r0, #97	; 0x61
 800068a:	f7ff ff1d 	bl	80004c8 <pintoggle>
    pintoggle('a',1);  // PWM_HEATER - BATTERY
 800068e:	2101      	movs	r1, #1
 8000690:	2061      	movs	r0, #97	; 0x61
 8000692:	f7ff ff19 	bl	80004c8 <pintoggle>
    pintoggle('a',2);  // PWM_HEATER - BATTERY
 8000696:	2102      	movs	r1, #2
 8000698:	2061      	movs	r0, #97	; 0x61
 800069a:	f7ff ff15 	bl	80004c8 <pintoggle>

         // GPIO DI DIREZIONE
    pintoggle('e',7);	// Dir_X
 800069e:	2107      	movs	r1, #7
 80006a0:	2065      	movs	r0, #101	; 0x65
 80006a2:	f7ff ff11 	bl	80004c8 <pintoggle>
    pintoggle('e',8);	// Dir_Y
 80006a6:	2108      	movs	r1, #8
 80006a8:	2065      	movs	r0, #101	; 0x65
 80006aa:	f7ff ff0d 	bl	80004c8 <pintoggle>
    pintoggle('e',9);	// Dir_Z
 80006ae:	2109      	movs	r1, #9
 80006b0:	2065      	movs	r0, #101	; 0x65
 80006b2:	f7ff ff09 	bl	80004c8 <pintoggle>

    	//GPIO DI CONTROLLO
    pintoggle('b',5);	// WATCHDOG
 80006b6:	2105      	movs	r1, #5
 80006b8:	2062      	movs	r0, #98	; 0x62
 80006ba:	f7ff ff05 	bl	80004c8 <pintoggle>
    pintoggle('d',12); 	// TMTC_WD
 80006be:	210c      	movs	r1, #12
 80006c0:	2064      	movs	r0, #100	; 0x64
 80006c2:	f7ff ff01 	bl	80004c8 <pintoggle>
    pintoggle('e',0);	// ANA_PWR_ON
 80006c6:	2100      	movs	r1, #0
 80006c8:	2065      	movs	r0, #101	; 0x65
 80006ca:	f7ff fefd 	bl	80004c8 <pintoggle>
    pintoggle('e',1);	// RAD_PWR_ON
 80006ce:	2101      	movs	r1, #1
 80006d0:	2065      	movs	r0, #101	; 0x65
 80006d2:	f7ff fef9 	bl	80004c8 <pintoggle>
    pintoggle('e',3);	// SBD_PWR_ON
 80006d6:	2103      	movs	r1, #3
 80006d8:	2065      	movs	r0, #101	; 0x65
 80006da:	f7ff fef5 	bl	80004c8 <pintoggle>
    pintoggle('e',2);	// GPS_PWR_ON
 80006de:	2102      	movs	r1, #2
 80006e0:	2065      	movs	r0, #101	; 0x65
 80006e2:	f7ff fef1 	bl	80004c8 <pintoggle>
    pintoggle('e',6);	// RSBY_PWR_ON
 80006e6:	2106      	movs	r1, #6
 80006e8:	2065      	movs	r0, #101	; 0x65
 80006ea:	f7ff feed 	bl	80004c8 <pintoggle>
    pintoggle('b',0);	// RSBY_KEEP_EN
 80006ee:	2100      	movs	r1, #0
 80006f0:	2062      	movs	r0, #98	; 0x62
 80006f2:	f7ff fee9 	bl	80004c8 <pintoggle>

         // GPIO DI DIREZIONE
    pintoggle('b',1);	// EX_GPIO1
 80006f6:	2101      	movs	r1, #1
 80006f8:	2062      	movs	r0, #98	; 0x62
 80006fa:	f7ff fee5 	bl	80004c8 <pintoggle>
    pintoggle('b',12);	// EX_GPIO2
 80006fe:	210c      	movs	r1, #12
 8000700:	2062      	movs	r0, #98	; 0x62
 8000702:	f7ff fee1 	bl	80004c8 <pintoggle>
    pintoggle('a',3);	// EX_GPIO3
 8000706:	2103      	movs	r1, #3
 8000708:	2061      	movs	r0, #97	; 0x61
 800070a:	f7ff fedd 	bl	80004c8 <pintoggle>
    pintoggle('a',10);	// EX_GPIO4
 800070e:	210a      	movs	r1, #10
 8000710:	2061      	movs	r0, #97	; 0x61
 8000712:	f7ff fed9 	bl	80004c8 <pintoggle>


         //CS_SPI_SENSORI
    pintoggle('e',5);  	// CS_NAND
 8000716:	2105      	movs	r1, #5
 8000718:	2065      	movs	r0, #101	; 0x65
 800071a:	f7ff fed5 	bl	80004c8 <pintoggle>
    pintoggle('e',4);  	// CS_LORA
 800071e:	2104      	movs	r1, #4
 8000720:	2065      	movs	r0, #101	; 0x65
 8000722:	f7ff fed1 	bl	80004c8 <pintoggle>
    pintoggle('a',4);	// CS_RADFET
 8000726:	2104      	movs	r1, #4
 8000728:	2061      	movs	r0, #97	; 0x61
 800072a:	f7ff fecd 	bl	80004c8 <pintoggle>
    pintoggle('e',11);	// EN_ADC1
 800072e:	210b      	movs	r1, #11
 8000730:	2065      	movs	r0, #101	; 0x65
 8000732:	f7ff fec9 	bl	80004c8 <pintoggle>
    pintoggle('e',13);	// EN_ADC2
 8000736:	210d      	movs	r1, #13
 8000738:	2065      	movs	r0, #101	; 0x65
 800073a:	f7ff fec5 	bl	80004c8 <pintoggle>
    pintoggle('e',12);	// EN_ADC3
 800073e:	210c      	movs	r1, #12
 8000740:	2065      	movs	r0, #101	; 0x65
 8000742:	f7ff fec1 	bl	80004c8 <pintoggle>
    pintoggle('c',9);  	// EXT_SPI_EN
 8000746:	2109      	movs	r1, #9
 8000748:	2063      	movs	r0, #99	; 0x63
 800074a:	f7ff febd 	bl	80004c8 <pintoggle>
    pintoggle('d',10);	// CS_EEPROM
 800074e:	210a      	movs	r1, #10
 8000750:	2064      	movs	r0, #100	; 0x64
 8000752:	f7ff feb9 	bl	80004c8 <pintoggle>
    pintoggle('d',11);	// CS_FRAM
 8000756:	210b      	movs	r1, #11
 8000758:	2064      	movs	r0, #100	; 0x64
 800075a:	f7ff feb5 	bl	80004c8 <pintoggle>
    pintoggle('c',4);  	// CS_PSD1_AMP
 800075e:	2104      	movs	r1, #4
 8000760:	2063      	movs	r0, #99	; 0x63
 8000762:	f7ff feb1 	bl	80004c8 <pintoggle>
    pintoggle('c',5);   // CS_PSD2_AMP
 8000766:	2105      	movs	r1, #5
 8000768:	2063      	movs	r0, #99	; 0x63
 800076a:	f7ff fead 	bl	80004c8 <pintoggle>
    pintoggle('e',10);  // CS_GYRO
 800076e:	210a      	movs	r1, #10
 8000770:	2065      	movs	r0, #101	; 0x65
 8000772:	f7ff fea9 	bl	80004c8 <pintoggle>
    pintoggle('d',14);  // CS_GYRO2
 8000776:	210e      	movs	r1, #14
 8000778:	2064      	movs	r0, #100	; 0x64
 800077a:	f7ff fea5 	bl	80004c8 <pintoggle>




    uint8_t BufferPrint1[20]={"UNOOOO 1!\n"};
 800077e:	4a54      	ldr	r2, [pc, #336]	; (80008d0 <main+0x2b4>)
 8000780:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000784:	ca07      	ldmia	r2, {r0, r1, r2}
 8000786:	c303      	stmia	r3!, {r0, r1}
 8000788:	801a      	strh	r2, [r3, #0]
 800078a:	3302      	adds	r3, #2
 800078c:	0c12      	lsrs	r2, r2, #16
 800078e:	701a      	strb	r2, [r3, #0]
 8000790:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	721a      	strb	r2, [r3, #8]
    uint8_t BufferPrint2[20]={"DOS! 2!\n"};
 800079c:	4a4d      	ldr	r2, [pc, #308]	; (80008d4 <main+0x2b8>)
 800079e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80007a4:	c303      	stmia	r3!, {r0, r1}
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	f107 0341 	add.w	r3, r7, #65	; 0x41
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t BufferPrint3[20]={"TREs!  3!\n"};
 80007b6:	4a48      	ldr	r2, [pc, #288]	; (80008d8 <main+0x2bc>)
 80007b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80007be:	c303      	stmia	r3!, {r0, r1}
 80007c0:	801a      	strh	r2, [r3, #0]
 80007c2:	3302      	adds	r3, #2
 80007c4:	0c12      	lsrs	r2, r2, #16
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	721a      	strb	r2, [r3, #8]
    uint8_t BufferPrint6[20]={"666 666 666\n"};
 80007d4:	4b41      	ldr	r3, [pc, #260]	; (80008dc <main+0x2c0>)
 80007d6:	f107 0410 	add.w	r4, r7, #16
 80007da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007dc:	c407      	stmia	r4!, {r0, r1, r2}
 80007de:	7023      	strb	r3, [r4, #0]
 80007e0:	f107 031d 	add.w	r3, r7, #29
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	f8c3 2003 	str.w	r2, [r3, #3]

    HAL_UART_Transmit(&huart1, BufferPrint1, 20, 100);
 80007ec:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80007f0:	2364      	movs	r3, #100	; 0x64
 80007f2:	2214      	movs	r2, #20
 80007f4:	483a      	ldr	r0, [pc, #232]	; (80008e0 <main+0x2c4>)
 80007f6:	f004 f9bc 	bl	8004b72 <HAL_UART_Transmit>
    HAL_Delay(200);
 80007fa:	20c8      	movs	r0, #200	; 0xc8
 80007fc:	f000 ff8c 	bl	8001718 <HAL_Delay>

    HAL_UART_Transmit(&huart2, BufferPrint2, 20, 100);
 8000800:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000804:	2364      	movs	r3, #100	; 0x64
 8000806:	2214      	movs	r2, #20
 8000808:	4836      	ldr	r0, [pc, #216]	; (80008e4 <main+0x2c8>)
 800080a:	f004 f9b2 	bl	8004b72 <HAL_UART_Transmit>
    HAL_Delay(200);
 800080e:	20c8      	movs	r0, #200	; 0xc8
 8000810:	f000 ff82 	bl	8001718 <HAL_Delay>

   	HAL_UART_Transmit(&huart3, BufferPrint3, 20, 100);
 8000814:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000818:	2364      	movs	r3, #100	; 0x64
 800081a:	2214      	movs	r2, #20
 800081c:	4832      	ldr	r0, [pc, #200]	; (80008e8 <main+0x2cc>)
 800081e:	f004 f9a8 	bl	8004b72 <HAL_UART_Transmit>
    HAL_Delay(200);
 8000822:	20c8      	movs	r0, #200	; 0xc8
 8000824:	f000 ff78 	bl	8001718 <HAL_Delay>

    HAL_UART_Transmit(&huart6, BufferPrint6, 20, 100);
 8000828:	f107 0110 	add.w	r1, r7, #16
 800082c:	2364      	movs	r3, #100	; 0x64
 800082e:	2214      	movs	r2, #20
 8000830:	482e      	ldr	r0, [pc, #184]	; (80008ec <main+0x2d0>)
 8000832:	f004 f99e 	bl	8004b72 <HAL_UART_Transmit>
    HAL_Delay(200);
 8000836:	20c8      	movs	r0, #200	; 0xc8
 8000838:	f000 ff6e 	bl	8001718 <HAL_Delay>



    uint8_t Buffer[10]={ 0x0099, 0x0056, 0x0104,0x4255,0x0045,0x0043,0x0043,0x0043,0x0043,0x0055};
 800083c:	4a2c      	ldr	r2, [pc, #176]	; (80008f0 <main+0x2d4>)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	ca07      	ldmia	r2, {r0, r1, r2}
 8000842:	c303      	stmia	r3!, {r0, r1}
 8000844:	801a      	strh	r2, [r3, #0]

    HAL_I2C_Init(&hi2c1);
 8000846:	482b      	ldr	r0, [pc, #172]	; (80008f4 <main+0x2d8>)
 8000848:	f001 fcb0 	bl	80021ac <HAL_I2C_Init>
    HAL_I2C_Init(&hi2c2);
 800084c:	482a      	ldr	r0, [pc, #168]	; (80008f8 <main+0x2dc>)
 800084e:	f001 fcad 	bl	80021ac <HAL_I2C_Init>

    HAL_I2C_Master_Transmit(&hi2c1, 0x0123, Buffer, 10, 100);
 8000852:	1d3a      	adds	r2, r7, #4
 8000854:	2364      	movs	r3, #100	; 0x64
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	230a      	movs	r3, #10
 800085a:	f240 1123 	movw	r1, #291	; 0x123
 800085e:	4825      	ldr	r0, [pc, #148]	; (80008f4 <main+0x2d8>)
 8000860:	f001 fddc 	bl	800241c <HAL_I2C_Master_Transmit>
    HAL_Delay(200);
 8000864:	20c8      	movs	r0, #200	; 0xc8
 8000866:	f000 ff57 	bl	8001718 <HAL_Delay>
    HAL_I2C_Master_Transmit(&hi2c2, 0x0123, Buffer, 10, 100);
 800086a:	1d3a      	adds	r2, r7, #4
 800086c:	2364      	movs	r3, #100	; 0x64
 800086e:	9300      	str	r3, [sp, #0]
 8000870:	230a      	movs	r3, #10
 8000872:	f240 1123 	movw	r1, #291	; 0x123
 8000876:	4820      	ldr	r0, [pc, #128]	; (80008f8 <main+0x2dc>)
 8000878:	f001 fdd0 	bl	800241c <HAL_I2C_Master_Transmit>
    HAL_Delay(200);
 800087c:	20c8      	movs	r0, #200	; 0xc8
 800087e:	f000 ff4b 	bl	8001718 <HAL_Delay>

    HAL_SPI_Init(&hspi1);
 8000882:	481e      	ldr	r0, [pc, #120]	; (80008fc <main+0x2e0>)
 8000884:	f003 fee4 	bl	8004650 <HAL_SPI_Init>
    HAL_SPI_Init(&hspi2);
 8000888:	481d      	ldr	r0, [pc, #116]	; (8000900 <main+0x2e4>)
 800088a:	f003 fee1 	bl	8004650 <HAL_SPI_Init>
    HAL_SPI_Init(&hspi3);
 800088e:	481d      	ldr	r0, [pc, #116]	; (8000904 <main+0x2e8>)
 8000890:	f003 fede 	bl	8004650 <HAL_SPI_Init>


    HAL_SPI_Transmit(&hspi1, Buffer, 10, 100);
 8000894:	1d39      	adds	r1, r7, #4
 8000896:	2364      	movs	r3, #100	; 0x64
 8000898:	220a      	movs	r2, #10
 800089a:	4818      	ldr	r0, [pc, #96]	; (80008fc <main+0x2e0>)
 800089c:	f003 ff3c 	bl	8004718 <HAL_SPI_Transmit>
    HAL_Delay(200);
 80008a0:	20c8      	movs	r0, #200	; 0xc8
 80008a2:	f000 ff39 	bl	8001718 <HAL_Delay>
    HAL_SPI_Transmit(&hspi2, Buffer, 10, 100);
 80008a6:	1d39      	adds	r1, r7, #4
 80008a8:	2364      	movs	r3, #100	; 0x64
 80008aa:	220a      	movs	r2, #10
 80008ac:	4814      	ldr	r0, [pc, #80]	; (8000900 <main+0x2e4>)
 80008ae:	f003 ff33 	bl	8004718 <HAL_SPI_Transmit>
    HAL_Delay(200);
 80008b2:	20c8      	movs	r0, #200	; 0xc8
 80008b4:	f000 ff30 	bl	8001718 <HAL_Delay>
    HAL_SPI_Transmit(&hspi3, Buffer, 10, 100);
 80008b8:	1d39      	adds	r1, r7, #4
 80008ba:	2364      	movs	r3, #100	; 0x64
 80008bc:	220a      	movs	r2, #10
 80008be:	4811      	ldr	r0, [pc, #68]	; (8000904 <main+0x2e8>)
 80008c0:	f003 ff2a 	bl	8004718 <HAL_SPI_Transmit>
    HAL_Delay(200);
 80008c4:	20c8      	movs	r0, #200	; 0xc8
 80008c6:	f000 ff27 	bl	8001718 <HAL_Delay>
  {
 80008ca:	e6c6      	b.n	800065a <main+0x3e>
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	0800a0dc 	.word	0x0800a0dc
 80008d4:	0800a0f0 	.word	0x0800a0f0
 80008d8:	0800a104 	.word	0x0800a104
 80008dc:	0800a118 	.word	0x0800a118
 80008e0:	200003d4 	.word	0x200003d4
 80008e4:	200004ac 	.word	0x200004ac
 80008e8:	2000024c 	.word	0x2000024c
 80008ec:	20000414 	.word	0x20000414
 80008f0:	0800a12c 	.word	0x0800a12c
 80008f4:	2000028c 	.word	0x2000028c
 80008f8:	200002e0 	.word	0x200002e0
 80008fc:	20000454 	.word	0x20000454
 8000900:	200001f4 	.word	0x200001f4
 8000904:	20000334 	.word	0x20000334

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	; 0x50
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f009 fb12 	bl	8009f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <SystemClock_Config+0xcc>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <SystemClock_Config+0xcc>)
 8000936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093a:	6413      	str	r3, [r2, #64]	; 0x40
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <SystemClock_Config+0xcc>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <SystemClock_Config+0xd0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a21      	ldr	r2, [pc, #132]	; (80009d8 <SystemClock_Config+0xd0>)
 8000952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <SystemClock_Config+0xd0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096e:	2302      	movs	r3, #2
 8000970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000978:	2304      	movs	r3, #4
 800097a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800097c:	23a8      	movs	r3, #168	; 0xa8
 800097e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000980:	2302      	movs	r3, #2
 8000982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000984:	2307      	movs	r3, #7
 8000986:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4618      	mov	r0, r3
 800098e:	f003 f9fd 	bl	8003d8c <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000998:	f000 fb30 	bl	8000ffc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a0:	2302      	movs	r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2105      	movs	r1, #5
 80009ba:	4618      	mov	r0, r3
 80009bc:	f003 fc56 	bl	800426c <HAL_RCC_ClockConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009c6:	f000 fb19 	bl	8000ffc <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3750      	adds	r7, #80	; 0x50
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40007000 	.word	0x40007000

080009dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ee:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <MX_ADC1_Init+0x98>)
 80009f0:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <MX_ADC1_Init+0x9c>)
 80009f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_ADC1_Init+0x98>)
 80009f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009fc:	4b1d      	ldr	r3, [pc, #116]	; (8000a74 <MX_ADC1_Init+0x98>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_ADC1_Init+0x98>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_ADC1_Init+0x98>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0e:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <MX_ADC1_Init+0x98>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_ADC1_Init+0x98>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_ADC1_Init+0x98>)
 8000a1e:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <MX_ADC1_Init+0xa0>)
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_ADC1_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_ADC1_Init+0x98>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_ADC1_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_ADC1_Init+0x98>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <MX_ADC1_Init+0x98>)
 8000a3e:	f000 fe8d 	bl	800175c <HAL_ADC_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a48:	f000 fad8 	bl	8000ffc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_ADC1_Init+0x98>)
 8000a5e:	f000 fec1 	bl	80017e4 <HAL_ADC_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a68:	f000 fac8 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a6c:	bf00      	nop
 8000a6e:	3710      	adds	r7, #16
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000038c 	.word	0x2000038c
 8000a78:	40012000 	.word	0x40012000
 8000a7c:	0f000001 	.word	0x0f000001

08000a80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a86:	4a13      	ldr	r2, [pc, #76]	; (8000ad4 <MX_I2C1_Init+0x54>)
 8000a88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a8c:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_I2C1_Init+0x58>)
 8000a8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab0:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_I2C1_Init+0x50>)
 8000abe:	f001 fb75 	bl	80021ac <HAL_I2C_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ac8:	f000 fa98 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	2000028c 	.word	0x2000028c
 8000ad4:	40005400 	.word	0x40005400
 8000ad8:	000186a0 	.word	0x000186a0

08000adc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000ae2:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <MX_I2C2_Init+0x54>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000ae8:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MX_I2C2_Init+0x58>)
 8000aea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000afa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000afe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_I2C2_Init+0x50>)
 8000b1a:	f001 fb47 	bl	80021ac <HAL_I2C_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b24:	f000 fa6a 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200002e0 	.word	0x200002e0
 8000b30:	40005800 	.word	0x40005800
 8000b34:	000186a0 	.word	0x000186a0

08000b38 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b3e:	4a18      	ldr	r2, [pc, #96]	; (8000ba0 <MX_SPI1_Init+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b48:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b68:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b84:	220a      	movs	r2, #10
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_SPI1_Init+0x64>)
 8000b8a:	f003 fd61 	bl	8004650 <HAL_SPI_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b94:	f000 fa32 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000454 	.word	0x20000454
 8000ba0:	40013000 	.word	0x40013000

08000ba4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ba8:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_SPI2_Init+0x64>)
 8000baa:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <MX_SPI2_Init+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_SPI2_Init+0x64>)
 8000bb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_SPI2_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_SPI2_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <MX_SPI2_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_SPI2_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_SPI2_Init+0x64>)
 8000bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bd4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <MX_SPI2_Init+0x64>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_SPI2_Init+0x64>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_SPI2_Init+0x64>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000be8:	4b07      	ldr	r3, [pc, #28]	; (8000c08 <MX_SPI2_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_SPI2_Init+0x64>)
 8000bf0:	220a      	movs	r2, #10
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_SPI2_Init+0x64>)
 8000bf6:	f003 fd2b 	bl	8004650 <HAL_SPI_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c00:	f000 f9fc 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200001f4 	.word	0x200001f4
 8000c0c:	40003800 	.word	0x40003800

08000c10 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_SPI3_Init+0x64>)
 8000c16:	4a18      	ldr	r2, [pc, #96]	; (8000c78 <MX_SPI3_Init+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_SPI3_Init+0x64>)
 8000c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c20:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_SPI3_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_SPI3_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_SPI3_Init+0x64>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_SPI3_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_SPI3_Init+0x64>)
 8000c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c40:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_SPI3_Init+0x64>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <MX_SPI3_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_SPI3_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <MX_SPI3_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_SPI3_Init+0x64>)
 8000c5c:	220a      	movs	r2, #10
 8000c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_SPI3_Init+0x64>)
 8000c62:	f003 fcf5 	bl	8004650 <HAL_SPI_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000c6c:	f000 f9c6 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000334 	.word	0x20000334
 8000c78:	40003c00 	.word	0x40003c00

08000c7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <MX_USART1_UART_Init+0x50>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000cb4:	f003 ff10 	bl	8004ad8 <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cbe:	f000 f99d 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200003d4 	.word	0x200003d4
 8000ccc:	40011000 	.word	0x40011000

08000cd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cd6:	4a12      	ldr	r2, [pc, #72]	; (8000d20 <MX_USART2_UART_Init+0x50>)
 8000cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000d08:	f003 fee6 	bl	8004ad8 <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d12:	f000 f973 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200004ac 	.word	0x200004ac
 8000d20:	40004400 	.word	0x40004400

08000d24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <MX_USART3_UART_Init+0x50>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_USART3_UART_Init+0x4c>)
 8000d5c:	f003 febc 	bl	8004ad8 <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d66:	f000 f949 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000024c 	.word	0x2000024c
 8000d74:	40004800 	.word	0x40004800

08000d78 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <MX_USART6_UART_Init+0x50>)
 8000d80:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000d84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d88:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d96:	4b0b      	ldr	r3, [pc, #44]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000d9e:	220c      	movs	r2, #12
 8000da0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da2:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_USART6_UART_Init+0x4c>)
 8000db0:	f003 fe92 	bl	8004ad8 <HAL_UART_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000dba:	f000 f91f 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000414 	.word	0x20000414
 8000dc8:	40011400 	.word	0x40011400

08000dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	61bb      	str	r3, [r7, #24]
 8000de6:	4b7f      	ldr	r3, [pc, #508]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a7e      	ldr	r2, [pc, #504]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000dec:	f043 0310 	orr.w	r3, r3, #16
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b7c      	ldr	r3, [pc, #496]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0310 	and.w	r3, r3, #16
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	4b78      	ldr	r3, [pc, #480]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a77      	ldr	r2, [pc, #476]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e08:	f043 0304 	orr.w	r3, r3, #4
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b75      	ldr	r3, [pc, #468]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0304 	and.w	r3, r3, #4
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b71      	ldr	r3, [pc, #452]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a70      	ldr	r2, [pc, #448]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b6e      	ldr	r3, [pc, #440]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b6a      	ldr	r3, [pc, #424]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a69      	ldr	r2, [pc, #420]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b67      	ldr	r3, [pc, #412]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	4b63      	ldr	r3, [pc, #396]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a62      	ldr	r2, [pc, #392]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e5c:	f043 0302 	orr.w	r3, r3, #2
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b60      	ldr	r3, [pc, #384]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	4b5c      	ldr	r3, [pc, #368]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a5b      	ldr	r2, [pc, #364]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e78:	f043 0308 	orr.w	r3, r3, #8
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b59      	ldr	r3, [pc, #356]	; (8000fe4 <MX_GPIO_Init+0x218>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0308 	and.w	r3, r3, #8
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPS_PWR_ON_Pin|SBD_PWR_ON_Pin|CS_NAND_Pin|CS_LORA_Pin
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000e90:	4855      	ldr	r0, [pc, #340]	; (8000fe8 <MX_GPIO_Init+0x21c>)
 8000e92:	f001 f971 	bl	8002178 <HAL_GPIO_WritePin>
                          |RSBY_ON_Pin|DIR_COIL_X_Pin|DIR_COIL_Y_Pin|DIR_COIL_Z_Pin
                          |CS_GYRO_Pin|EN_ADC1_Pin|EN_ADC3_Pin|EN_ADC2_Pin
                          |SBD_SER_RI_Pin|SBD_SER_NET_Pin|ANA_PWR_ON_Pin|RAD_PWR_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UHF_RESET_Pin|RADFET_OWB_Pin|RAD_RESET_Pin|PSD1_SEL0_Pin
 8000e96:	2200      	movs	r2, #0
 8000e98:	f24e 213e 	movw	r1, #57918	; 0xe23e
 8000e9c:	4853      	ldr	r0, [pc, #332]	; (8000fec <MX_GPIO_Init+0x220>)
 8000e9e:	f001 f96b 	bl	8002178 <HAL_GPIO_WritePin>
                          |PSD2_SEL1_Pin|PSD2_SEL0_Pin|PSD1_AMP_CS_Pin|PSD2_AMP_CS_Pin
                          |EX_SPI_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PSD1_SEL1_GPIO_Port, PSD1_SEL1_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	4851      	ldr	r0, [pc, #324]	; (8000fec <MX_GPIO_Init+0x220>)
 8000ea8:	f001 f966 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EX_GPIO3_Pin|CS_RADFET_Pin|EX_GPIO4_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 6183 	mov.w	r1, #1048	; 0x418
 8000eb2:	484f      	ldr	r0, [pc, #316]	; (8000ff0 <MX_GPIO_Init+0x224>)
 8000eb4:	f001 f960 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RSBY_KEEP_EN_Pin|EX_GPIO1_Pin|EX_GPIO2_Pin|WATCHDOG_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f241 0123 	movw	r1, #4131	; 0x1023
 8000ebe:	484d      	ldr	r0, [pc, #308]	; (8000ff4 <MX_GPIO_Init+0x228>)
 8000ec0:	f001 f95a 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_EEPROM_Pin|CS_FRAM_Pin|CS_GYROD12_Pin|INT_GYRO_Pin
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f64f 419f 	movw	r1, #64671	; 0xfc9f
 8000eca:	484b      	ldr	r0, [pc, #300]	; (8000ff8 <MX_GPIO_Init+0x22c>)
 8000ecc:	f001 f954 	bl	8002178 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPS_PWR_ON_Pin SBD_PWR_ON_Pin CS_NAND_Pin CS_LORA_Pin
                           RSBY_ON_Pin DIR_COIL_X_Pin DIR_COIL_Y_Pin DIR_COIL_Z_Pin
                           CS_GYRO_Pin EN_ADC1_Pin EN_ADC3_Pin EN_ADC2_Pin
                           SBD_SER_RI_Pin SBD_SER_NET_Pin ANA_PWR_ON_Pin RAD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = GPS_PWR_ON_Pin|SBD_PWR_ON_Pin|CS_NAND_Pin|CS_LORA_Pin
 8000ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed4:	61fb      	str	r3, [r7, #28]
                          |RSBY_ON_Pin|DIR_COIL_X_Pin|DIR_COIL_Y_Pin|DIR_COIL_Z_Pin
                          |CS_GYRO_Pin|EN_ADC1_Pin|EN_ADC3_Pin|EN_ADC2_Pin
                          |SBD_SER_RI_Pin|SBD_SER_NET_Pin|ANA_PWR_ON_Pin|RAD_PWR_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	483f      	ldr	r0, [pc, #252]	; (8000fe8 <MX_GPIO_Init+0x21c>)
 8000eea:	f000 ffab 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : UHF_RESET_Pin RADFET_OWB_Pin RAD_RESET_Pin PSD1_SEL1_Pin
                           PSD1_SEL0_Pin PSD2_SEL1_Pin PSD2_SEL0_Pin PSD1_AMP_CS_Pin
                           PSD2_AMP_CS_Pin EX_SPI_EN_Pin */
  GPIO_InitStruct.Pin = UHF_RESET_Pin|RADFET_OWB_Pin|RAD_RESET_Pin|PSD1_SEL1_Pin
 8000eee:	f24e 233f 	movw	r3, #57919	; 0xe23f
 8000ef2:	61fb      	str	r3, [r7, #28]
                          |PSD1_SEL0_Pin|PSD2_SEL1_Pin|PSD2_SEL0_Pin|PSD1_AMP_CS_Pin
                          |PSD2_AMP_CS_Pin|EX_SPI_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	4839      	ldr	r0, [pc, #228]	; (8000fec <MX_GPIO_Init+0x220>)
 8000f08:	f000 ff9c 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_X_COIL_Pin PWM_Y_COIL_Pin PWM_Z_COIL_Pin */
  GPIO_InitStruct.Pin = PWM_X_COIL_Pin|PWM_Y_COIL_Pin|PWM_Z_COIL_Pin;
 8000f0c:	2307      	movs	r3, #7
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	4619      	mov	r1, r3
 8000f26:	4832      	ldr	r0, [pc, #200]	; (8000ff0 <MX_GPIO_Init+0x224>)
 8000f28:	f000 ff8c 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : EX_GPIO3_Pin CS_RADFET_Pin EX_GPIO4_Pin */
  GPIO_InitStruct.Pin = EX_GPIO3_Pin|CS_RADFET_Pin|EX_GPIO4_Pin;
 8000f2c:	f44f 6383 	mov.w	r3, #1048	; 0x418
 8000f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f32:	2301      	movs	r3, #1
 8000f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	482a      	ldr	r0, [pc, #168]	; (8000ff0 <MX_GPIO_Init+0x224>)
 8000f46:	f000 ff7d 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RSBY_KEEP_EN_Pin EX_GPIO1_Pin EX_GPIO2_Pin WATCHDOG_Pin */
  GPIO_InitStruct.Pin = RSBY_KEEP_EN_Pin|EX_GPIO1_Pin|EX_GPIO2_Pin|WATCHDOG_Pin;
 8000f4a:	f241 0323 	movw	r3, #4131	; 0x1023
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f50:	2301      	movs	r3, #1
 8000f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	4619      	mov	r1, r3
 8000f62:	4824      	ldr	r0, [pc, #144]	; (8000ff4 <MX_GPIO_Init+0x228>)
 8000f64:	f000 ff6e 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 031c 	add.w	r3, r7, #28
 8000f78:	4619      	mov	r1, r3
 8000f7a:	481e      	ldr	r0, [pc, #120]	; (8000ff4 <MX_GPIO_Init+0x228>)
 8000f7c:	f000 ff62 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_EEPROM_Pin CS_FRAM_Pin CS_GYROD12_Pin INT_GYRO_Pin
                           CS_GYRO2_Pin INT_GYRO2_Pin SBD_SER_DCD_Pin SBD_SER_DSR_Pin
                           SBD_SER_DTR_Pin SBD_SER_CTS_Pin SBD_SER_RTS_Pin SBD_ON_OFF_Pin */
  GPIO_InitStruct.Pin = CS_EEPROM_Pin|CS_FRAM_Pin|CS_GYROD12_Pin|INT_GYRO_Pin
 8000f80:	f64f 439f 	movw	r3, #64671	; 0xfc9f
 8000f84:	61fb      	str	r3, [r7, #28]
                          |CS_GYRO2_Pin|INT_GYRO2_Pin|SBD_SER_DCD_Pin|SBD_SER_DSR_Pin
                          |SBD_SER_DTR_Pin|SBD_SER_CTS_Pin|SBD_SER_RTS_Pin|SBD_ON_OFF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	4817      	ldr	r0, [pc, #92]	; (8000ff8 <MX_GPIO_Init+0x22c>)
 8000f9a:	f000 ff53 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWM_HEATER_Pin */
  GPIO_InitStruct.Pin = PWM_HEATER_Pin;
 8000f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PWM_HEATER_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_GPIO_Init+0x220>)
 8000fbc:	f000 ff42 	bl	8001e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PGOOD_Pin */
  GPIO_InitStruct.Pin = PGOOD_Pin;
 8000fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PGOOD_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <MX_GPIO_Init+0x224>)
 8000fd6:	f000 ff35 	bl	8001e44 <HAL_GPIO_Init>

}
 8000fda:	bf00      	nop
 8000fdc:	3730      	adds	r7, #48	; 0x30
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40020800 	.word	0x40020800
 8000ff0:	40020000 	.word	0x40020000
 8000ff4:	40020400 	.word	0x40020400
 8000ff8:	40020c00 	.word	0x40020c00

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <HAL_MspInit+0x4c>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <HAL_MspInit+0x4c>)
 800101c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001020:	6453      	str	r3, [r2, #68]	; 0x44
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_MspInit+0x4c>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_MspInit+0x4c>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_MspInit+0x4c>)
 8001038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_MspInit+0x4c>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800104a:	2007      	movs	r0, #7
 800104c:	f000 feb8 	bl	8001dc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40023800 	.word	0x40023800

0800105c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <HAL_ADC_MspInit+0x3c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d10d      	bne.n	800108a <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_ADC_MspInit+0x40>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <HAL_ADC_MspInit+0x40>)
 8001078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_ADC_MspInit+0x40>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40012000 	.word	0x40012000
 800109c:	40023800 	.word	0x40023800

080010a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a33      	ldr	r2, [pc, #204]	; (800118c <HAL_I2C_MspInit+0xec>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12d      	bne.n	800111e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	4b32      	ldr	r3, [pc, #200]	; (8001190 <HAL_I2C_MspInit+0xf0>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a31      	ldr	r2, [pc, #196]	; (8001190 <HAL_I2C_MspInit+0xf0>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_I2C_MspInit+0xf0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e4:	2312      	movs	r3, #18
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ec:	2303      	movs	r3, #3
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010f0:	2304      	movs	r3, #4
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4826      	ldr	r0, [pc, #152]	; (8001194 <HAL_I2C_MspInit+0xf4>)
 80010fc:	f000 fea2 	bl	8001e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <HAL_I2C_MspInit+0xf0>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	4a21      	ldr	r2, [pc, #132]	; (8001190 <HAL_I2C_MspInit+0xf0>)
 800110a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800110e:	6413      	str	r3, [r2, #64]	; 0x40
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <HAL_I2C_MspInit+0xf0>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800111c:	e031      	b.n	8001182 <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a1d      	ldr	r2, [pc, #116]	; (8001198 <HAL_I2C_MspInit+0xf8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d12c      	bne.n	8001182 <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <HAL_I2C_MspInit+0xf0>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	4a17      	ldr	r2, [pc, #92]	; (8001190 <HAL_I2C_MspInit+0xf0>)
 8001132:	f043 0302 	orr.w	r3, r3, #2
 8001136:	6313      	str	r3, [r2, #48]	; 0x30
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_I2C_MspInit+0xf0>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113c:	f003 0302 	and.w	r3, r3, #2
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001144:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114a:	2312      	movs	r3, #18
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800114e:	2301      	movs	r3, #1
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001156:	2304      	movs	r3, #4
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <HAL_I2C_MspInit+0xf4>)
 8001162:	f000 fe6f 	bl	8001e44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_I2C_MspInit+0xf0>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <HAL_I2C_MspInit+0xf0>)
 8001170:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001174:	6413      	str	r3, [r2, #64]	; 0x40
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_I2C_MspInit+0xf0>)
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
}
 8001182:	bf00      	nop
 8001184:	3730      	adds	r7, #48	; 0x30
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40005400 	.word	0x40005400
 8001190:	40023800 	.word	0x40023800
 8001194:	40020400 	.word	0x40020400
 8001198:	40005800 	.word	0x40005800

0800119c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	; 0x38
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a4c      	ldr	r2, [pc, #304]	; (80012ec <HAL_SPI_MspInit+0x150>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d12c      	bne.n	8001218 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
 80011c2:	4b4b      	ldr	r3, [pc, #300]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	4a4a      	ldr	r2, [pc, #296]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 80011c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011cc:	6453      	str	r3, [r2, #68]	; 0x44
 80011ce:	4b48      	ldr	r3, [pc, #288]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d6:	623b      	str	r3, [r7, #32]
 80011d8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
 80011de:	4b44      	ldr	r3, [pc, #272]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a43      	ldr	r2, [pc, #268]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b41      	ldr	r3, [pc, #260]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011f6:	23e0      	movs	r3, #224	; 0xe0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001206:	2305      	movs	r3, #5
 8001208:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	4619      	mov	r1, r3
 8001210:	4838      	ldr	r0, [pc, #224]	; (80012f4 <HAL_SPI_MspInit+0x158>)
 8001212:	f000 fe17 	bl	8001e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001216:	e064      	b.n	80012e2 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI2)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a36      	ldr	r2, [pc, #216]	; (80012f8 <HAL_SPI_MspInit+0x15c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d12d      	bne.n	800127e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a31      	ldr	r2, [pc, #196]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	61bb      	str	r3, [r7, #24]
 800123c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a2a      	ldr	r2, [pc, #168]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800125a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001260:	2302      	movs	r3, #2
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001268:	2303      	movs	r3, #3
 800126a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800126c:	2305      	movs	r3, #5
 800126e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001270:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001274:	4619      	mov	r1, r3
 8001276:	4821      	ldr	r0, [pc, #132]	; (80012fc <HAL_SPI_MspInit+0x160>)
 8001278:	f000 fde4 	bl	8001e44 <HAL_GPIO_Init>
}
 800127c:	e031      	b.n	80012e2 <HAL_SPI_MspInit+0x146>
  else if(hspi->Instance==SPI3)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a1f      	ldr	r2, [pc, #124]	; (8001300 <HAL_SPI_MspInit+0x164>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d12c      	bne.n	80012e2 <HAL_SPI_MspInit+0x146>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 8001292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001296:	6413      	str	r3, [r2, #64]	; 0x40
 8001298:	4b15      	ldr	r3, [pc, #84]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 80012aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 80012ae:	f043 0304 	orr.w	r3, r3, #4
 80012b2:	6313      	str	r3, [r2, #48]	; 0x30
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <HAL_SPI_MspInit+0x154>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80012c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012d2:	2306      	movs	r3, #6
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012da:	4619      	mov	r1, r3
 80012dc:	4809      	ldr	r0, [pc, #36]	; (8001304 <HAL_SPI_MspInit+0x168>)
 80012de:	f000 fdb1 	bl	8001e44 <HAL_GPIO_Init>
}
 80012e2:	bf00      	nop
 80012e4:	3738      	adds	r7, #56	; 0x38
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40013000 	.word	0x40013000
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40003800 	.word	0x40003800
 80012fc:	40020400 	.word	0x40020400
 8001300:	40003c00 	.word	0x40003c00
 8001304:	40020800 	.word	0x40020800

08001308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b090      	sub	sp, #64	; 0x40
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a64      	ldr	r2, [pc, #400]	; (80014b8 <HAL_UART_MspInit+0x1b0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d12c      	bne.n	8001384 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
 800132e:	4b63      	ldr	r3, [pc, #396]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	4a62      	ldr	r2, [pc, #392]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 8001334:	f043 0310 	orr.w	r3, r3, #16
 8001338:	6453      	str	r3, [r2, #68]	; 0x44
 800133a:	4b60      	ldr	r3, [pc, #384]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
 8001344:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
 800134a:	4b5c      	ldr	r3, [pc, #368]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a5b      	ldr	r2, [pc, #364]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b59      	ldr	r3, [pc, #356]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001362:	23c0      	movs	r3, #192	; 0xc0
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136e:	2303      	movs	r3, #3
 8001370:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001372:	2307      	movs	r3, #7
 8001374:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800137a:	4619      	mov	r1, r3
 800137c:	4850      	ldr	r0, [pc, #320]	; (80014c0 <HAL_UART_MspInit+0x1b8>)
 800137e:	f000 fd61 	bl	8001e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001382:	e095      	b.n	80014b0 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a4e      	ldr	r2, [pc, #312]	; (80014c4 <HAL_UART_MspInit+0x1bc>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12c      	bne.n	80013e8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
 8001392:	4b4a      	ldr	r3, [pc, #296]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	4a49      	ldr	r2, [pc, #292]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 8001398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800139c:	6413      	str	r3, [r2, #64]	; 0x40
 800139e:	4b47      	ldr	r3, [pc, #284]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	623b      	str	r3, [r7, #32]
 80013a8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	4b43      	ldr	r3, [pc, #268]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a42      	ldr	r2, [pc, #264]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b40      	ldr	r3, [pc, #256]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013c6:	2360      	movs	r3, #96	; 0x60
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013d6:	2307      	movs	r3, #7
 80013d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013de:	4619      	mov	r1, r3
 80013e0:	4839      	ldr	r0, [pc, #228]	; (80014c8 <HAL_UART_MspInit+0x1c0>)
 80013e2:	f000 fd2f 	bl	8001e44 <HAL_GPIO_Init>
}
 80013e6:	e063      	b.n	80014b0 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART3)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a37      	ldr	r2, [pc, #220]	; (80014cc <HAL_UART_MspInit+0x1c4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d12d      	bne.n	800144e <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	4b31      	ldr	r3, [pc, #196]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	4a30      	ldr	r2, [pc, #192]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 80013fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001400:	6413      	str	r3, [r2, #64]	; 0x40
 8001402:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a29      	ldr	r2, [pc, #164]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b27      	ldr	r3, [pc, #156]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800142a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800143c:	2307      	movs	r3, #7
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001444:	4619      	mov	r1, r3
 8001446:	4820      	ldr	r0, [pc, #128]	; (80014c8 <HAL_UART_MspInit+0x1c0>)
 8001448:	f000 fcfc 	bl	8001e44 <HAL_GPIO_Init>
}
 800144c:	e030      	b.n	80014b0 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART6)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a1f      	ldr	r2, [pc, #124]	; (80014d0 <HAL_UART_MspInit+0x1c8>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d12b      	bne.n	80014b0 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	4a16      	ldr	r2, [pc, #88]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 8001462:	f043 0320 	orr.w	r3, r3, #32
 8001466:	6453      	str	r3, [r2, #68]	; 0x44
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	f003 0320 	and.w	r3, r3, #32
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6313      	str	r3, [r2, #48]	; 0x30
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_UART_MspInit+0x1b4>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001490:	23c0      	movs	r3, #192	; 0xc0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014a0:	2308      	movs	r3, #8
 80014a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a8:	4619      	mov	r1, r3
 80014aa:	480a      	ldr	r0, [pc, #40]	; (80014d4 <HAL_UART_MspInit+0x1cc>)
 80014ac:	f000 fcca 	bl	8001e44 <HAL_GPIO_Init>
}
 80014b0:	bf00      	nop
 80014b2:	3740      	adds	r7, #64	; 0x40
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40011000 	.word	0x40011000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40004400 	.word	0x40004400
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40004800 	.word	0x40004800
 80014d0:	40011400 	.word	0x40011400
 80014d4:	40020800 	.word	0x40020800

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <MemManage_Handler+0x4>

080014f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <UsageFault_Handler+0x4>

080014fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152c:	f000 f8d4 	bl	80016d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <OTG_FS_IRQHandler+0x10>)
 800153a:	f001 fbc6 	bl	8002cca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	200009c0 	.word	0x200009c0

08001548 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001550:	4a14      	ldr	r2, [pc, #80]	; (80015a4 <_sbrk+0x5c>)
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <_sbrk+0x60>)
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800155c:	4b13      	ldr	r3, [pc, #76]	; (80015ac <_sbrk+0x64>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d102      	bne.n	800156a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <_sbrk+0x64>)
 8001566:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <_sbrk+0x68>)
 8001568:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	429a      	cmp	r2, r3
 8001576:	d207      	bcs.n	8001588 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001578:	f008 fca8 	bl	8009ecc <__errno>
 800157c:	4602      	mov	r2, r0
 800157e:	230c      	movs	r3, #12
 8001580:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001586:	e009      	b.n	800159c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <_sbrk+0x64>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4413      	add	r3, r2
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <_sbrk+0x64>)
 8001598:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159a:	68fb      	ldr	r3, [r7, #12]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20020000 	.word	0x20020000
 80015a8:	00000400 	.word	0x00000400
 80015ac:	200001e4 	.word	0x200001e4
 80015b0:	20000dd0 	.word	0x20000dd0

080015b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <SystemInit+0x28>)
 80015ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015be:	4a07      	ldr	r2, [pc, #28]	; (80015dc <SystemInit+0x28>)
 80015c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <SystemInit+0x28>)
 80015ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ce:	609a      	str	r2, [r3, #8]
#endif
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001618 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015e4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015e6:	e003      	b.n	80015f0 <LoopCopyDataInit>

080015e8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015e8:	4b0c      	ldr	r3, [pc, #48]	; (800161c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015ea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015ec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015ee:	3104      	adds	r1, #4

080015f0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015f0:	480b      	ldr	r0, [pc, #44]	; (8001620 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015f4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015f6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015f8:	d3f6      	bcc.n	80015e8 <CopyDataInit>
  ldr  r2, =_sbss
 80015fa:	4a0b      	ldr	r2, [pc, #44]	; (8001628 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015fc:	e002      	b.n	8001604 <LoopFillZerobss>

080015fe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015fe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001600:	f842 3b04 	str.w	r3, [r2], #4

08001604 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001606:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001608:	d3f9      	bcc.n	80015fe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800160a:	f7ff ffd3 	bl	80015b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800160e:	f008 fc63 	bl	8009ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001612:	f7ff f803 	bl	800061c <main>
  bx  lr    
 8001616:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001618:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800161c:	0800a1c8 	.word	0x0800a1c8
  ldr  r0, =_sdata
 8001620:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001624:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8001628:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 800162c:	20000dcc 	.word	0x20000dcc

08001630 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001630:	e7fe      	b.n	8001630 <ADC_IRQHandler>
	...

08001634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_Init+0x40>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <HAL_Init+0x40>)
 800163e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001642:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001644:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <HAL_Init+0x40>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <HAL_Init+0x40>)
 800164a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_Init+0x40>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_Init+0x40>)
 8001656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 fbaf 	bl	8001dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001662:	2000      	movs	r0, #0
 8001664:	f000 f808 	bl	8001678 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001668:	f7ff fcd0 	bl	800100c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40023c00 	.word	0x40023c00

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <HAL_InitTick+0x54>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x58>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001692:	fbb2 f3f3 	udiv	r3, r2, r3
 8001696:	4618      	mov	r0, r3
 8001698:	f000 fbc7 	bl	8001e2a <HAL_SYSTICK_Config>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00e      	b.n	80016c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b0f      	cmp	r3, #15
 80016aa:	d80a      	bhi.n	80016c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ac:	2200      	movs	r2, #0
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016b4:	f000 fb8f 	bl	8001dd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016b8:	4a06      	ldr	r2, [pc, #24]	; (80016d4 <HAL_InitTick+0x5c>)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000000 	.word	0x20000000
 80016d0:	20000008 	.word	0x20000008
 80016d4:	20000004 	.word	0x20000004

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	; (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000008 	.word	0x20000008
 80016fc:	200004ec 	.word	0x200004ec

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	200004ec 	.word	0x200004ec

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_Delay+0x40>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000008 	.word	0x20000008

0800175c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e033      	b.n	80017da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	2b00      	cmp	r3, #0
 8001778:	d109      	bne.n	800178e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff fc6e 	bl	800105c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b00      	cmp	r3, #0
 8001798:	d118      	bne.n	80017cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017a2:	f023 0302 	bic.w	r3, r3, #2
 80017a6:	f043 0202 	orr.w	r2, r3, #2
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f93a 	bl	8001a28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f023 0303 	bic.w	r3, r3, #3
 80017c2:	f043 0201 	orr.w	r2, r3, #1
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
 80017ca:	e001      	b.n	80017d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d101      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x1c>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e105      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x228>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b09      	cmp	r3, #9
 800180e:	d925      	bls.n	800185c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68d9      	ldr	r1, [r3, #12]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	3b1e      	subs	r3, #30
 8001826:	2207      	movs	r2, #7
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43da      	mvns	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	400a      	ands	r2, r1
 8001834:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68d9      	ldr	r1, [r3, #12]
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	b29b      	uxth	r3, r3
 8001846:	4618      	mov	r0, r3
 8001848:	4603      	mov	r3, r0
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4403      	add	r3, r0
 800184e:	3b1e      	subs	r3, #30
 8001850:	409a      	lsls	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	e022      	b.n	80018a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6919      	ldr	r1, [r3, #16]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	b29b      	uxth	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	2207      	movs	r2, #7
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	400a      	ands	r2, r1
 800187e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6919      	ldr	r1, [r3, #16]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	b29b      	uxth	r3, r3
 8001890:	4618      	mov	r0, r3
 8001892:	4603      	mov	r3, r0
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4403      	add	r3, r0
 8001898:	409a      	lsls	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d824      	bhi.n	80018f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	3b05      	subs	r3, #5
 80018bc:	221f      	movs	r2, #31
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	400a      	ands	r2, r1
 80018ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	4618      	mov	r0, r3
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	3b05      	subs	r3, #5
 80018e6:	fa00 f203 	lsl.w	r2, r0, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	635a      	str	r2, [r3, #52]	; 0x34
 80018f2:	e04c      	b.n	800198e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2b0c      	cmp	r3, #12
 80018fa:	d824      	bhi.n	8001946 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	4613      	mov	r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	3b23      	subs	r3, #35	; 0x23
 800190e:	221f      	movs	r2, #31
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43da      	mvns	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	400a      	ands	r2, r1
 800191c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	b29b      	uxth	r3, r3
 800192a:	4618      	mov	r0, r3
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4613      	mov	r3, r2
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	3b23      	subs	r3, #35	; 0x23
 8001938:	fa00 f203 	lsl.w	r2, r0, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	631a      	str	r2, [r3, #48]	; 0x30
 8001944:	e023      	b.n	800198e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	3b41      	subs	r3, #65	; 0x41
 8001958:	221f      	movs	r2, #31
 800195a:	fa02 f303 	lsl.w	r3, r2, r3
 800195e:	43da      	mvns	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	400a      	ands	r2, r1
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	b29b      	uxth	r3, r3
 8001974:	4618      	mov	r0, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	4413      	add	r3, r2
 8001980:	3b41      	subs	r3, #65	; 0x41
 8001982:	fa00 f203 	lsl.w	r2, r0, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800198e:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_ADC_ConfigChannel+0x234>)
 8001990:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a21      	ldr	r2, [pc, #132]	; (8001a1c <HAL_ADC_ConfigChannel+0x238>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d109      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1cc>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b12      	cmp	r3, #18
 80019a2:	d105      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a19      	ldr	r2, [pc, #100]	; (8001a1c <HAL_ADC_ConfigChannel+0x238>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d123      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x21e>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b10      	cmp	r3, #16
 80019c0:	d003      	beq.n	80019ca <HAL_ADC_ConfigChannel+0x1e6>
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b11      	cmp	r3, #17
 80019c8:	d11b      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2b10      	cmp	r3, #16
 80019dc:	d111      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <HAL_ADC_ConfigChannel+0x23c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <HAL_ADC_ConfigChannel+0x240>)
 80019e4:	fba2 2303 	umull	r2, r3, r2, r3
 80019e8:	0c9a      	lsrs	r2, r3, #18
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019f4:	e002      	b.n	80019fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f9      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	40012300 	.word	0x40012300
 8001a1c:	40012000 	.word	0x40012000
 8001a20:	20000000 	.word	0x20000000
 8001a24:	431bde83 	.word	0x431bde83

08001a28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a30:	4b79      	ldr	r3, [pc, #484]	; (8001c18 <ADC_Init+0x1f0>)
 8001a32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6859      	ldr	r1, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	021a      	lsls	r2, r3, #8
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6899      	ldr	r1, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <ADC_Init+0x1f4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d022      	beq.n	8001b06 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689a      	ldr	r2, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ace:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6899      	ldr	r1, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	689a      	ldr	r2, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001af0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6899      	ldr	r1, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	e00f      	b.n	8001b26 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b24:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0202 	bic.w	r2, r2, #2
 8001b34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6899      	ldr	r1, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7e1b      	ldrb	r3, [r3, #24]
 8001b40:	005a      	lsls	r2, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01b      	beq.n	8001b8c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b62:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	685a      	ldr	r2, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b72:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6859      	ldr	r1, [r3, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	035a      	lsls	r2, r3, #13
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	e007      	b.n	8001b9c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001baa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	051a      	lsls	r2, r3, #20
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6899      	ldr	r1, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bde:	025a      	lsls	r2, r3, #9
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bf6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6899      	ldr	r1, [r3, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	029a      	lsls	r2, r3, #10
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	609a      	str	r2, [r3, #8]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40012300 	.word	0x40012300
 8001c1c:	0f000001 	.word	0x0f000001

08001c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c36:	68ba      	ldr	r2, [r7, #8]
 8001c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c52:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <__NVIC_SetPriorityGrouping+0x44>)
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	60d3      	str	r3, [r2, #12]
}
 8001c58:	bf00      	nop
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4907      	ldr	r1, [pc, #28]	; (8001cbc <__NVIC_EnableIRQ+0x38>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db0a      	blt.n	8001cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	490c      	ldr	r1, [pc, #48]	; (8001d0c <__NVIC_SetPriority+0x4c>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce8:	e00a      	b.n	8001d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4908      	ldr	r1, [pc, #32]	; (8001d10 <__NVIC_SetPriority+0x50>)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3b04      	subs	r3, #4
 8001cf8:	0112      	lsls	r2, r2, #4
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	761a      	strb	r2, [r3, #24]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000e100 	.word	0xe000e100
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	; 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f1c3 0307 	rsb	r3, r3, #7
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf28      	it	cs
 8001d32:	2304      	movcs	r3, #4
 8001d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d902      	bls.n	8001d44 <NVIC_EncodePriority+0x30>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3b03      	subs	r3, #3
 8001d42:	e000      	b.n	8001d46 <NVIC_EncodePriority+0x32>
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	4313      	orrs	r3, r2
         );
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	; 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d8c:	d301      	bcc.n	8001d92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e00f      	b.n	8001db2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <SysTick_Config+0x40>)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d9a:	210f      	movs	r1, #15
 8001d9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001da0:	f7ff ff8e 	bl	8001cc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <SysTick_Config+0x40>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001daa:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <SysTick_Config+0x40>)
 8001dac:	2207      	movs	r2, #7
 8001dae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	e000e010 	.word	0xe000e010

08001dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f7ff ff29 	bl	8001c20 <__NVIC_SetPriorityGrouping>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
 8001de2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de8:	f7ff ff3e 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 8001dec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f7ff ff8e 	bl	8001d14 <NVIC_EncodePriority>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dfe:	4611      	mov	r1, r2
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff ff5d 	bl	8001cc0 <__NVIC_SetPriority>
}
 8001e06:	bf00      	nop
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff31 	bl	8001c84 <__NVIC_EnableIRQ>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7ff ffa2 	bl	8001d7c <SysTick_Config>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	e16b      	b.n	8002138 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e60:	2201      	movs	r2, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	f040 815a 	bne.w	8002132 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d00b      	beq.n	8001e9e <HAL_GPIO_Init+0x5a>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d007      	beq.n	8001e9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e92:	2b11      	cmp	r3, #17
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b12      	cmp	r3, #18
 8001e9c:	d130      	bne.n	8001f00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	2203      	movs	r2, #3
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 0201 	and.w	r2, r3, #1
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d003      	beq.n	8001f40 <HAL_GPIO_Init+0xfc>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b12      	cmp	r3, #18
 8001f3e:	d123      	bne.n	8001f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3208      	adds	r2, #8
 8001f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	220f      	movs	r2, #15
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	08da      	lsrs	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3208      	adds	r2, #8
 8001f82:	69b9      	ldr	r1, [r7, #24]
 8001f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0203 	and.w	r2, r3, #3
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80b4 	beq.w	8002132 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b5f      	ldr	r3, [pc, #380]	; (800214c <HAL_GPIO_Init+0x308>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	4a5e      	ldr	r2, [pc, #376]	; (800214c <HAL_GPIO_Init+0x308>)
 8001fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fda:	4b5c      	ldr	r3, [pc, #368]	; (800214c <HAL_GPIO_Init+0x308>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe6:	4a5a      	ldr	r2, [pc, #360]	; (8002150 <HAL_GPIO_Init+0x30c>)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a51      	ldr	r2, [pc, #324]	; (8002154 <HAL_GPIO_Init+0x310>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d02b      	beq.n	800206a <HAL_GPIO_Init+0x226>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a50      	ldr	r2, [pc, #320]	; (8002158 <HAL_GPIO_Init+0x314>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d025      	beq.n	8002066 <HAL_GPIO_Init+0x222>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4f      	ldr	r2, [pc, #316]	; (800215c <HAL_GPIO_Init+0x318>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01f      	beq.n	8002062 <HAL_GPIO_Init+0x21e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4e      	ldr	r2, [pc, #312]	; (8002160 <HAL_GPIO_Init+0x31c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d019      	beq.n	800205e <HAL_GPIO_Init+0x21a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4d      	ldr	r2, [pc, #308]	; (8002164 <HAL_GPIO_Init+0x320>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x216>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4c      	ldr	r2, [pc, #304]	; (8002168 <HAL_GPIO_Init+0x324>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00d      	beq.n	8002056 <HAL_GPIO_Init+0x212>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4b      	ldr	r2, [pc, #300]	; (800216c <HAL_GPIO_Init+0x328>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x20e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <HAL_GPIO_Init+0x32c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x20a>
 800204a:	2307      	movs	r3, #7
 800204c:	e00e      	b.n	800206c <HAL_GPIO_Init+0x228>
 800204e:	2308      	movs	r3, #8
 8002050:	e00c      	b.n	800206c <HAL_GPIO_Init+0x228>
 8002052:	2306      	movs	r3, #6
 8002054:	e00a      	b.n	800206c <HAL_GPIO_Init+0x228>
 8002056:	2305      	movs	r3, #5
 8002058:	e008      	b.n	800206c <HAL_GPIO_Init+0x228>
 800205a:	2304      	movs	r3, #4
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x228>
 800205e:	2303      	movs	r3, #3
 8002060:	e004      	b.n	800206c <HAL_GPIO_Init+0x228>
 8002062:	2302      	movs	r3, #2
 8002064:	e002      	b.n	800206c <HAL_GPIO_Init+0x228>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_GPIO_Init+0x228>
 800206a:	2300      	movs	r3, #0
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	f002 0203 	and.w	r2, r2, #3
 8002072:	0092      	lsls	r2, r2, #2
 8002074:	4093      	lsls	r3, r2
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800207c:	4934      	ldr	r1, [pc, #208]	; (8002150 <HAL_GPIO_Init+0x30c>)
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	3302      	adds	r3, #2
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800208a:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <HAL_GPIO_Init+0x330>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ae:	4a31      	ldr	r2, [pc, #196]	; (8002174 <HAL_GPIO_Init+0x330>)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020b4:	4b2f      	ldr	r3, [pc, #188]	; (8002174 <HAL_GPIO_Init+0x330>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d8:	4a26      	ldr	r2, [pc, #152]	; (8002174 <HAL_GPIO_Init+0x330>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020de:	4b25      	ldr	r3, [pc, #148]	; (8002174 <HAL_GPIO_Init+0x330>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002102:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <HAL_GPIO_Init+0x330>)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <HAL_GPIO_Init+0x330>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	43db      	mvns	r3, r3
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	4013      	ands	r3, r2
 8002116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d003      	beq.n	800212c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800212c:	4a11      	ldr	r2, [pc, #68]	; (8002174 <HAL_GPIO_Init+0x330>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3301      	adds	r3, #1
 8002136:	61fb      	str	r3, [r7, #28]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	2b0f      	cmp	r3, #15
 800213c:	f67f ae90 	bls.w	8001e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002140:	bf00      	nop
 8002142:	3724      	adds	r7, #36	; 0x24
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	40023800 	.word	0x40023800
 8002150:	40013800 	.word	0x40013800
 8002154:	40020000 	.word	0x40020000
 8002158:	40020400 	.word	0x40020400
 800215c:	40020800 	.word	0x40020800
 8002160:	40020c00 	.word	0x40020c00
 8002164:	40021000 	.word	0x40021000
 8002168:	40021400 	.word	0x40021400
 800216c:	40021800 	.word	0x40021800
 8002170:	40021c00 	.word	0x40021c00
 8002174:	40013c00 	.word	0x40013c00

08002178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]
 8002184:	4613      	mov	r3, r2
 8002186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002188:	787b      	ldrb	r3, [r7, #1]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800218e:	887a      	ldrh	r2, [r7, #2]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002194:	e003      	b.n	800219e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	041a      	lsls	r2, r3, #16
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	619a      	str	r2, [r3, #24]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
	...

080021ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e11f      	b.n	80023fe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe ff64 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2224      	movs	r2, #36	; 0x24
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800220e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002210:	f002 f9f6 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 8002214:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4a7b      	ldr	r2, [pc, #492]	; (8002408 <HAL_I2C_Init+0x25c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d807      	bhi.n	8002230 <HAL_I2C_Init+0x84>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a7a      	ldr	r2, [pc, #488]	; (800240c <HAL_I2C_Init+0x260>)
 8002224:	4293      	cmp	r3, r2
 8002226:	bf94      	ite	ls
 8002228:	2301      	movls	r3, #1
 800222a:	2300      	movhi	r3, #0
 800222c:	b2db      	uxtb	r3, r3
 800222e:	e006      	b.n	800223e <HAL_I2C_Init+0x92>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4a77      	ldr	r2, [pc, #476]	; (8002410 <HAL_I2C_Init+0x264>)
 8002234:	4293      	cmp	r3, r2
 8002236:	bf94      	ite	ls
 8002238:	2301      	movls	r3, #1
 800223a:	2300      	movhi	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0db      	b.n	80023fe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4a72      	ldr	r2, [pc, #456]	; (8002414 <HAL_I2C_Init+0x268>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0c9b      	lsrs	r3, r3, #18
 8002250:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	430a      	orrs	r2, r1
 8002264:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4a64      	ldr	r2, [pc, #400]	; (8002408 <HAL_I2C_Init+0x25c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d802      	bhi.n	8002280 <HAL_I2C_Init+0xd4>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	3301      	adds	r3, #1
 800227e:	e009      	b.n	8002294 <HAL_I2C_Init+0xe8>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	4a63      	ldr	r2, [pc, #396]	; (8002418 <HAL_I2C_Init+0x26c>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	3301      	adds	r3, #1
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	430b      	orrs	r3, r1
 800229a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	4956      	ldr	r1, [pc, #344]	; (8002408 <HAL_I2C_Init+0x25c>)
 80022b0:	428b      	cmp	r3, r1
 80022b2:	d80d      	bhi.n	80022d0 <HAL_I2C_Init+0x124>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1e59      	subs	r1, r3, #1
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c2:	3301      	adds	r3, #1
 80022c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	bf38      	it	cc
 80022cc:	2304      	movcc	r3, #4
 80022ce:	e04f      	b.n	8002370 <HAL_I2C_Init+0x1c4>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d111      	bne.n	80022fc <HAL_I2C_Init+0x150>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1e58      	subs	r0, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	440b      	add	r3, r1
 80022e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	e012      	b.n	8002322 <HAL_I2C_Init+0x176>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e58      	subs	r0, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	0099      	lsls	r1, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Init+0x17e>
 8002326:	2301      	movs	r3, #1
 8002328:	e022      	b.n	8002370 <HAL_I2C_Init+0x1c4>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10e      	bne.n	8002350 <HAL_I2C_Init+0x1a4>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1e58      	subs	r0, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6859      	ldr	r1, [r3, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	440b      	add	r3, r1
 8002340:	fbb0 f3f3 	udiv	r3, r0, r3
 8002344:	3301      	adds	r3, #1
 8002346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800234e:	e00f      	b.n	8002370 <HAL_I2C_Init+0x1c4>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1e58      	subs	r0, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	0099      	lsls	r1, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	fbb0 f3f3 	udiv	r3, r0, r3
 8002366:	3301      	adds	r3, #1
 8002368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	6809      	ldr	r1, [r1, #0]
 8002374:	4313      	orrs	r3, r2
 8002376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800239e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6911      	ldr	r1, [r2, #16]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68d2      	ldr	r2, [r2, #12]
 80023aa:	4311      	orrs	r1, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	000186a0 	.word	0x000186a0
 800240c:	001e847f 	.word	0x001e847f
 8002410:	003d08ff 	.word	0x003d08ff
 8002414:	431bde83 	.word	0x431bde83
 8002418:	10624dd3 	.word	0x10624dd3

0800241c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	461a      	mov	r2, r3
 8002428:	460b      	mov	r3, r1
 800242a:	817b      	strh	r3, [r7, #10]
 800242c:	4613      	mov	r3, r2
 800242e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002430:	f7ff f966 	bl	8001700 <HAL_GetTick>
 8002434:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b20      	cmp	r3, #32
 8002440:	f040 80e0 	bne.w	8002604 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2319      	movs	r3, #25
 800244a:	2201      	movs	r2, #1
 800244c:	4970      	ldr	r1, [pc, #448]	; (8002610 <HAL_I2C_Master_Transmit+0x1f4>)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f964 	bl	800271c <I2C_WaitOnFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800245a:	2302      	movs	r3, #2
 800245c:	e0d3      	b.n	8002606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_I2C_Master_Transmit+0x50>
 8002468:	2302      	movs	r3, #2
 800246a:	e0cc      	b.n	8002606 <HAL_I2C_Master_Transmit+0x1ea>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d007      	beq.n	8002492 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0201 	orr.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2221      	movs	r2, #33	; 0x21
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	2210      	movs	r2, #16
 80024ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	893a      	ldrh	r2, [r7, #8]
 80024c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4a50      	ldr	r2, [pc, #320]	; (8002614 <HAL_I2C_Master_Transmit+0x1f8>)
 80024d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024d4:	8979      	ldrh	r1, [r7, #10]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	6a3a      	ldr	r2, [r7, #32]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f89c 	bl	8002618 <I2C_MasterRequestWrite>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e08d      	b.n	8002606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002500:	e066      	b.n	80025d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	6a39      	ldr	r1, [r7, #32]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f9de 	bl	80028c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00d      	beq.n	800252e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	2b04      	cmp	r3, #4
 8002518:	d107      	bne.n	800252a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e06b      	b.n	8002606 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002548:	b29b      	uxth	r3, r3
 800254a:	3b01      	subs	r3, #1
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002556:	3b01      	subs	r3, #1
 8002558:	b29a      	uxth	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b04      	cmp	r3, #4
 800256a:	d11b      	bne.n	80025a4 <HAL_I2C_Master_Transmit+0x188>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	2b00      	cmp	r3, #0
 8002572:	d017      	beq.n	80025a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	781a      	ldrb	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	1c5a      	adds	r2, r3, #1
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	6a39      	ldr	r1, [r7, #32]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f9ce 	bl	800294a <I2C_WaitOnBTFFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00d      	beq.n	80025d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d107      	bne.n	80025cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e01a      	b.n	8002606 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d194      	bne.n	8002502 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	e000      	b.n	8002606 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002604:	2302      	movs	r3, #2
  }
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	00100002 	.word	0x00100002
 8002614:	ffff0000 	.word	0xffff0000

08002618 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af02      	add	r7, sp, #8
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	460b      	mov	r3, r1
 8002626:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d006      	beq.n	8002642 <I2C_MasterRequestWrite+0x2a>
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d003      	beq.n	8002642 <I2C_MasterRequestWrite+0x2a>
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002640:	d108      	bne.n	8002654 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	e00b      	b.n	800266c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	2b12      	cmp	r3, #18
 800265a:	d107      	bne.n	800266c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800266a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 f84f 	bl	800271c <I2C_WaitOnFlagUntilTimeout>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00c      	beq.n	800269e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002698:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e035      	b.n	800270a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a6:	d108      	bne.n	80026ba <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026a8:	897b      	ldrh	r3, [r7, #10]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026b6:	611a      	str	r2, [r3, #16]
 80026b8:	e01b      	b.n	80026f2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026ba:	897b      	ldrh	r3, [r7, #10]
 80026bc:	11db      	asrs	r3, r3, #7
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f003 0306 	and.w	r3, r3, #6
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f063 030f 	orn	r3, r3, #15
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	490f      	ldr	r1, [pc, #60]	; (8002714 <I2C_MasterRequestWrite+0xfc>)
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f876 	bl	80027ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e010      	b.n	800270a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80026e8:	897b      	ldrh	r3, [r7, #10]
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	4908      	ldr	r1, [pc, #32]	; (8002718 <I2C_MasterRequestWrite+0x100>)
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f866 	bl	80027ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	00010008 	.word	0x00010008
 8002718:	00010002 	.word	0x00010002

0800271c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	4613      	mov	r3, r2
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800272c:	e025      	b.n	800277a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002734:	d021      	beq.n	800277a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002736:	f7fe ffe3 	bl	8001700 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d302      	bcc.n	800274c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d116      	bne.n	800277a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e023      	b.n	80027c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d10d      	bne.n	80027a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	43da      	mvns	r2, r3
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4013      	ands	r3, r2
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	bf0c      	ite	eq
 8002796:	2301      	moveq	r3, #1
 8002798:	2300      	movne	r3, #0
 800279a:	b2db      	uxtb	r3, r3
 800279c:	461a      	mov	r2, r3
 800279e:	e00c      	b.n	80027ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	43da      	mvns	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4013      	ands	r3, r2
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d0b6      	beq.n	800272e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027d8:	e051      	b.n	800287e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e8:	d123      	bne.n	8002832 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002802:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f043 0204 	orr.w	r2, r3, #4
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e046      	b.n	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002838:	d021      	beq.n	800287e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800283a:	f7fe ff61 	bl	8001700 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	429a      	cmp	r2, r3
 8002848:	d302      	bcc.n	8002850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d116      	bne.n	800287e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f043 0220 	orr.w	r2, r3, #32
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e020      	b.n	80028c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	0c1b      	lsrs	r3, r3, #16
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b01      	cmp	r3, #1
 8002886:	d10c      	bne.n	80028a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4013      	ands	r3, r2
 8002894:	b29b      	uxth	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	bf14      	ite	ne
 800289a:	2301      	movne	r3, #1
 800289c:	2300      	moveq	r3, #0
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	e00b      	b.n	80028ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	43da      	mvns	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4013      	ands	r3, r2
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bf14      	ite	ne
 80028b4:	2301      	movne	r3, #1
 80028b6:	2300      	moveq	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d18d      	bne.n	80027da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028d4:	e02d      	b.n	8002932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f878 	bl	80029cc <I2C_IsAcknowledgeFailed>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e02d      	b.n	8002942 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028ec:	d021      	beq.n	8002932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ee:	f7fe ff07 	bl	8001700 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	68ba      	ldr	r2, [r7, #8]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d302      	bcc.n	8002904 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d116      	bne.n	8002932 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f043 0220 	orr.w	r2, r3, #32
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e007      	b.n	8002942 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293c:	2b80      	cmp	r3, #128	; 0x80
 800293e:	d1ca      	bne.n	80028d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	60f8      	str	r0, [r7, #12]
 8002952:	60b9      	str	r1, [r7, #8]
 8002954:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002956:	e02d      	b.n	80029b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 f837 	bl	80029cc <I2C_IsAcknowledgeFailed>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e02d      	b.n	80029c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800296e:	d021      	beq.n	80029b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002970:	f7fe fec6 	bl	8001700 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	429a      	cmp	r2, r3
 800297e:	d302      	bcc.n	8002986 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d116      	bne.n	80029b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	f043 0220 	orr.w	r2, r3, #32
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e007      	b.n	80029c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d1ca      	bne.n	8002958 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e2:	d11b      	bne.n	8002a1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a08:	f043 0204 	orr.w	r2, r3, #4
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a2c:	b08f      	sub	sp, #60	; 0x3c
 8002a2e:	af0a      	add	r7, sp, #40	; 0x28
 8002a30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e10f      	b.n	8002c5c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f006 ff0e 	bl	8009878 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2203      	movs	r2, #3
 8002a60:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d102      	bne.n	8002a76 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f002 fded 	bl	800565a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	687e      	ldr	r6, [r7, #4]
 8002a88:	466d      	mov	r5, sp
 8002a8a:	f106 0410 	add.w	r4, r6, #16
 8002a8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a96:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a9a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a9e:	1d33      	adds	r3, r6, #4
 8002aa0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa2:	6838      	ldr	r0, [r7, #0]
 8002aa4:	f002 fcc4 	bl	8005430 <USB_CoreInit>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d005      	beq.n	8002aba <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0d0      	b.n	8002c5c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2100      	movs	r1, #0
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f002 fddb 	bl	800567c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
 8002aca:	e04a      	b.n	8002b62 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002acc:	7bfa      	ldrb	r2, [r7, #15]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	333d      	adds	r3, #61	; 0x3d
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ae0:	7bfa      	ldrb	r2, [r7, #15]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	333c      	adds	r3, #60	; 0x3c
 8002af0:	7bfa      	ldrb	r2, [r7, #15]
 8002af2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002af4:	7bfa      	ldrb	r2, [r7, #15]
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
 8002af8:	b298      	uxth	r0, r3
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	00db      	lsls	r3, r3, #3
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	3342      	adds	r3, #66	; 0x42
 8002b08:	4602      	mov	r2, r0
 8002b0a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	333f      	adds	r3, #63	; 0x3f
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	3344      	adds	r3, #68	; 0x44
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	00db      	lsls	r3, r3, #3
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	3348      	adds	r3, #72	; 0x48
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b48:	7bfa      	ldrb	r2, [r7, #15]
 8002b4a:	6879      	ldr	r1, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	1a9b      	subs	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	3350      	adds	r3, #80	; 0x50
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	3301      	adds	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d3af      	bcc.n	8002acc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	73fb      	strb	r3, [r7, #15]
 8002b70:	e044      	b.n	8002bfc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b84:	2200      	movs	r2, #0
 8002b86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b9a:	7bfa      	ldrb	r2, [r7, #15]
 8002b9c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bb4:	7bfa      	ldrb	r2, [r7, #15]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bca:	7bfa      	ldrb	r2, [r7, #15]
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	1a9b      	subs	r3, r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4613      	mov	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	440b      	add	r3, r1
 8002bee:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d3b5      	bcc.n	8002b72 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	687e      	ldr	r6, [r7, #4]
 8002c0e:	466d      	mov	r5, sp
 8002c10:	f106 0410 	add.w	r4, r6, #16
 8002c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c20:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c24:	1d33      	adds	r3, r6, #4
 8002c26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c28:	6838      	ldr	r0, [r7, #0]
 8002c2a:	f002 fd51 	bl	80056d0 <USB_DevInit>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e00d      	b.n	8002c5c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f003 fd90 	bl	800677a <USB_DevDisconnect>

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c64 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_PCD_Start+0x1c>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e020      	b.n	8002cc2 <HAL_PCD_Start+0x5e>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d109      	bne.n	8002ca4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d005      	beq.n	8002ca4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f003 fd4e 	bl	800674a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 fcc0 	bl	8005638 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cca:	b590      	push	{r4, r7, lr}
 8002ccc:	b08d      	sub	sp, #52	; 0x34
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f003 fdf5 	bl	80068d0 <USB_GetMode>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f040 839d 	bne.w	8003428 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 fd59 	bl	80067aa <USB_ReadInterrupts>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8393 	beq.w	8003426 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 fd50 	bl	80067aa <USB_ReadInterrupts>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d107      	bne.n	8002d24 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695a      	ldr	r2, [r3, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f002 0202 	and.w	r2, r2, #2
 8002d22:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 fd3e 	bl	80067aa <USB_ReadInterrupts>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	d161      	bne.n	8002dfc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0210 	bic.w	r2, r2, #16
 8002d46:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	f003 020f 	and.w	r2, r3, #15
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4413      	add	r3, r2
 8002d64:	3304      	adds	r3, #4
 8002d66:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	0c5b      	lsrs	r3, r3, #17
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d124      	bne.n	8002dbe <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d035      	beq.n	8002dec <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	091b      	lsrs	r3, r3, #4
 8002d88:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	461a      	mov	r2, r3
 8002d92:	6a38      	ldr	r0, [r7, #32]
 8002d94:	f003 fbb6 	bl	8006504 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	091b      	lsrs	r3, r3, #4
 8002da0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002da4:	441a      	add	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002db6:	441a      	add	r2, r3
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	619a      	str	r2, [r3, #24]
 8002dbc:	e016      	b.n	8002dec <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	0c5b      	lsrs	r3, r3, #17
 8002dc2:	f003 030f 	and.w	r3, r3, #15
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d110      	bne.n	8002dec <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6a38      	ldr	r0, [r7, #32]
 8002dd6:	f003 fb95 	bl	8006504 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de6:	441a      	add	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699a      	ldr	r2, [r3, #24]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0210 	orr.w	r2, r2, #16
 8002dfa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f003 fcd2 	bl	80067aa <USB_ReadInterrupts>
 8002e06:	4603      	mov	r3, r0
 8002e08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e10:	d16e      	bne.n	8002ef0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 fcd8 	bl	80067d0 <USB_ReadDevAllOutEpInterrupt>
 8002e20:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e22:	e062      	b.n	8002eea <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d057      	beq.n	8002ede <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f003 fcfd 	bl	8006838 <USB_ReadDevOutEPInterrupt>
 8002e3e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00c      	beq.n	8002e64 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e56:	461a      	mov	r2, r3
 8002e58:	2301      	movs	r3, #1
 8002e5a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fdde 	bl	8003a20 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00c      	beq.n	8002e88 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	2308      	movs	r3, #8
 8002e7e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 fed8 	bl	8003c38 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002edc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d199      	bne.n	8002e24 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f003 fc58 	bl	80067aa <USB_ReadInterrupts>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f04:	f040 80c0 	bne.w	8003088 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f003 fc79 	bl	8006804 <USB_ReadDevAllInEpInterrupt>
 8002f12:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f18:	e0b2      	b.n	8003080 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80a7 	beq.w	8003074 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	4611      	mov	r1, r2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f003 fc9f 	bl	8006874 <USB_ReadDevInEPInterrupt>
 8002f36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d057      	beq.n	8002ff2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	2201      	movs	r2, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69f9      	ldr	r1, [r7, #28]
 8002f5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f62:	4013      	ands	r3, r2
 8002f64:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	015a      	lsls	r2, r3, #5
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f72:	461a      	mov	r2, r3
 8002f74:	2301      	movs	r3, #1
 8002f76:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d132      	bne.n	8002fe6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f84:	4613      	mov	r3, r2
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3348      	adds	r3, #72	; 0x48
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	4403      	add	r3, r0
 8002fa0:	3344      	adds	r3, #68	; 0x44
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4419      	add	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002faa:	4613      	mov	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4403      	add	r3, r0
 8002fb4:	3348      	adds	r3, #72	; 0x48
 8002fb6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d113      	bne.n	8002fe6 <HAL_PCD_IRQHandler+0x31c>
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3350      	adds	r3, #80	; 0x50
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d108      	bne.n	8002fe6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6818      	ldr	r0, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	f003 fca7 	bl	8006934 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f006 fcd2 	bl	8009996 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003008:	461a      	mov	r2, r3
 800300a:	2308      	movs	r3, #8
 800300c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003024:	461a      	mov	r2, r3
 8003026:	2310      	movs	r3, #16
 8003028:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003040:	461a      	mov	r2, r3
 8003042:	2340      	movs	r3, #64	; 0x40
 8003044:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d008      	beq.n	8003062 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800305c:	461a      	mov	r2, r3
 800305e:	2302      	movs	r3, #2
 8003060:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800306c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fc48 	bl	8003904 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	3301      	adds	r3, #1
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	2b00      	cmp	r3, #0
 8003084:	f47f af49 	bne.w	8002f1a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f003 fb8c 	bl	80067aa <USB_ReadInterrupts>
 8003092:	4603      	mov	r3, r0
 8003094:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003098:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800309c:	d122      	bne.n	80030e4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d108      	bne.n	80030ce <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030c4:	2100      	movs	r1, #0
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fe54 	bl	8003d74 <HAL_PCDEx_LPM_Callback>
 80030cc:	e002      	b.n	80030d4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f006 fcd8 	bl	8009a84 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695a      	ldr	r2, [r3, #20]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80030e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f003 fb5e 	bl	80067aa <USB_ReadInterrupts>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030f8:	d112      	bne.n	8003120 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b01      	cmp	r3, #1
 8003108:	d102      	bne.n	8003110 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f006 fc94 	bl	8009a38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800311e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f003 fb40 	bl	80067aa <USB_ReadInterrupts>
 800312a:	4603      	mov	r3, r0
 800312c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003134:	f040 80c7 	bne.w	80032c6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	69fa      	ldr	r2, [r7, #28]
 8003142:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2110      	movs	r1, #16
 8003152:	4618      	mov	r0, r3
 8003154:	f002 fc20 	bl	8005998 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003158:	2300      	movs	r3, #0
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800315c:	e056      	b.n	800320c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316a:	461a      	mov	r2, r3
 800316c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003170:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003182:	0151      	lsls	r1, r2, #5
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	440a      	add	r2, r1
 8003188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800318c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003190:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031a2:	0151      	lsls	r1, r2, #5
 80031a4:	69fa      	ldr	r2, [r7, #28]
 80031a6:	440a      	add	r2, r1
 80031a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80031b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80031b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031be:	461a      	mov	r2, r3
 80031c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031c4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031d6:	0151      	lsls	r1, r2, #5
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	440a      	add	r2, r1
 80031dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80031e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80031e4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031f6:	0151      	lsls	r1, r2, #5
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	440a      	add	r2, r1
 80031fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003200:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003204:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003208:	3301      	adds	r3, #1
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003212:	429a      	cmp	r2, r3
 8003214:	d3a3      	bcc.n	800315e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003224:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003228:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003238:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003242:	f043 030b 	orr.w	r3, r3, #11
 8003246:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003258:	f043 030b 	orr.w	r3, r3, #11
 800325c:	6453      	str	r3, [r2, #68]	; 0x44
 800325e:	e015      	b.n	800328c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800326e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003272:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003276:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003286:	f043 030b 	orr.w	r3, r3, #11
 800328a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800329a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800329e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80032b0:	461a      	mov	r2, r3
 80032b2:	f003 fb3f 	bl	8006934 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80032c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f003 fa6d 	bl	80067aa <USB_ReadInterrupts>
 80032d0:	4603      	mov	r3, r0
 80032d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032da:	d124      	bne.n	8003326 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f003 fb03 	bl	80068ec <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f002 fbb5 	bl	8005a5a <USB_GetDevSpeed>
 80032f0:	4603      	mov	r3, r0
 80032f2:	461a      	mov	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681c      	ldr	r4, [r3, #0]
 80032fc:	f001 f974 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8003300:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003306:	b2db      	uxtb	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	4620      	mov	r0, r4
 800330c:	f002 f8f2 	bl	80054f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f006 fb68 	bl	80099e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003324:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f003 fa3d 	bl	80067aa <USB_ReadInterrupts>
 8003330:	4603      	mov	r3, r0
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b08      	cmp	r3, #8
 8003338:	d10a      	bne.n	8003350 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f006 fb45 	bl	80099ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f002 0208 	and.w	r2, r2, #8
 800334e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f003 fa28 	bl	80067aa <USB_ReadInterrupts>
 800335a:	4603      	mov	r3, r0
 800335c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003360:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003364:	d10f      	bne.n	8003386 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	b2db      	uxtb	r3, r3
 800336e:	4619      	mov	r1, r3
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f006 fba7 	bl	8009ac4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695a      	ldr	r2, [r3, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003384:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f003 fa0d 	bl	80067aa <USB_ReadInterrupts>
 8003390:	4603      	mov	r3, r0
 8003392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003396:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800339a:	d10f      	bne.n	80033bc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800339c:	2300      	movs	r3, #0
 800339e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	4619      	mov	r1, r3
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f006 fb7a 	bl	8009aa0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f003 f9f2 	bl	80067aa <USB_ReadInterrupts>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d0:	d10a      	bne.n	80033e8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f006 fb88 	bl	8009ae8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f003 f9dc 	bl	80067aa <USB_ReadInterrupts>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d115      	bne.n	8003428 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f006 fb78 	bl	8009b04 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	e000      	b.n	8003428 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003426:	bf00      	nop
    }
  }
}
 8003428:	3734      	adds	r7, #52	; 0x34
 800342a:	46bd      	mov	sp, r7
 800342c:	bd90      	pop	{r4, r7, pc}

0800342e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_PCD_SetAddress+0x1a>
 8003444:	2302      	movs	r3, #2
 8003446:	e013      	b.n	8003470 <HAL_PCD_SetAddress+0x42>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f003 f94c 	bl	80066fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	4608      	mov	r0, r1
 8003482:	4611      	mov	r1, r2
 8003484:	461a      	mov	r2, r3
 8003486:	4603      	mov	r3, r0
 8003488:	70fb      	strb	r3, [r7, #3]
 800348a:	460b      	mov	r3, r1
 800348c:	803b      	strh	r3, [r7, #0]
 800348e:	4613      	mov	r3, r2
 8003490:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800349a:	2b00      	cmp	r3, #0
 800349c:	da0f      	bge.n	80034be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 020f 	and.w	r2, r3, #15
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	3338      	adds	r3, #56	; 0x38
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	705a      	strb	r2, [r3, #1]
 80034bc:	e00f      	b.n	80034de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	f003 020f 	and.w	r2, r3, #15
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034ea:	883a      	ldrh	r2, [r7, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	78ba      	ldrb	r2, [r7, #2]
 80034f4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	785b      	ldrb	r3, [r3, #1]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d004      	beq.n	8003508 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003508:	78bb      	ldrb	r3, [r7, #2]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d102      	bne.n	8003514 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_PCD_EP_Open+0xaa>
 800351e:	2302      	movs	r3, #2
 8003520:	e00e      	b.n	8003540 <HAL_PCD_EP_Open+0xc8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68f9      	ldr	r1, [r7, #12]
 8003530:	4618      	mov	r0, r3
 8003532:	f002 fab7 	bl	8005aa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800353e:	7afb      	ldrb	r3, [r7, #11]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003558:	2b00      	cmp	r3, #0
 800355a:	da0f      	bge.n	800357c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	f003 020f 	and.w	r2, r3, #15
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	3338      	adds	r3, #56	; 0x38
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4413      	add	r3, r2
 8003570:	3304      	adds	r3, #4
 8003572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	705a      	strb	r2, [r3, #1]
 800357a:	e00f      	b.n	800359c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	f003 020f 	and.w	r2, r3, #15
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	1a9b      	subs	r3, r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4413      	add	r3, r2
 8003592:	3304      	adds	r3, #4
 8003594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_PCD_EP_Close+0x6e>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e00e      	b.n	80035d4 <HAL_PCD_EP_Close+0x8c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68f9      	ldr	r1, [r7, #12]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 faf5 	bl	8005bb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	460b      	mov	r3, r1
 80035ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	f003 020f 	and.w	r2, r3, #15
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4413      	add	r3, r2
 8003602:	3304      	adds	r3, #4
 8003604:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2200      	movs	r2, #0
 8003616:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2200      	movs	r2, #0
 800361c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800361e:	7afb      	ldrb	r3, [r7, #11]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	b2da      	uxtb	r2, r3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d102      	bne.n	8003638 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003638:	7afb      	ldrb	r3, [r7, #11]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	6979      	ldr	r1, [r7, #20]
 8003650:	f002 fdd0 	bl	80061f4 <USB_EP0StartXfer>
 8003654:	e008      	b.n	8003668 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	6979      	ldr	r1, [r7, #20]
 8003664:	f002 fb82 	bl	8005d6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	460b      	mov	r3, r1
 800367c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	f003 020f 	and.w	r2, r3, #15
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003694:	681b      	ldr	r3, [r3, #0]
}
 8003696:	4618      	mov	r0, r3
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	60f8      	str	r0, [r7, #12]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
 80036ae:	460b      	mov	r3, r1
 80036b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036b2:	7afb      	ldrb	r3, [r7, #11]
 80036b4:	f003 020f 	and.w	r2, r3, #15
 80036b8:	4613      	mov	r3, r2
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	3338      	adds	r3, #56	; 0x38
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4413      	add	r3, r2
 80036c6:	3304      	adds	r3, #4
 80036c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2200      	movs	r2, #0
 80036da:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2201      	movs	r2, #1
 80036e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036e2:	7afb      	ldrb	r3, [r7, #11]
 80036e4:	f003 030f 	and.w	r3, r3, #15
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d102      	bne.n	80036fc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036fc:	7afb      	ldrb	r3, [r7, #11]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	6979      	ldr	r1, [r7, #20]
 8003714:	f002 fd6e 	bl	80061f4 <USB_EP0StartXfer>
 8003718:	e008      	b.n	800372c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	6979      	ldr	r1, [r7, #20]
 8003728:	f002 fb20 	bl	8005d6c <USB_EPStartXfer>
  }

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
 800373e:	460b      	mov	r3, r1
 8003740:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	f003 020f 	and.w	r2, r3, #15
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	429a      	cmp	r2, r3
 800374e:	d901      	bls.n	8003754 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e050      	b.n	80037f6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003754:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003758:	2b00      	cmp	r3, #0
 800375a:	da0f      	bge.n	800377c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	f003 020f 	and.w	r2, r3, #15
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	3338      	adds	r3, #56	; 0x38
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	4413      	add	r3, r2
 8003770:	3304      	adds	r3, #4
 8003772:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2201      	movs	r2, #1
 8003778:	705a      	strb	r2, [r3, #1]
 800377a:	e00d      	b.n	8003798 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	3304      	adds	r3, #4
 8003790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2201      	movs	r2, #1
 800379c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_PCD_EP_SetStall+0x82>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e01e      	b.n	80037f6 <HAL_PCD_EP_SetStall+0xc0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68f9      	ldr	r1, [r7, #12]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 fec5 	bl	8006556 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	b2d9      	uxtb	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80037e6:	461a      	mov	r2, r3
 80037e8:	f003 f8a4 	bl	8006934 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	429a      	cmp	r2, r3
 8003816:	d901      	bls.n	800381c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e042      	b.n	80038a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800381c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003820:	2b00      	cmp	r3, #0
 8003822:	da0f      	bge.n	8003844 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003824:	78fb      	ldrb	r3, [r7, #3]
 8003826:	f003 020f 	and.w	r2, r3, #15
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	3338      	adds	r3, #56	; 0x38
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4413      	add	r3, r2
 8003838:	3304      	adds	r3, #4
 800383a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	705a      	strb	r2, [r3, #1]
 8003842:	e00f      	b.n	8003864 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	f003 020f 	and.w	r2, r3, #15
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	4413      	add	r3, r2
 800385a:	3304      	adds	r3, #4
 800385c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_PCD_EP_ClrStall+0x86>
 8003880:	2302      	movs	r3, #2
 8003882:	e00e      	b.n	80038a2 <HAL_PCD_EP_ClrStall+0xa4>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68f9      	ldr	r1, [r7, #12]
 8003892:	4618      	mov	r0, r3
 8003894:	f002 fecd 	bl	8006632 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_PCD_EP_Flush+0x1a>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e01b      	b.n	80038fc <HAL_PCD_EP_Flush+0x52>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 80038cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	da09      	bge.n	80038e8 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	4619      	mov	r1, r3
 80038e0:	4610      	mov	r0, r2
 80038e2:	f002 f859 	bl	8005998 <USB_FlushTxFifo>
 80038e6:	e004      	b.n	80038f2 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f002 f879 	bl	80059e4 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	; 0x28
 8003908:	af02      	add	r7, sp, #8
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	3338      	adds	r3, #56	; 0x38
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	4413      	add	r3, r2
 8003928:	3304      	adds	r3, #4
 800392a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	699a      	ldr	r2, [r3, #24]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	429a      	cmp	r2, r3
 8003936:	d901      	bls.n	800393c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e06c      	b.n	8003a16 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	695a      	ldr	r2, [r3, #20]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	429a      	cmp	r2, r3
 8003950:	d902      	bls.n	8003958 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	3303      	adds	r3, #3
 800395c:	089b      	lsrs	r3, r3, #2
 800395e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003960:	e02b      	b.n	80039ba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	429a      	cmp	r2, r3
 8003976:	d902      	bls.n	800397e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	3303      	adds	r3, #3
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	68d9      	ldr	r1, [r3, #12]
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003996:	b2db      	uxtb	r3, r3
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	4603      	mov	r3, r0
 800399c:	6978      	ldr	r0, [r7, #20]
 800399e:	f002 fd7c 	bl	800649a <USB_WritePacket>

    ep->xfer_buff  += len;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	441a      	add	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	699a      	ldr	r2, [r3, #24]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	441a      	add	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d809      	bhi.n	80039e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	699a      	ldr	r2, [r3, #24]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039d8:	429a      	cmp	r2, r3
 80039da:	d203      	bcs.n	80039e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1be      	bne.n	8003962 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	695a      	ldr	r2, [r3, #20]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d811      	bhi.n	8003a14 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	2201      	movs	r2, #1
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	43db      	mvns	r3, r3
 8003a0a:	6939      	ldr	r1, [r7, #16]
 8003a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a10:	4013      	ands	r3, r2
 8003a12:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3720      	adds	r7, #32
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	333c      	adds	r3, #60	; 0x3c
 8003a38:	3304      	adds	r3, #4
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	f040 80a0 	bne.w	8003b98 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d015      	beq.n	8003a8e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4a72      	ldr	r2, [pc, #456]	; (8003c30 <PCD_EP_OutXfrComplete_int+0x210>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	f240 80dd 	bls.w	8003c26 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80d7 	beq.w	8003c26 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a84:	461a      	mov	r2, r3
 8003a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a8a:	6093      	str	r3, [r2, #8]
 8003a8c:	e0cb      	b.n	8003c26 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d009      	beq.n	8003aac <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	2320      	movs	r3, #32
 8003aa8:	6093      	str	r3, [r2, #8]
 8003aaa:	e0bc      	b.n	8003c26 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f040 80b7 	bne.w	8003c26 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4a5d      	ldr	r2, [pc, #372]	; (8003c30 <PCD_EP_OutXfrComplete_int+0x210>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d90f      	bls.n	8003ae0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00a      	beq.n	8003ae0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003adc:	6093      	str	r3, [r2, #8]
 8003ade:	e0a2      	b.n	8003c26 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003af2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	0159      	lsls	r1, r3, #5
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	440b      	add	r3, r1
 8003afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003b06:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4403      	add	r3, r0
 8003b16:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003b1a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b2e:	6819      	ldr	r1, [r3, #0]
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4403      	add	r3, r0
 8003b3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4419      	add	r1, r3
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4403      	add	r3, r0
 8003b54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003b58:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d114      	bne.n	8003b8a <PCD_EP_OutXfrComplete_int+0x16a>
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d108      	bne.n	8003b8a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b82:	461a      	mov	r2, r3
 8003b84:	2101      	movs	r1, #1
 8003b86:	f002 fed5 	bl	8006934 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f005 fee5 	bl	8009960 <HAL_PCD_DataOutStageCallback>
 8003b96:	e046      	b.n	8003c26 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	4a26      	ldr	r2, [pc, #152]	; (8003c34 <PCD_EP_OutXfrComplete_int+0x214>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d124      	bne.n	8003bea <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00a      	beq.n	8003bc0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bbc:	6093      	str	r3, [r2, #8]
 8003bbe:	e032      	b.n	8003c26 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d008      	beq.n	8003bdc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	2320      	movs	r3, #32
 8003bda:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	4619      	mov	r1, r3
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f005 febc 	bl	8009960 <HAL_PCD_DataOutStageCallback>
 8003be8:	e01d      	b.n	8003c26 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d114      	bne.n	8003c1a <PCD_EP_OutXfrComplete_int+0x1fa>
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d108      	bne.n	8003c1a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c12:	461a      	mov	r2, r3
 8003c14:	2100      	movs	r1, #0
 8003c16:	f002 fe8d 	bl	8006934 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	4619      	mov	r1, r3
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f005 fe9d 	bl	8009960 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3718      	adds	r7, #24
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	4f54300a 	.word	0x4f54300a
 8003c34:	4f54310a 	.word	0x4f54310a

08003c38 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	333c      	adds	r3, #60	; 0x3c
 8003c50:	3304      	adds	r3, #4
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4a15      	ldr	r2, [pc, #84]	; (8003cc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d90e      	bls.n	8003c8c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d009      	beq.n	8003c8c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c84:	461a      	mov	r2, r3
 8003c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c8a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f005 fe55 	bl	800993c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d90c      	bls.n	8003cb4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d108      	bne.n	8003cb4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6818      	ldr	r0, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cac:	461a      	mov	r2, r3
 8003cae:	2101      	movs	r1, #1
 8003cb0:	f002 fe40 	bl	8006934 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	4f54300a 	.word	0x4f54300a

08003cc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	460b      	mov	r3, r1
 8003cce:	70fb      	strb	r3, [r7, #3]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d107      	bne.n	8003cf2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ce2:	883b      	ldrh	r3, [r7, #0]
 8003ce4:	0419      	lsls	r1, r3, #16
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	430a      	orrs	r2, r1
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28
 8003cf0:	e028      	b.n	8003d44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf8:	0c1b      	lsrs	r3, r3, #16
 8003cfa:	68ba      	ldr	r2, [r7, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	73fb      	strb	r3, [r7, #15]
 8003d04:	e00d      	b.n	8003d22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
 8003d0c:	3340      	adds	r3, #64	; 0x40
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	0c1b      	lsrs	r3, r3, #16
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	4413      	add	r3, r2
 8003d1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003d1c:	7bfb      	ldrb	r3, [r7, #15]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	73fb      	strb	r3, [r7, #15]
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d3ec      	bcc.n	8003d06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d2c:	883b      	ldrh	r3, [r7, #0]
 8003d2e:	0418      	lsls	r0, r3, #16
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6819      	ldr	r1, [r3, #0]
 8003d34:	78fb      	ldrb	r3, [r7, #3]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	4302      	orrs	r2, r0
 8003d3c:	3340      	adds	r3, #64	; 0x40
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	887a      	ldrh	r2, [r7, #2]
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e25b      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d075      	beq.n	8003e96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003daa:	4ba3      	ldr	r3, [pc, #652]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d00c      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db6:	4ba0      	ldr	r3, [pc, #640]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d112      	bne.n	8003de8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc2:	4b9d      	ldr	r3, [pc, #628]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dce:	d10b      	bne.n	8003de8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd0:	4b99      	ldr	r3, [pc, #612]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d05b      	beq.n	8003e94 <HAL_RCC_OscConfig+0x108>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d157      	bne.n	8003e94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e236      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df0:	d106      	bne.n	8003e00 <HAL_RCC_OscConfig+0x74>
 8003df2:	4b91      	ldr	r3, [pc, #580]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a90      	ldr	r2, [pc, #576]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dfc:	6013      	str	r3, [r2, #0]
 8003dfe:	e01d      	b.n	8003e3c <HAL_RCC_OscConfig+0xb0>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e08:	d10c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x98>
 8003e0a:	4b8b      	ldr	r3, [pc, #556]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a8a      	ldr	r2, [pc, #552]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	4b88      	ldr	r3, [pc, #544]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a87      	ldr	r2, [pc, #540]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	e00b      	b.n	8003e3c <HAL_RCC_OscConfig+0xb0>
 8003e24:	4b84      	ldr	r3, [pc, #528]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a83      	ldr	r2, [pc, #524]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	4b81      	ldr	r3, [pc, #516]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a80      	ldr	r2, [pc, #512]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003e36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d013      	beq.n	8003e6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e44:	f7fd fc5c 	bl	8001700 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7fd fc58 	bl	8001700 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e1fb      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	4b76      	ldr	r3, [pc, #472]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0xc0>
 8003e6a:	e014      	b.n	8003e96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7fd fc48 	bl	8001700 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e74:	f7fd fc44 	bl	8001700 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	; 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e1e7      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e86:	4b6c      	ldr	r3, [pc, #432]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0xe8>
 8003e92:	e000      	b.n	8003e96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d063      	beq.n	8003f6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ea2:	4b65      	ldr	r3, [pc, #404]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00b      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eae:	4b62      	ldr	r3, [pc, #392]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d11c      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eba:	4b5f      	ldr	r3, [pc, #380]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d116      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec6:	4b5c      	ldr	r3, [pc, #368]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_RCC_OscConfig+0x152>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d001      	beq.n	8003ede <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e1bb      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ede:	4b56      	ldr	r3, [pc, #344]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4952      	ldr	r1, [pc, #328]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ef2:	e03a      	b.n	8003f6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d020      	beq.n	8003f3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003efc:	4b4f      	ldr	r3, [pc, #316]	; (800403c <HAL_RCC_OscConfig+0x2b0>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f02:	f7fd fbfd 	bl	8001700 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f0a:	f7fd fbf9 	bl	8001700 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e19c      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1c:	4b46      	ldr	r3, [pc, #280]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f0      	beq.n	8003f0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f28:	4b43      	ldr	r3, [pc, #268]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4940      	ldr	r1, [pc, #256]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	600b      	str	r3, [r1, #0]
 8003f3c:	e015      	b.n	8003f6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3e:	4b3f      	ldr	r3, [pc, #252]	; (800403c <HAL_RCC_OscConfig+0x2b0>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fd fbdc 	bl	8001700 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f4c:	f7fd fbd8 	bl	8001700 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e17b      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5e:	4b36      	ldr	r3, [pc, #216]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d030      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d016      	beq.n	8003fac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f7e:	4b30      	ldr	r3, [pc, #192]	; (8004040 <HAL_RCC_OscConfig+0x2b4>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f84:	f7fd fbbc 	bl	8001700 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f8c:	f7fd fbb8 	bl	8001700 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e15b      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9e:	4b26      	ldr	r3, [pc, #152]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0f0      	beq.n	8003f8c <HAL_RCC_OscConfig+0x200>
 8003faa:	e015      	b.n	8003fd8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fac:	4b24      	ldr	r3, [pc, #144]	; (8004040 <HAL_RCC_OscConfig+0x2b4>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fb2:	f7fd fba5 	bl	8001700 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fba:	f7fd fba1 	bl	8001700 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e144      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1f0      	bne.n	8003fba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80a0 	beq.w	8004126 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10f      	bne.n	8004016 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffe:	4a0e      	ldr	r2, [pc, #56]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8004000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004004:	6413      	str	r3, [r2, #64]	; 0x40
 8004006:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <HAL_RCC_OscConfig+0x2ac>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004012:	2301      	movs	r3, #1
 8004014:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004016:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <HAL_RCC_OscConfig+0x2b8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401e:	2b00      	cmp	r3, #0
 8004020:	d121      	bne.n	8004066 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004022:	4b08      	ldr	r3, [pc, #32]	; (8004044 <HAL_RCC_OscConfig+0x2b8>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a07      	ldr	r2, [pc, #28]	; (8004044 <HAL_RCC_OscConfig+0x2b8>)
 8004028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800402c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800402e:	f7fd fb67 	bl	8001700 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004034:	e011      	b.n	800405a <HAL_RCC_OscConfig+0x2ce>
 8004036:	bf00      	nop
 8004038:	40023800 	.word	0x40023800
 800403c:	42470000 	.word	0x42470000
 8004040:	42470e80 	.word	0x42470e80
 8004044:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004048:	f7fd fb5a 	bl	8001700 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e0fd      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800405a:	4b81      	ldr	r3, [pc, #516]	; (8004260 <HAL_RCC_OscConfig+0x4d4>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d106      	bne.n	800407c <HAL_RCC_OscConfig+0x2f0>
 800406e:	4b7d      	ldr	r3, [pc, #500]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	4a7c      	ldr	r2, [pc, #496]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6713      	str	r3, [r2, #112]	; 0x70
 800407a:	e01c      	b.n	80040b6 <HAL_RCC_OscConfig+0x32a>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	2b05      	cmp	r3, #5
 8004082:	d10c      	bne.n	800409e <HAL_RCC_OscConfig+0x312>
 8004084:	4b77      	ldr	r3, [pc, #476]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004088:	4a76      	ldr	r2, [pc, #472]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 800408a:	f043 0304 	orr.w	r3, r3, #4
 800408e:	6713      	str	r3, [r2, #112]	; 0x70
 8004090:	4b74      	ldr	r3, [pc, #464]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	4a73      	ldr	r2, [pc, #460]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6713      	str	r3, [r2, #112]	; 0x70
 800409c:	e00b      	b.n	80040b6 <HAL_RCC_OscConfig+0x32a>
 800409e:	4b71      	ldr	r3, [pc, #452]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	4a70      	ldr	r2, [pc, #448]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	6713      	str	r3, [r2, #112]	; 0x70
 80040aa:	4b6e      	ldr	r3, [pc, #440]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 80040ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ae:	4a6d      	ldr	r2, [pc, #436]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 80040b0:	f023 0304 	bic.w	r3, r3, #4
 80040b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d015      	beq.n	80040ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040be:	f7fd fb1f 	bl	8001700 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fd fb1b 	bl	8001700 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e0bc      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040dc:	4b61      	ldr	r3, [pc, #388]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0ee      	beq.n	80040c6 <HAL_RCC_OscConfig+0x33a>
 80040e8:	e014      	b.n	8004114 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ea:	f7fd fb09 	bl	8001700 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f0:	e00a      	b.n	8004108 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f2:	f7fd fb05 	bl	8001700 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004100:	4293      	cmp	r3, r2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e0a6      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004108:	4b56      	ldr	r3, [pc, #344]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1ee      	bne.n	80040f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d105      	bne.n	8004126 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800411a:	4b52      	ldr	r3, [pc, #328]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	4a51      	ldr	r2, [pc, #324]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 8004120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004124:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	2b00      	cmp	r3, #0
 800412c:	f000 8092 	beq.w	8004254 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004130:	4b4c      	ldr	r3, [pc, #304]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 030c 	and.w	r3, r3, #12
 8004138:	2b08      	cmp	r3, #8
 800413a:	d05c      	beq.n	80041f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d141      	bne.n	80041c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004144:	4b48      	ldr	r3, [pc, #288]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 8004146:	2200      	movs	r2, #0
 8004148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414a:	f7fd fad9 	bl	8001700 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004152:	f7fd fad5 	bl	8001700 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e078      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004164:	4b3f      	ldr	r3, [pc, #252]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f0      	bne.n	8004152 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	431a      	orrs	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417e:	019b      	lsls	r3, r3, #6
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	3b01      	subs	r3, #1
 800418a:	041b      	lsls	r3, r3, #16
 800418c:	431a      	orrs	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004192:	061b      	lsls	r3, r3, #24
 8004194:	4933      	ldr	r1, [pc, #204]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 8004196:	4313      	orrs	r3, r2
 8004198:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800419a:	4b33      	ldr	r3, [pc, #204]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 800419c:	2201      	movs	r2, #1
 800419e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7fd faae 	bl	8001700 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041a8:	f7fd faaa 	bl	8001700 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e04d      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041ba:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0x41c>
 80041c6:	e045      	b.n	8004254 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c8:	4b27      	ldr	r3, [pc, #156]	; (8004268 <HAL_RCC_OscConfig+0x4dc>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ce:	f7fd fa97 	bl	8001700 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d6:	f7fd fa93 	bl	8001700 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e036      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e8:	4b1e      	ldr	r3, [pc, #120]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f0      	bne.n	80041d6 <HAL_RCC_OscConfig+0x44a>
 80041f4:	e02e      	b.n	8004254 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d101      	bne.n	8004202 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e029      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004202:	4b18      	ldr	r3, [pc, #96]	; (8004264 <HAL_RCC_OscConfig+0x4d8>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	429a      	cmp	r2, r3
 8004214:	d11c      	bne.n	8004250 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d115      	bne.n	8004250 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800422a:	4013      	ands	r3, r2
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004230:	4293      	cmp	r3, r2
 8004232:	d10d      	bne.n	8004250 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800423e:	429a      	cmp	r2, r3
 8004240:	d106      	bne.n	8004250 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e000      	b.n	8004256 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	40007000 	.word	0x40007000
 8004264:	40023800 	.word	0x40023800
 8004268:	42470060 	.word	0x42470060

0800426c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0cc      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004280:	4b68      	ldr	r3, [pc, #416]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	429a      	cmp	r2, r3
 800428c:	d90c      	bls.n	80042a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800428e:	4b65      	ldr	r3, [pc, #404]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004296:	4b63      	ldr	r3, [pc, #396]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d001      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0b8      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d020      	beq.n	80042f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d005      	beq.n	80042cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042c0:	4b59      	ldr	r3, [pc, #356]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4a58      	ldr	r2, [pc, #352]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042d8:	4b53      	ldr	r3, [pc, #332]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4a52      	ldr	r2, [pc, #328]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e4:	4b50      	ldr	r3, [pc, #320]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	494d      	ldr	r1, [pc, #308]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d044      	beq.n	800438c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d107      	bne.n	800431a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d119      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e07f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d003      	beq.n	800432a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004326:	2b03      	cmp	r3, #3
 8004328:	d107      	bne.n	800433a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432a:	4b3f      	ldr	r3, [pc, #252]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e06f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433a:	4b3b      	ldr	r3, [pc, #236]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e067      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800434a:	4b37      	ldr	r3, [pc, #220]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f023 0203 	bic.w	r2, r3, #3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	4934      	ldr	r1, [pc, #208]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 8004358:	4313      	orrs	r3, r2
 800435a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800435c:	f7fd f9d0 	bl	8001700 <HAL_GetTick>
 8004360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004362:	e00a      	b.n	800437a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004364:	f7fd f9cc 	bl	8001700 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e04f      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	4b2b      	ldr	r3, [pc, #172]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 020c 	and.w	r2, r3, #12
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	429a      	cmp	r2, r3
 800438a:	d1eb      	bne.n	8004364 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800438c:	4b25      	ldr	r3, [pc, #148]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d20c      	bcs.n	80043b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b22      	ldr	r3, [pc, #136]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b20      	ldr	r3, [pc, #128]	; (8004424 <HAL_RCC_ClockConfig+0x1b8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e032      	b.n	800441a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4916      	ldr	r1, [pc, #88]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0308 	and.w	r3, r3, #8
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043de:	4b12      	ldr	r3, [pc, #72]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	490e      	ldr	r1, [pc, #56]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043f2:	f000 f821 	bl	8004438 <HAL_RCC_GetSysClockFreq>
 80043f6:	4601      	mov	r1, r0
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_RCC_ClockConfig+0x1bc>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	091b      	lsrs	r3, r3, #4
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	4a0a      	ldr	r2, [pc, #40]	; (800442c <HAL_RCC_ClockConfig+0x1c0>)
 8004404:	5cd3      	ldrb	r3, [r2, r3]
 8004406:	fa21 f303 	lsr.w	r3, r1, r3
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <HAL_RCC_ClockConfig+0x1c4>)
 800440c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800440e:	4b09      	ldr	r3, [pc, #36]	; (8004434 <HAL_RCC_ClockConfig+0x1c8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fd f930 	bl	8001678 <HAL_InitTick>

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40023c00 	.word	0x40023c00
 8004428:	40023800 	.word	0x40023800
 800442c:	0800a17c 	.word	0x0800a17c
 8004430:	20000000 	.word	0x20000000
 8004434:	20000004 	.word	0x20000004

08004438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800443e:	2300      	movs	r3, #0
 8004440:	607b      	str	r3, [r7, #4]
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	2300      	movs	r3, #0
 8004448:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800444e:	4b63      	ldr	r3, [pc, #396]	; (80045dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b04      	cmp	r3, #4
 8004458:	d007      	beq.n	800446a <HAL_RCC_GetSysClockFreq+0x32>
 800445a:	2b08      	cmp	r3, #8
 800445c:	d008      	beq.n	8004470 <HAL_RCC_GetSysClockFreq+0x38>
 800445e:	2b00      	cmp	r3, #0
 8004460:	f040 80b4 	bne.w	80045cc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004464:	4b5e      	ldr	r3, [pc, #376]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004466:	60bb      	str	r3, [r7, #8]
       break;
 8004468:	e0b3      	b.n	80045d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800446a:	4b5e      	ldr	r3, [pc, #376]	; (80045e4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800446c:	60bb      	str	r3, [r7, #8]
      break;
 800446e:	e0b0      	b.n	80045d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004470:	4b5a      	ldr	r3, [pc, #360]	; (80045dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004478:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800447a:	4b58      	ldr	r3, [pc, #352]	; (80045dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004482:	2b00      	cmp	r3, #0
 8004484:	d04a      	beq.n	800451c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004486:	4b55      	ldr	r3, [pc, #340]	; (80045dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	099b      	lsrs	r3, r3, #6
 800448c:	f04f 0400 	mov.w	r4, #0
 8004490:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	ea03 0501 	and.w	r5, r3, r1
 800449c:	ea04 0602 	and.w	r6, r4, r2
 80044a0:	4629      	mov	r1, r5
 80044a2:	4632      	mov	r2, r6
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	f04f 0400 	mov.w	r4, #0
 80044ac:	0154      	lsls	r4, r2, #5
 80044ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044b2:	014b      	lsls	r3, r1, #5
 80044b4:	4619      	mov	r1, r3
 80044b6:	4622      	mov	r2, r4
 80044b8:	1b49      	subs	r1, r1, r5
 80044ba:	eb62 0206 	sbc.w	r2, r2, r6
 80044be:	f04f 0300 	mov.w	r3, #0
 80044c2:	f04f 0400 	mov.w	r4, #0
 80044c6:	0194      	lsls	r4, r2, #6
 80044c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044cc:	018b      	lsls	r3, r1, #6
 80044ce:	1a5b      	subs	r3, r3, r1
 80044d0:	eb64 0402 	sbc.w	r4, r4, r2
 80044d4:	f04f 0100 	mov.w	r1, #0
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	00e2      	lsls	r2, r4, #3
 80044de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80044e2:	00d9      	lsls	r1, r3, #3
 80044e4:	460b      	mov	r3, r1
 80044e6:	4614      	mov	r4, r2
 80044e8:	195b      	adds	r3, r3, r5
 80044ea:	eb44 0406 	adc.w	r4, r4, r6
 80044ee:	f04f 0100 	mov.w	r1, #0
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	0262      	lsls	r2, r4, #9
 80044f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80044fc:	0259      	lsls	r1, r3, #9
 80044fe:	460b      	mov	r3, r1
 8004500:	4614      	mov	r4, r2
 8004502:	4618      	mov	r0, r3
 8004504:	4621      	mov	r1, r4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f04f 0400 	mov.w	r4, #0
 800450c:	461a      	mov	r2, r3
 800450e:	4623      	mov	r3, r4
 8004510:	f7fb fe5a 	bl	80001c8 <__aeabi_uldivmod>
 8004514:	4603      	mov	r3, r0
 8004516:	460c      	mov	r4, r1
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	e049      	b.n	80045b0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800451c:	4b2f      	ldr	r3, [pc, #188]	; (80045dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	099b      	lsrs	r3, r3, #6
 8004522:	f04f 0400 	mov.w	r4, #0
 8004526:	f240 11ff 	movw	r1, #511	; 0x1ff
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	ea03 0501 	and.w	r5, r3, r1
 8004532:	ea04 0602 	and.w	r6, r4, r2
 8004536:	4629      	mov	r1, r5
 8004538:	4632      	mov	r2, r6
 800453a:	f04f 0300 	mov.w	r3, #0
 800453e:	f04f 0400 	mov.w	r4, #0
 8004542:	0154      	lsls	r4, r2, #5
 8004544:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004548:	014b      	lsls	r3, r1, #5
 800454a:	4619      	mov	r1, r3
 800454c:	4622      	mov	r2, r4
 800454e:	1b49      	subs	r1, r1, r5
 8004550:	eb62 0206 	sbc.w	r2, r2, r6
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	f04f 0400 	mov.w	r4, #0
 800455c:	0194      	lsls	r4, r2, #6
 800455e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004562:	018b      	lsls	r3, r1, #6
 8004564:	1a5b      	subs	r3, r3, r1
 8004566:	eb64 0402 	sbc.w	r4, r4, r2
 800456a:	f04f 0100 	mov.w	r1, #0
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	00e2      	lsls	r2, r4, #3
 8004574:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004578:	00d9      	lsls	r1, r3, #3
 800457a:	460b      	mov	r3, r1
 800457c:	4614      	mov	r4, r2
 800457e:	195b      	adds	r3, r3, r5
 8004580:	eb44 0406 	adc.w	r4, r4, r6
 8004584:	f04f 0100 	mov.w	r1, #0
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	02a2      	lsls	r2, r4, #10
 800458e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004592:	0299      	lsls	r1, r3, #10
 8004594:	460b      	mov	r3, r1
 8004596:	4614      	mov	r4, r2
 8004598:	4618      	mov	r0, r3
 800459a:	4621      	mov	r1, r4
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f04f 0400 	mov.w	r4, #0
 80045a2:	461a      	mov	r2, r3
 80045a4:	4623      	mov	r3, r4
 80045a6:	f7fb fe0f 	bl	80001c8 <__aeabi_uldivmod>
 80045aa:	4603      	mov	r3, r0
 80045ac:	460c      	mov	r4, r1
 80045ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	0c1b      	lsrs	r3, r3, #16
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	3301      	adds	r3, #1
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c8:	60bb      	str	r3, [r7, #8]
      break;
 80045ca:	e002      	b.n	80045d2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045cc:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80045ce:	60bb      	str	r3, [r7, #8]
      break;
 80045d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045d2:	68bb      	ldr	r3, [r7, #8]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045dc:	40023800 	.word	0x40023800
 80045e0:	00f42400 	.word	0x00f42400
 80045e4:	007a1200 	.word	0x007a1200

080045e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045ec:	4b03      	ldr	r3, [pc, #12]	; (80045fc <HAL_RCC_GetHCLKFreq+0x14>)
 80045ee:	681b      	ldr	r3, [r3, #0]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000000 	.word	0x20000000

08004600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004604:	f7ff fff0 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004608:	4601      	mov	r1, r0
 800460a:	4b05      	ldr	r3, [pc, #20]	; (8004620 <HAL_RCC_GetPCLK1Freq+0x20>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	0a9b      	lsrs	r3, r3, #10
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	4a03      	ldr	r2, [pc, #12]	; (8004624 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004616:	5cd3      	ldrb	r3, [r2, r3]
 8004618:	fa21 f303 	lsr.w	r3, r1, r3
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	40023800 	.word	0x40023800
 8004624:	0800a18c 	.word	0x0800a18c

08004628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800462c:	f7ff ffdc 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004630:	4601      	mov	r1, r0
 8004632:	4b05      	ldr	r3, [pc, #20]	; (8004648 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	0b5b      	lsrs	r3, r3, #13
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	4a03      	ldr	r2, [pc, #12]	; (800464c <HAL_RCC_GetPCLK2Freq+0x24>)
 800463e:	5cd3      	ldrb	r3, [r2, r3]
 8004640:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40023800 	.word	0x40023800
 800464c:	0800a18c 	.word	0x0800a18c

08004650 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e056      	b.n	8004710 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b00      	cmp	r3, #0
 8004672:	d106      	bne.n	8004682 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7fc fd8d 	bl	800119c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004698:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685a      	ldr	r2, [r3, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	431a      	orrs	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	ea42 0103 	orr.w	r1, r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	0c1b      	lsrs	r3, r3, #16
 80046e0:	f003 0104 	and.w	r1, r3, #4
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b088      	sub	sp, #32
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	4613      	mov	r3, r2
 8004726:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_SPI_Transmit+0x22>
 8004736:	2302      	movs	r3, #2
 8004738:	e11e      	b.n	8004978 <HAL_SPI_Transmit+0x260>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004742:	f7fc ffdd 	bl	8001700 <HAL_GetTick>
 8004746:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004748:	88fb      	ldrh	r3, [r7, #6]
 800474a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	d002      	beq.n	800475e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004758:	2302      	movs	r3, #2
 800475a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800475c:	e103      	b.n	8004966 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <HAL_SPI_Transmit+0x52>
 8004764:	88fb      	ldrh	r3, [r7, #6]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d102      	bne.n	8004770 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800476e:	e0fa      	b.n	8004966 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2203      	movs	r2, #3
 8004774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	88fa      	ldrh	r2, [r7, #6]
 8004788:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	88fa      	ldrh	r2, [r7, #6]
 800478e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b6:	d107      	bne.n	80047c8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b40      	cmp	r3, #64	; 0x40
 80047d4:	d007      	beq.n	80047e6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ee:	d14b      	bne.n	8004888 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_SPI_Transmit+0xe6>
 80047f8:	8afb      	ldrh	r3, [r7, #22]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d13e      	bne.n	800487c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004802:	881a      	ldrh	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	1c9a      	adds	r2, r3, #2
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004822:	e02b      	b.n	800487c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b02      	cmp	r3, #2
 8004830:	d112      	bne.n	8004858 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004836:	881a      	ldrh	r2, [r3, #0]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	1c9a      	adds	r2, r3, #2
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484c:	b29b      	uxth	r3, r3
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	86da      	strh	r2, [r3, #54]	; 0x36
 8004856:	e011      	b.n	800487c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004858:	f7fc ff52 	bl	8001700 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d803      	bhi.n	8004870 <HAL_SPI_Transmit+0x158>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800486e:	d102      	bne.n	8004876 <HAL_SPI_Transmit+0x15e>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d102      	bne.n	800487c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	77fb      	strb	r3, [r7, #31]
          goto error;
 800487a:	e074      	b.n	8004966 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1ce      	bne.n	8004824 <HAL_SPI_Transmit+0x10c>
 8004886:	e04c      	b.n	8004922 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <HAL_SPI_Transmit+0x17e>
 8004890:	8afb      	ldrh	r3, [r7, #22]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d140      	bne.n	8004918 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	330c      	adds	r3, #12
 80048a0:	7812      	ldrb	r2, [r2, #0]
 80048a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	1c5a      	adds	r2, r3, #1
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048bc:	e02c      	b.n	8004918 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d113      	bne.n	80048f4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	330c      	adds	r3, #12
 80048d6:	7812      	ldrb	r2, [r2, #0]
 80048d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	86da      	strh	r2, [r3, #54]	; 0x36
 80048f2:	e011      	b.n	8004918 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048f4:	f7fc ff04 	bl	8001700 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	429a      	cmp	r2, r3
 8004902:	d803      	bhi.n	800490c <HAL_SPI_Transmit+0x1f4>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800490a:	d102      	bne.n	8004912 <HAL_SPI_Transmit+0x1fa>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004916:	e026      	b.n	8004966 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1cd      	bne.n	80048be <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	6839      	ldr	r1, [r7, #0]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 f894 	bl	8004a54 <SPI_EndRxTxTransaction>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2220      	movs	r2, #32
 8004936:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004940:	2300      	movs	r3, #0
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	613b      	str	r3, [r7, #16]
 8004954:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	77fb      	strb	r3, [r7, #31]
 8004962:	e000      	b.n	8004966 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004964:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004976:	7ffb      	ldrb	r3, [r7, #31]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3720      	adds	r7, #32
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	60b9      	str	r1, [r7, #8]
 800498a:	603b      	str	r3, [r7, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004990:	e04c      	b.n	8004a2c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004998:	d048      	beq.n	8004a2c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800499a:	f7fc feb1 	bl	8001700 <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d902      	bls.n	80049b0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d13d      	bne.n	8004a2c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049c8:	d111      	bne.n	80049ee <SPI_WaitFlagStateUntilTimeout+0x6e>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d2:	d004      	beq.n	80049de <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049dc:	d107      	bne.n	80049ee <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f6:	d10f      	bne.n	8004a18 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e00f      	b.n	8004a4c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	4013      	ands	r3, r2
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	bf0c      	ite	eq
 8004a3c:	2301      	moveq	r3, #1
 8004a3e:	2300      	movne	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d1a3      	bne.n	8004992 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af02      	add	r7, sp, #8
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004a60:	4b1b      	ldr	r3, [pc, #108]	; (8004ad0 <SPI_EndRxTxTransaction+0x7c>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1b      	ldr	r2, [pc, #108]	; (8004ad4 <SPI_EndRxTxTransaction+0x80>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	0d5b      	lsrs	r3, r3, #21
 8004a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a70:	fb02 f303 	mul.w	r3, r2, r3
 8004a74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a7e:	d112      	bne.n	8004aa6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2200      	movs	r2, #0
 8004a88:	2180      	movs	r1, #128	; 0x80
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff ff78 	bl	8004980 <SPI_WaitFlagStateUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d016      	beq.n	8004ac4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a9a:	f043 0220 	orr.w	r2, r3, #32
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e00f      	b.n	8004ac6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00a      	beq.n	8004ac2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abc:	2b80      	cmp	r3, #128	; 0x80
 8004abe:	d0f2      	beq.n	8004aa6 <SPI_EndRxTxTransaction+0x52>
 8004ac0:	e000      	b.n	8004ac4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ac2:	bf00      	nop
  }

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000000 	.word	0x20000000
 8004ad4:	165e9f81 	.word	0x165e9f81

08004ad8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e03f      	b.n	8004b6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fc fc02 	bl	8001308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2224      	movs	r2, #36	; 0x24
 8004b08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f90b 	bl	8004d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b088      	sub	sp, #32
 8004b76:	af02      	add	r7, sp, #8
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	603b      	str	r3, [r7, #0]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	f040 8083 	bne.w	8004c9a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_UART_Transmit+0x2e>
 8004b9a:	88fb      	ldrh	r3, [r7, #6]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e07b      	b.n	8004c9c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_UART_Transmit+0x40>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e074      	b.n	8004c9c <HAL_UART_Transmit+0x12a>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2221      	movs	r2, #33	; 0x21
 8004bc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004bc8:	f7fc fd9a 	bl	8001700 <HAL_GetTick>
 8004bcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	88fa      	ldrh	r2, [r7, #6]
 8004bd2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	88fa      	ldrh	r2, [r7, #6]
 8004bd8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004be2:	e042      	b.n	8004c6a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfa:	d122      	bne.n	8004c42 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	2200      	movs	r2, #0
 8004c04:	2180      	movs	r1, #128	; 0x80
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f84c 	bl	8004ca4 <UART_WaitOnFlagUntilTimeout>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e042      	b.n	8004c9c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c28:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d103      	bne.n	8004c3a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	3302      	adds	r3, #2
 8004c36:	60bb      	str	r3, [r7, #8]
 8004c38:	e017      	b.n	8004c6a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	60bb      	str	r3, [r7, #8]
 8004c40:	e013      	b.n	8004c6a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2180      	movs	r1, #128	; 0x80
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f829 	bl	8004ca4 <UART_WaitOnFlagUntilTimeout>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e01f      	b.n	8004c9c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	1c5a      	adds	r2, r3, #1
 8004c60:	60ba      	str	r2, [r7, #8]
 8004c62:	781a      	ldrb	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1b7      	bne.n	8004be4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2140      	movs	r1, #64	; 0x40
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 f810 	bl	8004ca4 <UART_WaitOnFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e006      	b.n	8004c9c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e000      	b.n	8004c9c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
  }
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb4:	e02c      	b.n	8004d10 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbc:	d028      	beq.n	8004d10 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cc4:	f7fc fd1c 	bl	8001700 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d21d      	bcs.n	8004d10 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ce2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695a      	ldr	r2, [r3, #20]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0201 	bic.w	r2, r2, #1
 8004cf2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e00f      	b.n	8004d30 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	bf0c      	ite	eq
 8004d20:	2301      	moveq	r3, #1
 8004d22:	2300      	movne	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	461a      	mov	r2, r3
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d0c3      	beq.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68da      	ldr	r2, [r3, #12]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	431a      	orrs	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	69db      	ldr	r3, [r3, #28]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004d7a:	f023 030c 	bic.w	r3, r3, #12
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	68f9      	ldr	r1, [r7, #12]
 8004d84:	430b      	orrs	r3, r1
 8004d86:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da6:	f040 818b 	bne.w	80050c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4ac1      	ldr	r2, [pc, #772]	; (80050b4 <UART_SetConfig+0x37c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d005      	beq.n	8004dc0 <UART_SetConfig+0x88>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4abf      	ldr	r2, [pc, #764]	; (80050b8 <UART_SetConfig+0x380>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	f040 80bd 	bne.w	8004f3a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dc0:	f7ff fc32 	bl	8004628 <HAL_RCC_GetPCLK2Freq>
 8004dc4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	461d      	mov	r5, r3
 8004dca:	f04f 0600 	mov.w	r6, #0
 8004dce:	46a8      	mov	r8, r5
 8004dd0:	46b1      	mov	r9, r6
 8004dd2:	eb18 0308 	adds.w	r3, r8, r8
 8004dd6:	eb49 0409 	adc.w	r4, r9, r9
 8004dda:	4698      	mov	r8, r3
 8004ddc:	46a1      	mov	r9, r4
 8004dde:	eb18 0805 	adds.w	r8, r8, r5
 8004de2:	eb49 0906 	adc.w	r9, r9, r6
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004df2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004df6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004dfa:	4688      	mov	r8, r1
 8004dfc:	4691      	mov	r9, r2
 8004dfe:	eb18 0005 	adds.w	r0, r8, r5
 8004e02:	eb49 0106 	adc.w	r1, r9, r6
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	461d      	mov	r5, r3
 8004e0c:	f04f 0600 	mov.w	r6, #0
 8004e10:	196b      	adds	r3, r5, r5
 8004e12:	eb46 0406 	adc.w	r4, r6, r6
 8004e16:	461a      	mov	r2, r3
 8004e18:	4623      	mov	r3, r4
 8004e1a:	f7fb f9d5 	bl	80001c8 <__aeabi_uldivmod>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	460c      	mov	r4, r1
 8004e22:	461a      	mov	r2, r3
 8004e24:	4ba5      	ldr	r3, [pc, #660]	; (80050bc <UART_SetConfig+0x384>)
 8004e26:	fba3 2302 	umull	r2, r3, r3, r2
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	461d      	mov	r5, r3
 8004e34:	f04f 0600 	mov.w	r6, #0
 8004e38:	46a9      	mov	r9, r5
 8004e3a:	46b2      	mov	sl, r6
 8004e3c:	eb19 0309 	adds.w	r3, r9, r9
 8004e40:	eb4a 040a 	adc.w	r4, sl, sl
 8004e44:	4699      	mov	r9, r3
 8004e46:	46a2      	mov	sl, r4
 8004e48:	eb19 0905 	adds.w	r9, r9, r5
 8004e4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e50:	f04f 0100 	mov.w	r1, #0
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e64:	4689      	mov	r9, r1
 8004e66:	4692      	mov	sl, r2
 8004e68:	eb19 0005 	adds.w	r0, r9, r5
 8004e6c:	eb4a 0106 	adc.w	r1, sl, r6
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	461d      	mov	r5, r3
 8004e76:	f04f 0600 	mov.w	r6, #0
 8004e7a:	196b      	adds	r3, r5, r5
 8004e7c:	eb46 0406 	adc.w	r4, r6, r6
 8004e80:	461a      	mov	r2, r3
 8004e82:	4623      	mov	r3, r4
 8004e84:	f7fb f9a0 	bl	80001c8 <__aeabi_uldivmod>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4b8b      	ldr	r3, [pc, #556]	; (80050bc <UART_SetConfig+0x384>)
 8004e90:	fba3 1302 	umull	r1, r3, r3, r2
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	2164      	movs	r1, #100	; 0x64
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	3332      	adds	r3, #50	; 0x32
 8004ea2:	4a86      	ldr	r2, [pc, #536]	; (80050bc <UART_SetConfig+0x384>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eb0:	4498      	add	r8, r3
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	461d      	mov	r5, r3
 8004eb6:	f04f 0600 	mov.w	r6, #0
 8004eba:	46a9      	mov	r9, r5
 8004ebc:	46b2      	mov	sl, r6
 8004ebe:	eb19 0309 	adds.w	r3, r9, r9
 8004ec2:	eb4a 040a 	adc.w	r4, sl, sl
 8004ec6:	4699      	mov	r9, r3
 8004ec8:	46a2      	mov	sl, r4
 8004eca:	eb19 0905 	adds.w	r9, r9, r5
 8004ece:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ed2:	f04f 0100 	mov.w	r1, #0
 8004ed6:	f04f 0200 	mov.w	r2, #0
 8004eda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ede:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ee2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ee6:	4689      	mov	r9, r1
 8004ee8:	4692      	mov	sl, r2
 8004eea:	eb19 0005 	adds.w	r0, r9, r5
 8004eee:	eb4a 0106 	adc.w	r1, sl, r6
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	461d      	mov	r5, r3
 8004ef8:	f04f 0600 	mov.w	r6, #0
 8004efc:	196b      	adds	r3, r5, r5
 8004efe:	eb46 0406 	adc.w	r4, r6, r6
 8004f02:	461a      	mov	r2, r3
 8004f04:	4623      	mov	r3, r4
 8004f06:	f7fb f95f 	bl	80001c8 <__aeabi_uldivmod>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	460c      	mov	r4, r1
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4b6a      	ldr	r3, [pc, #424]	; (80050bc <UART_SetConfig+0x384>)
 8004f12:	fba3 1302 	umull	r1, r3, r3, r2
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	2164      	movs	r1, #100	; 0x64
 8004f1a:	fb01 f303 	mul.w	r3, r1, r3
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	3332      	adds	r3, #50	; 0x32
 8004f24:	4a65      	ldr	r2, [pc, #404]	; (80050bc <UART_SetConfig+0x384>)
 8004f26:	fba2 2303 	umull	r2, r3, r2, r3
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	f003 0207 	and.w	r2, r3, #7
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4442      	add	r2, r8
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	e26f      	b.n	800541a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f3a:	f7ff fb61 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 8004f3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	461d      	mov	r5, r3
 8004f44:	f04f 0600 	mov.w	r6, #0
 8004f48:	46a8      	mov	r8, r5
 8004f4a:	46b1      	mov	r9, r6
 8004f4c:	eb18 0308 	adds.w	r3, r8, r8
 8004f50:	eb49 0409 	adc.w	r4, r9, r9
 8004f54:	4698      	mov	r8, r3
 8004f56:	46a1      	mov	r9, r4
 8004f58:	eb18 0805 	adds.w	r8, r8, r5
 8004f5c:	eb49 0906 	adc.w	r9, r9, r6
 8004f60:	f04f 0100 	mov.w	r1, #0
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f74:	4688      	mov	r8, r1
 8004f76:	4691      	mov	r9, r2
 8004f78:	eb18 0005 	adds.w	r0, r8, r5
 8004f7c:	eb49 0106 	adc.w	r1, r9, r6
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	461d      	mov	r5, r3
 8004f86:	f04f 0600 	mov.w	r6, #0
 8004f8a:	196b      	adds	r3, r5, r5
 8004f8c:	eb46 0406 	adc.w	r4, r6, r6
 8004f90:	461a      	mov	r2, r3
 8004f92:	4623      	mov	r3, r4
 8004f94:	f7fb f918 	bl	80001c8 <__aeabi_uldivmod>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	4b47      	ldr	r3, [pc, #284]	; (80050bc <UART_SetConfig+0x384>)
 8004fa0:	fba3 2302 	umull	r2, r3, r3, r2
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	461d      	mov	r5, r3
 8004fae:	f04f 0600 	mov.w	r6, #0
 8004fb2:	46a9      	mov	r9, r5
 8004fb4:	46b2      	mov	sl, r6
 8004fb6:	eb19 0309 	adds.w	r3, r9, r9
 8004fba:	eb4a 040a 	adc.w	r4, sl, sl
 8004fbe:	4699      	mov	r9, r3
 8004fc0:	46a2      	mov	sl, r4
 8004fc2:	eb19 0905 	adds.w	r9, r9, r5
 8004fc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fca:	f04f 0100 	mov.w	r1, #0
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fde:	4689      	mov	r9, r1
 8004fe0:	4692      	mov	sl, r2
 8004fe2:	eb19 0005 	adds.w	r0, r9, r5
 8004fe6:	eb4a 0106 	adc.w	r1, sl, r6
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	461d      	mov	r5, r3
 8004ff0:	f04f 0600 	mov.w	r6, #0
 8004ff4:	196b      	adds	r3, r5, r5
 8004ff6:	eb46 0406 	adc.w	r4, r6, r6
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	4623      	mov	r3, r4
 8004ffe:	f7fb f8e3 	bl	80001c8 <__aeabi_uldivmod>
 8005002:	4603      	mov	r3, r0
 8005004:	460c      	mov	r4, r1
 8005006:	461a      	mov	r2, r3
 8005008:	4b2c      	ldr	r3, [pc, #176]	; (80050bc <UART_SetConfig+0x384>)
 800500a:	fba3 1302 	umull	r1, r3, r3, r2
 800500e:	095b      	lsrs	r3, r3, #5
 8005010:	2164      	movs	r1, #100	; 0x64
 8005012:	fb01 f303 	mul.w	r3, r1, r3
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	3332      	adds	r3, #50	; 0x32
 800501c:	4a27      	ldr	r2, [pc, #156]	; (80050bc <UART_SetConfig+0x384>)
 800501e:	fba2 2303 	umull	r2, r3, r2, r3
 8005022:	095b      	lsrs	r3, r3, #5
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800502a:	4498      	add	r8, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	461d      	mov	r5, r3
 8005030:	f04f 0600 	mov.w	r6, #0
 8005034:	46a9      	mov	r9, r5
 8005036:	46b2      	mov	sl, r6
 8005038:	eb19 0309 	adds.w	r3, r9, r9
 800503c:	eb4a 040a 	adc.w	r4, sl, sl
 8005040:	4699      	mov	r9, r3
 8005042:	46a2      	mov	sl, r4
 8005044:	eb19 0905 	adds.w	r9, r9, r5
 8005048:	eb4a 0a06 	adc.w	sl, sl, r6
 800504c:	f04f 0100 	mov.w	r1, #0
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005058:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800505c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005060:	4689      	mov	r9, r1
 8005062:	4692      	mov	sl, r2
 8005064:	eb19 0005 	adds.w	r0, r9, r5
 8005068:	eb4a 0106 	adc.w	r1, sl, r6
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	461d      	mov	r5, r3
 8005072:	f04f 0600 	mov.w	r6, #0
 8005076:	196b      	adds	r3, r5, r5
 8005078:	eb46 0406 	adc.w	r4, r6, r6
 800507c:	461a      	mov	r2, r3
 800507e:	4623      	mov	r3, r4
 8005080:	f7fb f8a2 	bl	80001c8 <__aeabi_uldivmod>
 8005084:	4603      	mov	r3, r0
 8005086:	460c      	mov	r4, r1
 8005088:	461a      	mov	r2, r3
 800508a:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <UART_SetConfig+0x384>)
 800508c:	fba3 1302 	umull	r1, r3, r3, r2
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	2164      	movs	r1, #100	; 0x64
 8005094:	fb01 f303 	mul.w	r3, r1, r3
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	3332      	adds	r3, #50	; 0x32
 800509e:	4a07      	ldr	r2, [pc, #28]	; (80050bc <UART_SetConfig+0x384>)
 80050a0:	fba2 2303 	umull	r2, r3, r2, r3
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	f003 0207 	and.w	r2, r3, #7
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4442      	add	r2, r8
 80050b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80050b2:	e1b2      	b.n	800541a <UART_SetConfig+0x6e2>
 80050b4:	40011000 	.word	0x40011000
 80050b8:	40011400 	.word	0x40011400
 80050bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4ad7      	ldr	r2, [pc, #860]	; (8005424 <UART_SetConfig+0x6ec>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d005      	beq.n	80050d6 <UART_SetConfig+0x39e>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4ad6      	ldr	r2, [pc, #856]	; (8005428 <UART_SetConfig+0x6f0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	f040 80d1 	bne.w	8005278 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80050d6:	f7ff faa7 	bl	8004628 <HAL_RCC_GetPCLK2Freq>
 80050da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	469a      	mov	sl, r3
 80050e0:	f04f 0b00 	mov.w	fp, #0
 80050e4:	46d0      	mov	r8, sl
 80050e6:	46d9      	mov	r9, fp
 80050e8:	eb18 0308 	adds.w	r3, r8, r8
 80050ec:	eb49 0409 	adc.w	r4, r9, r9
 80050f0:	4698      	mov	r8, r3
 80050f2:	46a1      	mov	r9, r4
 80050f4:	eb18 080a 	adds.w	r8, r8, sl
 80050f8:	eb49 090b 	adc.w	r9, r9, fp
 80050fc:	f04f 0100 	mov.w	r1, #0
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005108:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800510c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005110:	4688      	mov	r8, r1
 8005112:	4691      	mov	r9, r2
 8005114:	eb1a 0508 	adds.w	r5, sl, r8
 8005118:	eb4b 0609 	adc.w	r6, fp, r9
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	4619      	mov	r1, r3
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	f04f 0400 	mov.w	r4, #0
 800512e:	0094      	lsls	r4, r2, #2
 8005130:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005134:	008b      	lsls	r3, r1, #2
 8005136:	461a      	mov	r2, r3
 8005138:	4623      	mov	r3, r4
 800513a:	4628      	mov	r0, r5
 800513c:	4631      	mov	r1, r6
 800513e:	f7fb f843 	bl	80001c8 <__aeabi_uldivmod>
 8005142:	4603      	mov	r3, r0
 8005144:	460c      	mov	r4, r1
 8005146:	461a      	mov	r2, r3
 8005148:	4bb8      	ldr	r3, [pc, #736]	; (800542c <UART_SetConfig+0x6f4>)
 800514a:	fba3 2302 	umull	r2, r3, r3, r2
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	469b      	mov	fp, r3
 8005158:	f04f 0c00 	mov.w	ip, #0
 800515c:	46d9      	mov	r9, fp
 800515e:	46e2      	mov	sl, ip
 8005160:	eb19 0309 	adds.w	r3, r9, r9
 8005164:	eb4a 040a 	adc.w	r4, sl, sl
 8005168:	4699      	mov	r9, r3
 800516a:	46a2      	mov	sl, r4
 800516c:	eb19 090b 	adds.w	r9, r9, fp
 8005170:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005174:	f04f 0100 	mov.w	r1, #0
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005180:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005184:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005188:	4689      	mov	r9, r1
 800518a:	4692      	mov	sl, r2
 800518c:	eb1b 0509 	adds.w	r5, fp, r9
 8005190:	eb4c 060a 	adc.w	r6, ip, sl
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	4619      	mov	r1, r3
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	f04f 0400 	mov.w	r4, #0
 80051a6:	0094      	lsls	r4, r2, #2
 80051a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051ac:	008b      	lsls	r3, r1, #2
 80051ae:	461a      	mov	r2, r3
 80051b0:	4623      	mov	r3, r4
 80051b2:	4628      	mov	r0, r5
 80051b4:	4631      	mov	r1, r6
 80051b6:	f7fb f807 	bl	80001c8 <__aeabi_uldivmod>
 80051ba:	4603      	mov	r3, r0
 80051bc:	460c      	mov	r4, r1
 80051be:	461a      	mov	r2, r3
 80051c0:	4b9a      	ldr	r3, [pc, #616]	; (800542c <UART_SetConfig+0x6f4>)
 80051c2:	fba3 1302 	umull	r1, r3, r3, r2
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	2164      	movs	r1, #100	; 0x64
 80051ca:	fb01 f303 	mul.w	r3, r1, r3
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	3332      	adds	r3, #50	; 0x32
 80051d4:	4a95      	ldr	r2, [pc, #596]	; (800542c <UART_SetConfig+0x6f4>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051e0:	4498      	add	r8, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	469b      	mov	fp, r3
 80051e6:	f04f 0c00 	mov.w	ip, #0
 80051ea:	46d9      	mov	r9, fp
 80051ec:	46e2      	mov	sl, ip
 80051ee:	eb19 0309 	adds.w	r3, r9, r9
 80051f2:	eb4a 040a 	adc.w	r4, sl, sl
 80051f6:	4699      	mov	r9, r3
 80051f8:	46a2      	mov	sl, r4
 80051fa:	eb19 090b 	adds.w	r9, r9, fp
 80051fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005202:	f04f 0100 	mov.w	r1, #0
 8005206:	f04f 0200 	mov.w	r2, #0
 800520a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800520e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005212:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005216:	4689      	mov	r9, r1
 8005218:	4692      	mov	sl, r2
 800521a:	eb1b 0509 	adds.w	r5, fp, r9
 800521e:	eb4c 060a 	adc.w	r6, ip, sl
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	4619      	mov	r1, r3
 8005228:	f04f 0200 	mov.w	r2, #0
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	f04f 0400 	mov.w	r4, #0
 8005234:	0094      	lsls	r4, r2, #2
 8005236:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800523a:	008b      	lsls	r3, r1, #2
 800523c:	461a      	mov	r2, r3
 800523e:	4623      	mov	r3, r4
 8005240:	4628      	mov	r0, r5
 8005242:	4631      	mov	r1, r6
 8005244:	f7fa ffc0 	bl	80001c8 <__aeabi_uldivmod>
 8005248:	4603      	mov	r3, r0
 800524a:	460c      	mov	r4, r1
 800524c:	461a      	mov	r2, r3
 800524e:	4b77      	ldr	r3, [pc, #476]	; (800542c <UART_SetConfig+0x6f4>)
 8005250:	fba3 1302 	umull	r1, r3, r3, r2
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	2164      	movs	r1, #100	; 0x64
 8005258:	fb01 f303 	mul.w	r3, r1, r3
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	011b      	lsls	r3, r3, #4
 8005260:	3332      	adds	r3, #50	; 0x32
 8005262:	4a72      	ldr	r2, [pc, #456]	; (800542c <UART_SetConfig+0x6f4>)
 8005264:	fba2 2303 	umull	r2, r3, r2, r3
 8005268:	095b      	lsrs	r3, r3, #5
 800526a:	f003 020f 	and.w	r2, r3, #15
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4442      	add	r2, r8
 8005274:	609a      	str	r2, [r3, #8]
 8005276:	e0d0      	b.n	800541a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005278:	f7ff f9c2 	bl	8004600 <HAL_RCC_GetPCLK1Freq>
 800527c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	469a      	mov	sl, r3
 8005282:	f04f 0b00 	mov.w	fp, #0
 8005286:	46d0      	mov	r8, sl
 8005288:	46d9      	mov	r9, fp
 800528a:	eb18 0308 	adds.w	r3, r8, r8
 800528e:	eb49 0409 	adc.w	r4, r9, r9
 8005292:	4698      	mov	r8, r3
 8005294:	46a1      	mov	r9, r4
 8005296:	eb18 080a 	adds.w	r8, r8, sl
 800529a:	eb49 090b 	adc.w	r9, r9, fp
 800529e:	f04f 0100 	mov.w	r1, #0
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052b2:	4688      	mov	r8, r1
 80052b4:	4691      	mov	r9, r2
 80052b6:	eb1a 0508 	adds.w	r5, sl, r8
 80052ba:	eb4b 0609 	adc.w	r6, fp, r9
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	4619      	mov	r1, r3
 80052c4:	f04f 0200 	mov.w	r2, #0
 80052c8:	f04f 0300 	mov.w	r3, #0
 80052cc:	f04f 0400 	mov.w	r4, #0
 80052d0:	0094      	lsls	r4, r2, #2
 80052d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052d6:	008b      	lsls	r3, r1, #2
 80052d8:	461a      	mov	r2, r3
 80052da:	4623      	mov	r3, r4
 80052dc:	4628      	mov	r0, r5
 80052de:	4631      	mov	r1, r6
 80052e0:	f7fa ff72 	bl	80001c8 <__aeabi_uldivmod>
 80052e4:	4603      	mov	r3, r0
 80052e6:	460c      	mov	r4, r1
 80052e8:	461a      	mov	r2, r3
 80052ea:	4b50      	ldr	r3, [pc, #320]	; (800542c <UART_SetConfig+0x6f4>)
 80052ec:	fba3 2302 	umull	r2, r3, r3, r2
 80052f0:	095b      	lsrs	r3, r3, #5
 80052f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	469b      	mov	fp, r3
 80052fa:	f04f 0c00 	mov.w	ip, #0
 80052fe:	46d9      	mov	r9, fp
 8005300:	46e2      	mov	sl, ip
 8005302:	eb19 0309 	adds.w	r3, r9, r9
 8005306:	eb4a 040a 	adc.w	r4, sl, sl
 800530a:	4699      	mov	r9, r3
 800530c:	46a2      	mov	sl, r4
 800530e:	eb19 090b 	adds.w	r9, r9, fp
 8005312:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005316:	f04f 0100 	mov.w	r1, #0
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005322:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005326:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800532a:	4689      	mov	r9, r1
 800532c:	4692      	mov	sl, r2
 800532e:	eb1b 0509 	adds.w	r5, fp, r9
 8005332:	eb4c 060a 	adc.w	r6, ip, sl
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4619      	mov	r1, r3
 800533c:	f04f 0200 	mov.w	r2, #0
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	f04f 0400 	mov.w	r4, #0
 8005348:	0094      	lsls	r4, r2, #2
 800534a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800534e:	008b      	lsls	r3, r1, #2
 8005350:	461a      	mov	r2, r3
 8005352:	4623      	mov	r3, r4
 8005354:	4628      	mov	r0, r5
 8005356:	4631      	mov	r1, r6
 8005358:	f7fa ff36 	bl	80001c8 <__aeabi_uldivmod>
 800535c:	4603      	mov	r3, r0
 800535e:	460c      	mov	r4, r1
 8005360:	461a      	mov	r2, r3
 8005362:	4b32      	ldr	r3, [pc, #200]	; (800542c <UART_SetConfig+0x6f4>)
 8005364:	fba3 1302 	umull	r1, r3, r3, r2
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	2164      	movs	r1, #100	; 0x64
 800536c:	fb01 f303 	mul.w	r3, r1, r3
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	3332      	adds	r3, #50	; 0x32
 8005376:	4a2d      	ldr	r2, [pc, #180]	; (800542c <UART_SetConfig+0x6f4>)
 8005378:	fba2 2303 	umull	r2, r3, r2, r3
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005382:	4498      	add	r8, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	469b      	mov	fp, r3
 8005388:	f04f 0c00 	mov.w	ip, #0
 800538c:	46d9      	mov	r9, fp
 800538e:	46e2      	mov	sl, ip
 8005390:	eb19 0309 	adds.w	r3, r9, r9
 8005394:	eb4a 040a 	adc.w	r4, sl, sl
 8005398:	4699      	mov	r9, r3
 800539a:	46a2      	mov	sl, r4
 800539c:	eb19 090b 	adds.w	r9, r9, fp
 80053a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053a4:	f04f 0100 	mov.w	r1, #0
 80053a8:	f04f 0200 	mov.w	r2, #0
 80053ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053b8:	4689      	mov	r9, r1
 80053ba:	4692      	mov	sl, r2
 80053bc:	eb1b 0509 	adds.w	r5, fp, r9
 80053c0:	eb4c 060a 	adc.w	r6, ip, sl
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	4619      	mov	r1, r3
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	f04f 0400 	mov.w	r4, #0
 80053d6:	0094      	lsls	r4, r2, #2
 80053d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053dc:	008b      	lsls	r3, r1, #2
 80053de:	461a      	mov	r2, r3
 80053e0:	4623      	mov	r3, r4
 80053e2:	4628      	mov	r0, r5
 80053e4:	4631      	mov	r1, r6
 80053e6:	f7fa feef 	bl	80001c8 <__aeabi_uldivmod>
 80053ea:	4603      	mov	r3, r0
 80053ec:	460c      	mov	r4, r1
 80053ee:	461a      	mov	r2, r3
 80053f0:	4b0e      	ldr	r3, [pc, #56]	; (800542c <UART_SetConfig+0x6f4>)
 80053f2:	fba3 1302 	umull	r1, r3, r3, r2
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	2164      	movs	r1, #100	; 0x64
 80053fa:	fb01 f303 	mul.w	r3, r1, r3
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	3332      	adds	r3, #50	; 0x32
 8005404:	4a09      	ldr	r2, [pc, #36]	; (800542c <UART_SetConfig+0x6f4>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	f003 020f 	and.w	r2, r3, #15
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4442      	add	r2, r8
 8005416:	609a      	str	r2, [r3, #8]
}
 8005418:	e7ff      	b.n	800541a <UART_SetConfig+0x6e2>
 800541a:	bf00      	nop
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005424:	40011000 	.word	0x40011000
 8005428:	40011400 	.word	0x40011400
 800542c:	51eb851f 	.word	0x51eb851f

08005430 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005430:	b084      	sub	sp, #16
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	f107 001c 	add.w	r0, r7, #28
 800543e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	2b01      	cmp	r3, #1
 8005446:	d122      	bne.n	800548e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800545c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005472:	2b01      	cmp	r3, #1
 8005474:	d105      	bne.n	8005482 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f001 fab4 	bl	80069f0 <USB_CoreReset>
 8005488:	4603      	mov	r3, r0
 800548a:	73fb      	strb	r3, [r7, #15]
 800548c:	e01a      	b.n	80054c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f001 faa8 	bl	80069f0 <USB_CoreReset>
 80054a0:	4603      	mov	r3, r0
 80054a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d106      	bne.n	80054b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	639a      	str	r2, [r3, #56]	; 0x38
 80054b6:	e005      	b.n	80054c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d10b      	bne.n	80054e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f043 0206 	orr.w	r2, r3, #6
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f043 0220 	orr.w	r2, r3, #32
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054ee:	b004      	add	sp, #16
 80054f0:	4770      	bx	lr
	...

080054f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	4613      	mov	r3, r2
 8005500:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005502:	79fb      	ldrb	r3, [r7, #7]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d165      	bne.n	80055d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	4a41      	ldr	r2, [pc, #260]	; (8005610 <USB_SetTurnaroundTime+0x11c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d906      	bls.n	800551e <USB_SetTurnaroundTime+0x2a>
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	4a40      	ldr	r2, [pc, #256]	; (8005614 <USB_SetTurnaroundTime+0x120>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d802      	bhi.n	800551e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005518:	230f      	movs	r3, #15
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	e062      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4a3c      	ldr	r2, [pc, #240]	; (8005614 <USB_SetTurnaroundTime+0x120>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d906      	bls.n	8005534 <USB_SetTurnaroundTime+0x40>
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	4a3b      	ldr	r2, [pc, #236]	; (8005618 <USB_SetTurnaroundTime+0x124>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d802      	bhi.n	8005534 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800552e:	230e      	movs	r3, #14
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	e057      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	4a38      	ldr	r2, [pc, #224]	; (8005618 <USB_SetTurnaroundTime+0x124>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d906      	bls.n	800554a <USB_SetTurnaroundTime+0x56>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	4a37      	ldr	r2, [pc, #220]	; (800561c <USB_SetTurnaroundTime+0x128>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d802      	bhi.n	800554a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005544:	230d      	movs	r3, #13
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	e04c      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	4a33      	ldr	r2, [pc, #204]	; (800561c <USB_SetTurnaroundTime+0x128>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d906      	bls.n	8005560 <USB_SetTurnaroundTime+0x6c>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	4a32      	ldr	r2, [pc, #200]	; (8005620 <USB_SetTurnaroundTime+0x12c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d802      	bhi.n	8005560 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800555a:	230c      	movs	r3, #12
 800555c:	617b      	str	r3, [r7, #20]
 800555e:	e041      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4a2f      	ldr	r2, [pc, #188]	; (8005620 <USB_SetTurnaroundTime+0x12c>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d906      	bls.n	8005576 <USB_SetTurnaroundTime+0x82>
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	4a2e      	ldr	r2, [pc, #184]	; (8005624 <USB_SetTurnaroundTime+0x130>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d802      	bhi.n	8005576 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005570:	230b      	movs	r3, #11
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	e036      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4a2a      	ldr	r2, [pc, #168]	; (8005624 <USB_SetTurnaroundTime+0x130>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d906      	bls.n	800558c <USB_SetTurnaroundTime+0x98>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	4a29      	ldr	r2, [pc, #164]	; (8005628 <USB_SetTurnaroundTime+0x134>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d802      	bhi.n	800558c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005586:	230a      	movs	r3, #10
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	e02b      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	4a26      	ldr	r2, [pc, #152]	; (8005628 <USB_SetTurnaroundTime+0x134>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d906      	bls.n	80055a2 <USB_SetTurnaroundTime+0xae>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	4a25      	ldr	r2, [pc, #148]	; (800562c <USB_SetTurnaroundTime+0x138>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d802      	bhi.n	80055a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800559c:	2309      	movs	r3, #9
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e020      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4a21      	ldr	r2, [pc, #132]	; (800562c <USB_SetTurnaroundTime+0x138>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d906      	bls.n	80055b8 <USB_SetTurnaroundTime+0xc4>
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4a20      	ldr	r2, [pc, #128]	; (8005630 <USB_SetTurnaroundTime+0x13c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d802      	bhi.n	80055b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80055b2:	2308      	movs	r3, #8
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	e015      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4a1d      	ldr	r2, [pc, #116]	; (8005630 <USB_SetTurnaroundTime+0x13c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d906      	bls.n	80055ce <USB_SetTurnaroundTime+0xda>
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	4a1c      	ldr	r2, [pc, #112]	; (8005634 <USB_SetTurnaroundTime+0x140>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d802      	bhi.n	80055ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80055c8:	2307      	movs	r3, #7
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	e00a      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80055ce:	2306      	movs	r3, #6
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	e007      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80055d4:	79fb      	ldrb	r3, [r7, #7]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d102      	bne.n	80055e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80055da:	2309      	movs	r3, #9
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	e001      	b.n	80055e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80055e0:	2309      	movs	r3, #9
 80055e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	029b      	lsls	r3, r3, #10
 80055f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80055fc:	431a      	orrs	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	00d8acbf 	.word	0x00d8acbf
 8005614:	00e4e1bf 	.word	0x00e4e1bf
 8005618:	00f423ff 	.word	0x00f423ff
 800561c:	0106737f 	.word	0x0106737f
 8005620:	011a499f 	.word	0x011a499f
 8005624:	01312cff 	.word	0x01312cff
 8005628:	014ca43f 	.word	0x014ca43f
 800562c:	016e35ff 	.word	0x016e35ff
 8005630:	01a6ab1f 	.word	0x01a6ab1f
 8005634:	01e847ff 	.word	0x01e847ff

08005638 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f043 0201 	orr.w	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f023 0201 	bic.w	r2, r3, #1
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005694:	78fb      	ldrb	r3, [r7, #3]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d106      	bne.n	80056a8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60da      	str	r2, [r3, #12]
 80056a6:	e00b      	b.n	80056c0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	60da      	str	r2, [r3, #12]
 80056ba:	e001      	b.n	80056c0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e003      	b.n	80056c8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80056c0:	2032      	movs	r0, #50	; 0x32
 80056c2:	f7fc f829 	bl	8001718 <HAL_Delay>

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056d0:	b084      	sub	sp, #16
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b086      	sub	sp, #24
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056ea:	2300      	movs	r3, #0
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	e009      	b.n	8005704 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	3340      	adds	r3, #64	; 0x40
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	2200      	movs	r2, #0
 80056fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	3301      	adds	r3, #1
 8005702:	613b      	str	r3, [r7, #16]
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	2b0e      	cmp	r3, #14
 8005708:	d9f2      	bls.n	80056f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800570a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d11c      	bne.n	800574a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800571e:	f043 0302 	orr.w	r3, r3, #2
 8005722:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	639a      	str	r2, [r3, #56]	; 0x38
 8005748:	e00b      	b.n	8005762 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005768:	461a      	mov	r2, r3
 800576a:	2300      	movs	r3, #0
 800576c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	4619      	mov	r1, r3
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577c:	461a      	mov	r2, r3
 800577e:	680b      	ldr	r3, [r1, #0]
 8005780:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	2b01      	cmp	r3, #1
 8005786:	d10c      	bne.n	80057a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800578e:	2100      	movs	r1, #0
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f949 	bl	8005a28 <USB_SetDevSpeed>
 8005796:	e008      	b.n	80057aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005798:	2101      	movs	r1, #1
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f944 	bl	8005a28 <USB_SetDevSpeed>
 80057a0:	e003      	b.n	80057aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057a2:	2103      	movs	r1, #3
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f93f 	bl	8005a28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057aa:	2110      	movs	r1, #16
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f8f3 	bl	8005998 <USB_FlushTxFifo>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f911 	bl	80059e4 <USB_FlushRxFifo>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	461a      	mov	r2, r3
 80057d4:	2300      	movs	r3, #0
 80057d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057de:	461a      	mov	r2, r3
 80057e0:	2300      	movs	r3, #0
 80057e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ea:	461a      	mov	r2, r3
 80057ec:	2300      	movs	r3, #0
 80057ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057f0:	2300      	movs	r3, #0
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	e043      	b.n	800587e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800580c:	d118      	bne.n	8005840 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10a      	bne.n	800582a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005820:	461a      	mov	r2, r3
 8005822:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005826:	6013      	str	r3, [r2, #0]
 8005828:	e013      	b.n	8005852 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005836:	461a      	mov	r2, r3
 8005838:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	e008      	b.n	8005852 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584c:	461a      	mov	r2, r3
 800584e:	2300      	movs	r3, #0
 8005850:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	461a      	mov	r2, r3
 8005860:	2300      	movs	r3, #0
 8005862:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005870:	461a      	mov	r2, r3
 8005872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005876:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	3301      	adds	r3, #1
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	429a      	cmp	r2, r3
 8005884:	d3b7      	bcc.n	80057f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005886:	2300      	movs	r3, #0
 8005888:	613b      	str	r3, [r7, #16]
 800588a:	e043      	b.n	8005914 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800589e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058a2:	d118      	bne.n	80058d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10a      	bne.n	80058c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b6:	461a      	mov	r2, r3
 80058b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	e013      	b.n	80058e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058cc:	461a      	mov	r2, r3
 80058ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058d2:	6013      	str	r3, [r2, #0]
 80058d4:	e008      	b.n	80058e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e2:	461a      	mov	r2, r3
 80058e4:	2300      	movs	r3, #0
 80058e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f4:	461a      	mov	r2, r3
 80058f6:	2300      	movs	r3, #0
 80058f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	4413      	add	r3, r2
 8005902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005906:	461a      	mov	r2, r3
 8005908:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800590c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	3301      	adds	r3, #1
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	429a      	cmp	r2, r3
 800591a:	d3b7      	bcc.n	800588c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005922:	691b      	ldr	r3, [r3, #16]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800592a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800592e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800593c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	2b00      	cmp	r3, #0
 8005942:	d105      	bne.n	8005950 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	f043 0210 	orr.w	r2, r3, #16
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699a      	ldr	r2, [r3, #24]
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <USB_DevInit+0x2c4>)
 8005956:	4313      	orrs	r3, r2
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800595c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595e:	2b00      	cmp	r3, #0
 8005960:	d005      	beq.n	800596e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f043 0208 	orr.w	r2, r3, #8
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800596e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005970:	2b01      	cmp	r3, #1
 8005972:	d107      	bne.n	8005984 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800597c:	f043 0304 	orr.w	r3, r3, #4
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005984:	7dfb      	ldrb	r3, [r7, #23]
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005990:	b004      	add	sp, #16
 8005992:	4770      	bx	lr
 8005994:	803c3800 	.word	0x803c3800

08005998 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	019b      	lsls	r3, r3, #6
 80059aa:	f043 0220 	orr.w	r2, r3, #32
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3301      	adds	r3, #1
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4a09      	ldr	r2, [pc, #36]	; (80059e0 <USB_FlushTxFifo+0x48>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d901      	bls.n	80059c4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e006      	b.n	80059d2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f003 0320 	and.w	r3, r3, #32
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	d0f0      	beq.n	80059b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	00030d40 	.word	0x00030d40

080059e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b085      	sub	sp, #20
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2210      	movs	r2, #16
 80059f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	3301      	adds	r3, #1
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <USB_FlushRxFifo+0x40>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d901      	bls.n	8005a08 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e006      	b.n	8005a16 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	f003 0310 	and.w	r3, r3, #16
 8005a10:	2b10      	cmp	r3, #16
 8005a12:	d0f0      	beq.n	80059f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	00030d40 	.word	0x00030d40

08005a28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	460b      	mov	r3, r1
 8005a32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	78fb      	ldrb	r3, [r7, #3]
 8005a42:	68f9      	ldr	r1, [r7, #12]
 8005a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b087      	sub	sp, #28
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 0306 	and.w	r3, r3, #6
 8005a72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d102      	bne.n	8005a80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	75fb      	strb	r3, [r7, #23]
 8005a7e:	e00a      	b.n	8005a96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d002      	beq.n	8005a8c <USB_GetDevSpeed+0x32>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2b06      	cmp	r3, #6
 8005a8a:	d102      	bne.n	8005a92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	75fb      	strb	r3, [r7, #23]
 8005a90:	e001      	b.n	8005a96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005a92:	230f      	movs	r3, #15
 8005a94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	371c      	adds	r7, #28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	785b      	ldrb	r3, [r3, #1]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d13a      	bne.n	8005b36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac6:	69da      	ldr	r2, [r3, #28]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	f003 030f 	and.w	r3, r3, #15
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	68f9      	ldr	r1, [r7, #12]
 8005ada:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d155      	bne.n	8005ba4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	78db      	ldrb	r3, [r3, #3]
 8005b12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	059b      	lsls	r3, r3, #22
 8005b1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	0151      	lsls	r1, r2, #5
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	440a      	add	r2, r1
 8005b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	e036      	b.n	8005ba4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3c:	69da      	ldr	r2, [r3, #28]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	2101      	movs	r1, #1
 8005b48:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4c:	041b      	lsls	r3, r3, #16
 8005b4e:	68f9      	ldr	r1, [r7, #12]
 8005b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b54:	4313      	orrs	r3, r2
 8005b56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d11a      	bne.n	8005ba4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	78db      	ldrb	r3, [r3, #3]
 8005b88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005b8a:	430b      	orrs	r3, r1
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	0151      	lsls	r1, r2, #5
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	440a      	add	r2, r1
 8005b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ba2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
	...

08005bb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d161      	bne.n	8005c94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005be6:	d11f      	bne.n	8005c28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	f003 030f 	and.w	r3, r3, #15
 8005c38:	2101      	movs	r1, #1
 8005c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	43db      	mvns	r3, r3
 8005c42:	68f9      	ldr	r1, [r7, #12]
 8005c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c48:	4013      	ands	r3, r2
 8005c4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c52:	69da      	ldr	r2, [r3, #28]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	43db      	mvns	r3, r3
 8005c66:	68f9      	ldr	r1, [r7, #12]
 8005c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	0159      	lsls	r1, r3, #5
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	440b      	add	r3, r1
 8005c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4b35      	ldr	r3, [pc, #212]	; (8005d64 <USB_DeactivateEndpoint+0x1b0>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	600b      	str	r3, [r1, #0]
 8005c92:	e060      	b.n	8005d56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005caa:	d11f      	bne.n	8005cec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	0151      	lsls	r1, r2, #5
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	f003 030f 	and.w	r3, r3, #15
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005d02:	041b      	lsls	r3, r3, #16
 8005d04:	43db      	mvns	r3, r3
 8005d06:	68f9      	ldr	r1, [r7, #12]
 8005d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d16:	69da      	ldr	r2, [r3, #28]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	f003 030f 	and.w	r3, r3, #15
 8005d20:	2101      	movs	r1, #1
 8005d22:	fa01 f303 	lsl.w	r3, r1, r3
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	68f9      	ldr	r1, [r7, #12]
 8005d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d30:	4013      	ands	r3, r2
 8005d32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	0159      	lsls	r1, r3, #5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	440b      	add	r3, r1
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <USB_DeactivateEndpoint+0x1b4>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	ec337800 	.word	0xec337800
 8005d68:	eff37800 	.word	0xeff37800

08005d6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	; 0x28
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	4613      	mov	r3, r2
 8005d78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	785b      	ldrb	r3, [r3, #1]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	f040 815c 	bne.w	8006046 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d132      	bne.n	8005dfc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	0151      	lsls	r1, r2, #5
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	440a      	add	r2, r1
 8005dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005db4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005db8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	69ba      	ldr	r2, [r7, #24]
 8005dca:	0151      	lsls	r1, r2, #5
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	440a      	add	r2, r1
 8005dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	015a      	lsls	r2, r3, #5
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	4413      	add	r3, r2
 8005de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	0151      	lsls	r1, r2, #5
 8005dec:	69fa      	ldr	r2, [r7, #28]
 8005dee:	440a      	add	r2, r1
 8005df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df4:	0cdb      	lsrs	r3, r3, #19
 8005df6:	04db      	lsls	r3, r3, #19
 8005df8:	6113      	str	r3, [r2, #16]
 8005dfa:	e074      	b.n	8005ee6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e16:	0cdb      	lsrs	r3, r3, #19
 8005e18:	04db      	lsls	r3, r3, #19
 8005e1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	6959      	ldr	r1, [r3, #20]
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	440b      	add	r3, r1
 8005e58:	1e59      	subs	r1, r3, #1
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e62:	04d9      	lsls	r1, r3, #19
 8005e64:	4b9d      	ldr	r3, [pc, #628]	; (80060dc <USB_EPStartXfer+0x370>)
 8005e66:	400b      	ands	r3, r1
 8005e68:	69b9      	ldr	r1, [r7, #24]
 8005e6a:	0148      	lsls	r0, r1, #5
 8005e6c:	69f9      	ldr	r1, [r7, #28]
 8005e6e:	4401      	add	r1, r0
 8005e70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e74:	4313      	orrs	r3, r2
 8005e76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e8e:	69b9      	ldr	r1, [r7, #24]
 8005e90:	0148      	lsls	r0, r1, #5
 8005e92:	69f9      	ldr	r1, [r7, #28]
 8005e94:	4401      	add	r1, r0
 8005e96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	78db      	ldrb	r3, [r3, #3]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d11f      	bne.n	8005ee6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	69ba      	ldr	r2, [r7, #24]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005ec4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	69fa      	ldr	r2, [r7, #28]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ee4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005ee6:	79fb      	ldrb	r3, [r7, #7]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d14b      	bne.n	8005f84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d009      	beq.n	8005f08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f00:	461a      	mov	r2, r3
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	78db      	ldrb	r3, [r3, #3]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d128      	bne.n	8005f62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d110      	bne.n	8005f42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	015a      	lsls	r2, r3, #5
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	0151      	lsls	r1, r2, #5
 8005f32:	69fa      	ldr	r2, [r7, #28]
 8005f34:	440a      	add	r2, r1
 8005f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	e00f      	b.n	8005f62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	015a      	lsls	r2, r3, #5
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	0151      	lsls	r1, r2, #5
 8005f54:	69fa      	ldr	r2, [r7, #28]
 8005f56:	440a      	add	r2, r1
 8005f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	69fa      	ldr	r2, [r7, #28]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	e12f      	b.n	80061e4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fa2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	78db      	ldrb	r3, [r3, #3]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d015      	beq.n	8005fd8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f000 8117 	beq.w	80061e4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	f003 030f 	and.w	r3, r3, #15
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fcc:	69f9      	ldr	r1, [r7, #28]
 8005fce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	634b      	str	r3, [r1, #52]	; 0x34
 8005fd6:	e105      	b.n	80061e4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d110      	bne.n	800600a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006002:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	e00f      	b.n	800602a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	69fa      	ldr	r2, [r7, #28]
 800601e:	440a      	add	r2, r1
 8006020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006028:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	68d9      	ldr	r1, [r3, #12]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	781a      	ldrb	r2, [r3, #0]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	b298      	uxth	r0, r3
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	4603      	mov	r3, r0
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 fa2b 	bl	800649a <USB_WritePacket>
 8006044:	e0ce      	b.n	80061e4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	0151      	lsls	r1, r2, #5
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	440a      	add	r2, r1
 800605c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006060:	0cdb      	lsrs	r3, r3, #19
 8006062:	04db      	lsls	r3, r3, #19
 8006064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	0151      	lsls	r1, r2, #5
 8006078:	69fa      	ldr	r2, [r7, #28]
 800607a:	440a      	add	r2, r1
 800607c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006080:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006084:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006088:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d126      	bne.n	80060e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609e:	691a      	ldr	r2, [r3, #16]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060a8:	69b9      	ldr	r1, [r7, #24]
 80060aa:	0148      	lsls	r0, r1, #5
 80060ac:	69f9      	ldr	r1, [r7, #28]
 80060ae:	4401      	add	r1, r0
 80060b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80060b4:	4313      	orrs	r3, r2
 80060b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	69fa      	ldr	r2, [r7, #28]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060d6:	6113      	str	r3, [r2, #16]
 80060d8:	e036      	b.n	8006148 <USB_EPStartXfer+0x3dc>
 80060da:	bf00      	nop
 80060dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	695a      	ldr	r2, [r3, #20]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	4413      	add	r3, r2
 80060ea:	1e5a      	subs	r2, r3, #1
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	8afb      	ldrh	r3, [r7, #22]
 8006106:	04d9      	lsls	r1, r3, #19
 8006108:	4b39      	ldr	r3, [pc, #228]	; (80061f0 <USB_EPStartXfer+0x484>)
 800610a:	400b      	ands	r3, r1
 800610c:	69b9      	ldr	r1, [r7, #24]
 800610e:	0148      	lsls	r0, r1, #5
 8006110:	69f9      	ldr	r1, [r7, #28]
 8006112:	4401      	add	r1, r0
 8006114:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006118:	4313      	orrs	r3, r2
 800611a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006128:	691a      	ldr	r2, [r3, #16]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	8af9      	ldrh	r1, [r7, #22]
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006138:	69b9      	ldr	r1, [r7, #24]
 800613a:	0148      	lsls	r0, r1, #5
 800613c:	69f9      	ldr	r1, [r7, #28]
 800613e:	4401      	add	r1, r0
 8006140:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006144:	4313      	orrs	r3, r2
 8006146:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d10d      	bne.n	800616a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d009      	beq.n	800616a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	68d9      	ldr	r1, [r3, #12]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006166:	460a      	mov	r2, r1
 8006168:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	78db      	ldrb	r3, [r3, #3]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d128      	bne.n	80061c4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800617e:	2b00      	cmp	r3, #0
 8006180:	d110      	bne.n	80061a4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	69ba      	ldr	r2, [r7, #24]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	e00f      	b.n	80061c4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	0151      	lsls	r1, r2, #5
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	440a      	add	r2, r1
 80061ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3720      	adds	r7, #32
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	1ff80000 	.word	0x1ff80000

080061f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b087      	sub	sp, #28
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	4613      	mov	r3, r2
 8006200:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	785b      	ldrb	r3, [r3, #1]
 8006210:	2b01      	cmp	r3, #1
 8006212:	f040 80cd 	bne.w	80063b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	695b      	ldr	r3, [r3, #20]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d132      	bne.n	8006284 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	0151      	lsls	r1, r2, #5
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	440a      	add	r2, r1
 8006234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006238:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800623c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006240:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	0151      	lsls	r1, r2, #5
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	440a      	add	r2, r1
 8006258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800625c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006260:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	015a      	lsls	r2, r3, #5
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	4413      	add	r3, r2
 800626a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	693a      	ldr	r2, [r7, #16]
 8006272:	0151      	lsls	r1, r2, #5
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	440a      	add	r2, r1
 8006278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800627c:	0cdb      	lsrs	r3, r3, #19
 800627e:	04db      	lsls	r3, r3, #19
 8006280:	6113      	str	r3, [r2, #16]
 8006282:	e04e      	b.n	8006322 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	015a      	lsls	r2, r3, #5
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	4413      	add	r3, r2
 800628c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	0151      	lsls	r1, r2, #5
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	440a      	add	r2, r1
 800629a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800629e:	0cdb      	lsrs	r3, r3, #19
 80062a0:	04db      	lsls	r3, r3, #19
 80062a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	0151      	lsls	r1, r2, #5
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	440a      	add	r2, r1
 80062ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	695a      	ldr	r2, [r3, #20]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d903      	bls.n	80062dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006312:	6939      	ldr	r1, [r7, #16]
 8006314:	0148      	lsls	r0, r1, #5
 8006316:	6979      	ldr	r1, [r7, #20]
 8006318:	4401      	add	r1, r0
 800631a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800631e:	4313      	orrs	r3, r2
 8006320:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006322:	79fb      	ldrb	r3, [r7, #7]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d11e      	bne.n	8006366 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d009      	beq.n	8006344 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633c:	461a      	mov	r2, r3
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006362:	6013      	str	r3, [r2, #0]
 8006364:	e092      	b.n	800648c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	0151      	lsls	r1, r2, #5
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	440a      	add	r2, r1
 800637c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006380:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006384:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d07e      	beq.n	800648c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	2101      	movs	r1, #1
 80063a0:	fa01 f303 	lsl.w	r3, r1, r3
 80063a4:	6979      	ldr	r1, [r7, #20]
 80063a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063aa:	4313      	orrs	r3, r2
 80063ac:	634b      	str	r3, [r1, #52]	; 0x34
 80063ae:	e06d      	b.n	800648c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	015a      	lsls	r2, r3, #5
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	4413      	add	r3, r2
 80063b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	0151      	lsls	r1, r2, #5
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	440a      	add	r2, r1
 80063c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ca:	0cdb      	lsrs	r3, r3, #19
 80063cc:	04db      	lsls	r3, r3, #19
 80063ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	0151      	lsls	r1, r2, #5
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	440a      	add	r2, r1
 80063e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063f2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	015a      	lsls	r2, r3, #5
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	4413      	add	r3, r2
 800640c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	0151      	lsls	r1, r2, #5
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	440a      	add	r2, r1
 800641a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800641e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006422:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006430:	691a      	ldr	r2, [r3, #16]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800643a:	6939      	ldr	r1, [r7, #16]
 800643c:	0148      	lsls	r0, r1, #5
 800643e:	6979      	ldr	r1, [r7, #20]
 8006440:	4401      	add	r1, r0
 8006442:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006446:	4313      	orrs	r3, r2
 8006448:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d10d      	bne.n	800646c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d009      	beq.n	800646c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	68d9      	ldr	r1, [r3, #12]
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006468:	460a      	mov	r2, r1
 800646a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	0151      	lsls	r1, r2, #5
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	440a      	add	r2, r1
 8006482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006486:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800648a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	371c      	adds	r7, #28
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800649a:	b480      	push	{r7}
 800649c:	b089      	sub	sp, #36	; 0x24
 800649e:	af00      	add	r7, sp, #0
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	60b9      	str	r1, [r7, #8]
 80064a4:	4611      	mov	r1, r2
 80064a6:	461a      	mov	r2, r3
 80064a8:	460b      	mov	r3, r1
 80064aa:	71fb      	strb	r3, [r7, #7]
 80064ac:	4613      	mov	r3, r2
 80064ae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80064b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d11a      	bne.n	80064f6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80064c0:	88bb      	ldrh	r3, [r7, #4]
 80064c2:	3303      	adds	r3, #3
 80064c4:	089b      	lsrs	r3, r3, #2
 80064c6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80064c8:	2300      	movs	r3, #0
 80064ca:	61bb      	str	r3, [r7, #24]
 80064cc:	e00f      	b.n	80064ee <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	031a      	lsls	r2, r3, #12
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064da:	461a      	mov	r2, r3
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6013      	str	r3, [r2, #0]
      pSrc++;
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	3304      	adds	r3, #4
 80064e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	3301      	adds	r3, #1
 80064ec:	61bb      	str	r3, [r7, #24]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d3eb      	bcc.n	80064ce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3724      	adds	r7, #36	; 0x24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr

08006504 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006504:	b480      	push	{r7}
 8006506:	b089      	sub	sp, #36	; 0x24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	4613      	mov	r3, r2
 8006510:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	3303      	adds	r3, #3
 800651e:	089b      	lsrs	r3, r3, #2
 8006520:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006522:	2300      	movs	r3, #0
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	e00b      	b.n	8006540 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	601a      	str	r2, [r3, #0]
    pDest++;
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	3304      	adds	r3, #4
 8006538:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	3301      	adds	r3, #1
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	429a      	cmp	r2, r3
 8006546:	d3ef      	bcc.n	8006528 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006548:	69fb      	ldr	r3, [r7, #28]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3724      	adds	r7, #36	; 0x24
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr

08006556 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006556:	b480      	push	{r7}
 8006558:	b085      	sub	sp, #20
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	785b      	ldrb	r3, [r3, #1]
 800656e:	2b01      	cmp	r3, #1
 8006570:	d12c      	bne.n	80065cc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	db12      	blt.n	80065aa <USB_EPSetStall+0x54>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00f      	beq.n	80065aa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4413      	add	r3, r2
 8006592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80065a8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	e02b      	b.n	8006624 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	015a      	lsls	r2, r3, #5
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	db12      	blt.n	8006604 <USB_EPSetStall+0xae>
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00f      	beq.n	8006604 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006602:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	015a      	lsls	r2, r3, #5
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4413      	add	r3, r2
 800660c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	0151      	lsls	r1, r2, #5
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	440a      	add	r2, r1
 800661a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800661e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006622:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006632:	b480      	push	{r7}
 8006634:	b085      	sub	sp, #20
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	785b      	ldrb	r3, [r3, #1]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d128      	bne.n	80066a0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	0151      	lsls	r1, r2, #5
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	440a      	add	r2, r1
 8006664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006668:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800666c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	78db      	ldrb	r3, [r3, #3]
 8006672:	2b03      	cmp	r3, #3
 8006674:	d003      	beq.n	800667e <USB_EPClearStall+0x4c>
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	78db      	ldrb	r3, [r3, #3]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d138      	bne.n	80066f0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	015a      	lsls	r2, r3, #5
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4413      	add	r3, r2
 8006686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	0151      	lsls	r1, r2, #5
 8006690:	68fa      	ldr	r2, [r7, #12]
 8006692:	440a      	add	r2, r1
 8006694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	e027      	b.n	80066f0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	0151      	lsls	r1, r2, #5
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	440a      	add	r2, r1
 80066b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80066be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	78db      	ldrb	r3, [r3, #3]
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d003      	beq.n	80066d0 <USB_EPClearStall+0x9e>
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	78db      	ldrb	r3, [r3, #3]
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d10f      	bne.n	80066f0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	0151      	lsls	r1, r2, #5
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	440a      	add	r2, r1
 80066e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066ee:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800671c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006720:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	011b      	lsls	r3, r3, #4
 800672e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006732:	68f9      	ldr	r1, [r7, #12]
 8006734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006738:	4313      	orrs	r3, r2
 800673a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3714      	adds	r7, #20
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b084      	sub	sp, #16
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006764:	f023 0302 	bic.w	r3, r3, #2
 8006768:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800676a:	2003      	movs	r0, #3
 800676c:	f7fa ffd4 	bl	8001718 <HAL_Delay>

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b084      	sub	sp, #16
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006794:	f043 0302 	orr.w	r3, r3, #2
 8006798:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800679a:	2003      	movs	r0, #3
 800679c:	f7fa ffbc 	bl	8001718 <HAL_Delay>

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4013      	ands	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80067c2:	68fb      	ldr	r3, [r7, #12]
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3714      	adds	r7, #20
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	4013      	ands	r3, r2
 80067f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	0c1b      	lsrs	r3, r3, #16
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	4013      	ands	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	b29b      	uxth	r3, r3
}
 800682c:	4618      	mov	r0, r3
 800682e:	3714      	adds	r7, #20
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	460b      	mov	r3, r1
 8006842:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006848:	78fb      	ldrb	r3, [r7, #3]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	4013      	ands	r3, r2
 8006864:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006866:	68bb      	ldr	r3, [r7, #8]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006896:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	fa22 f303 	lsr.w	r3, r2, r3
 80068a4:	01db      	lsls	r3, r3, #7
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	015a      	lsls	r2, r3, #5
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	4413      	add	r3, r2
 80068b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4013      	ands	r3, r2
 80068c0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80068c2:	68bb      	ldr	r3, [r7, #8]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	f003 0301 	and.w	r3, r3, #1
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006906:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800690a:	f023 0307 	bic.w	r3, r3, #7
 800690e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800691e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006922:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
	...

08006934 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	460b      	mov	r3, r1
 800693e:	607a      	str	r2, [r7, #4]
 8006940:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	333c      	adds	r3, #60	; 0x3c
 800694a:	3304      	adds	r3, #4
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	4a26      	ldr	r2, [pc, #152]	; (80069ec <USB_EP0_OutStart+0xb8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d90a      	bls.n	800696e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006968:	d101      	bne.n	800696e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800696a:	2300      	movs	r3, #0
 800696c:	e037      	b.n	80069de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006974:	461a      	mov	r2, r3
 8006976:	2300      	movs	r3, #0
 8006978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006988:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800698c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699c:	f043 0318 	orr.w	r3, r3, #24
 80069a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80069b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80069b6:	7afb      	ldrb	r3, [r7, #11]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d10f      	bne.n	80069dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	461a      	mov	r2, r3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80069da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	4f54300a 	.word	0x4f54300a

080069f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	3301      	adds	r3, #1
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	4a13      	ldr	r2, [pc, #76]	; (8006a54 <USB_CoreReset+0x64>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d901      	bls.n	8006a0e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e01b      	b.n	8006a46 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	daf2      	bge.n	80069fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a16:	2300      	movs	r3, #0
 8006a18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	f043 0201 	orr.w	r2, r3, #1
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4a09      	ldr	r2, [pc, #36]	; (8006a54 <USB_CoreReset+0x64>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d901      	bls.n	8006a38 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e006      	b.n	8006a46 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d0f0      	beq.n	8006a26 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	00030d40 	.word	0x00030d40

08006a58 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	460b      	mov	r3, r1
 8006a62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006a64:	f44f 701d 	mov.w	r0, #628	; 0x274
 8006a68:	f003 fa5a 	bl	8009f20 <malloc>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d105      	bne.n	8006a82 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e034      	b.n	8006aec <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	68fa      	ldr	r2, [r7, #12]
 8006a86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	7c1b      	ldrb	r3, [r3, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d115      	bne.n	8006abe <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006a92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a96:	2202      	movs	r2, #2
 8006a98:	2101      	movs	r1, #1
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f003 f8a7 	bl	8009bee <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aac:	2202      	movs	r2, #2
 8006aae:	2181      	movs	r1, #129	; 0x81
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f003 f89c 	bl	8009bee <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	871a      	strh	r2, [r3, #56]	; 0x38
 8006abc:	e012      	b.n	8006ae4 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006abe:	2340      	movs	r3, #64	; 0x40
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f003 f892 	bl	8009bee <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006ad2:	2340      	movs	r3, #64	; 0x40
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	2181      	movs	r1, #129	; 0x81
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f003 f888 	bl	8009bee <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f98e 	bl	8006e06 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	460b      	mov	r3, r1
 8006afe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006b00:	2101      	movs	r1, #1
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f003 f899 	bl	8009c3a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006b10:	2181      	movs	r1, #129	; 0x81
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f003 f891 	bl	8009c3a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f9c7 	bl	8006eb2 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d009      	beq.n	8006b42 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b34:	4618      	mov	r0, r3
 8006b36:	f003 f9fb 	bl	8009f30 <free>
    pdev->pClassData = NULL;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b5c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006b62:	2300      	movs	r3, #0
 8006b64:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d04d      	beq.n	8006c0e <USBD_MSC_Setup+0xc2>
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	f040 80c6 	bne.w	8006d04 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	785b      	ldrb	r3, [r3, #1]
 8006b7c:	2bfe      	cmp	r3, #254	; 0xfe
 8006b7e:	d002      	beq.n	8006b86 <USBD_MSC_Setup+0x3a>
 8006b80:	2bff      	cmp	r3, #255	; 0xff
 8006b82:	d024      	beq.n	8006bce <USBD_MSC_Setup+0x82>
 8006b84:	e03b      	b.n	8006bfe <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	885b      	ldrh	r3, [r3, #2]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d118      	bne.n	8006bc0 <USBD_MSC_Setup+0x74>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	88db      	ldrh	r3, [r3, #6]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d114      	bne.n	8006bc0 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	da0f      	bge.n	8006bc0 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	4798      	blx	r3
 8006baa:	4603      	mov	r3, r0
 8006bac:	461a      	mov	r2, r3
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f002 fc58 	bl	800946e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006bbe:	e025      	b.n	8006c0c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f002 fbe2 	bl	800938c <USBD_CtlError>
        ret = USBD_FAIL;
 8006bc8:	2303      	movs	r3, #3
 8006bca:	75fb      	strb	r3, [r7, #23]
      break;
 8006bcc:	e01e      	b.n	8006c0c <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	885b      	ldrh	r3, [r3, #2]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10c      	bne.n	8006bf0 <USBD_MSC_Setup+0xa4>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	88db      	ldrh	r3, [r3, #6]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d108      	bne.n	8006bf0 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	db03      	blt.n	8006bf0 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f940 	bl	8006e6e <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006bee:	e00d      	b.n	8006c0c <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f002 fbca 	bl	800938c <USBD_CtlError>
        ret = USBD_FAIL;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfc:	e006      	b.n	8006c0c <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8006bfe:	6839      	ldr	r1, [r7, #0]
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f002 fbc3 	bl	800938c <USBD_CtlError>
      ret = USBD_FAIL;
 8006c06:	2303      	movs	r3, #3
 8006c08:	75fb      	strb	r3, [r7, #23]
      break;
 8006c0a:	bf00      	nop
    }
    break;
 8006c0c:	e081      	b.n	8006d12 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	785b      	ldrb	r3, [r3, #1]
 8006c12:	2b0b      	cmp	r3, #11
 8006c14:	d86d      	bhi.n	8006cf2 <USBD_MSC_Setup+0x1a6>
 8006c16:	a201      	add	r2, pc, #4	; (adr r2, 8006c1c <USBD_MSC_Setup+0xd0>)
 8006c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1c:	08006c4d 	.word	0x08006c4d
 8006c20:	08006cc3 	.word	0x08006cc3
 8006c24:	08006cf3 	.word	0x08006cf3
 8006c28:	08006cf3 	.word	0x08006cf3
 8006c2c:	08006cf3 	.word	0x08006cf3
 8006c30:	08006cf3 	.word	0x08006cf3
 8006c34:	08006cf3 	.word	0x08006cf3
 8006c38:	08006cf3 	.word	0x08006cf3
 8006c3c:	08006cf3 	.word	0x08006cf3
 8006c40:	08006cf3 	.word	0x08006cf3
 8006c44:	08006c75 	.word	0x08006c75
 8006c48:	08006c9d 	.word	0x08006c9d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d107      	bne.n	8006c66 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c56:	f107 030e 	add.w	r3, r7, #14
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f002 fc05 	bl	800946e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006c64:	e04d      	b.n	8006d02 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8006c66:	6839      	ldr	r1, [r7, #0]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f002 fb8f 	bl	800938c <USBD_CtlError>
        ret = USBD_FAIL;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	75fb      	strb	r3, [r7, #23]
      break;
 8006c72:	e046      	b.n	8006d02 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d107      	bne.n	8006c8e <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	3304      	adds	r3, #4
 8006c82:	2201      	movs	r2, #1
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f002 fbf1 	bl	800946e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006c8c:	e039      	b.n	8006d02 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f002 fb7b 	bl	800938c <USBD_CtlError>
        ret = USBD_FAIL;
 8006c96:	2303      	movs	r3, #3
 8006c98:	75fb      	strb	r3, [r7, #23]
      break;
 8006c9a:	e032      	b.n	8006d02 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d106      	bne.n	8006cb4 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	885b      	ldrh	r3, [r3, #2]
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	461a      	mov	r2, r3
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006cb2:	e026      	b.n	8006d02 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f002 fb68 	bl	800938c <USBD_CtlError>
        ret = USBD_FAIL;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc0:	e01f      	b.n	8006d02 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d119      	bne.n	8006d00 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	885b      	ldrh	r3, [r3, #2]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d115      	bne.n	8006d00 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	889b      	ldrh	r3, [r3, #4]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f002 ffcb 	bl	8009c78 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	889b      	ldrh	r3, [r3, #4]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	4619      	mov	r1, r3
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 fa5a 	bl	80071a4 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8006cf0:	e006      	b.n	8006d00 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8006cf2:	6839      	ldr	r1, [r7, #0]
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f002 fb49 	bl	800938c <USBD_CtlError>
      ret = USBD_FAIL;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cfe:	e000      	b.n	8006d02 <USBD_MSC_Setup+0x1b6>
      break;
 8006d00:	bf00      	nop
    }
    break;
 8006d02:	e006      	b.n	8006d12 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f002 fb40 	bl	800938c <USBD_CtlError>
    ret = USBD_FAIL;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	75fb      	strb	r3, [r7, #23]
    break;
 8006d10:	bf00      	nop
  }

  return (uint8_t)ret;
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006d28:	78fb      	ldrb	r3, [r7, #3]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 f8d1 	bl	8006ed4 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	460b      	mov	r3, r1
 8006d46:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8006d48:	78fb      	ldrb	r3, [r7, #3]
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f8f2 	bl	8006f36 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2220      	movs	r2, #32
 8006d68:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8006d6a:	4b03      	ldr	r3, [pc, #12]	; (8006d78 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	20000044 	.word	0x20000044

08006d7c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2220      	movs	r2, #32
 8006d88:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8006d8a:	4b03      	ldr	r3, [pc, #12]	; (8006d98 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	20000064 	.word	0x20000064

08006d9c <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8006daa:	4b03      	ldr	r3, [pc, #12]	; (8006db8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr
 8006db8:	20000084 	.word	0x20000084

08006dbc <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	220a      	movs	r2, #10
 8006dc8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8006dca:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	200000a4 	.word	0x200000a4

08006ddc <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e004      	b.n	8006dfa <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e14:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2000      	movs	r0, #0
 8006e44:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8006e46:	2101      	movs	r1, #1
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f002 ff15 	bl	8009c78 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8006e4e:	2181      	movs	r1, #129	; 0x81
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f002 ff11 	bl	8009c78 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006e5c:	231f      	movs	r3, #31
 8006e5e:	2101      	movs	r1, #1
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f002 ffd2 	bl	8009e0a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8006e66:	bf00      	nop
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e7c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8006e8a:	2181      	movs	r1, #129	; 0x81
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f002 ff31 	bl	8009cf4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8006e92:	2101      	movs	r1, #1
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f002 ff2d 	bl	8009cf4 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8006ea0:	231f      	movs	r3, #31
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f002 ffb0 	bl	8009e0a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8006eaa:	bf00      	nop
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}

08006eb2 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b085      	sub	sp, #20
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ec0:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	721a      	strb	r2, [r3, #8]
}
 8006ec8:	bf00      	nop
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ee6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	7a1b      	ldrb	r3, [r3, #8]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d004      	beq.n	8006efa <MSC_BOT_DataIn+0x26>
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	db19      	blt.n	8006f28 <MSC_BOT_DataIn+0x54>
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	dc17      	bgt.n	8006f28 <MSC_BOT_DataIn+0x54>
 8006ef8:	e011      	b.n	8006f1e <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006f06:	461a      	mov	r2, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 f973 	bl	80071f4 <SCSI_ProcessCmd>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	da0b      	bge.n	8006f2c <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006f14:	2101      	movs	r1, #1
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f8ea 	bl	80070f0 <MSC_BOT_SendCSW>
    }
    break;
 8006f1c:	e006      	b.n	8006f2c <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8006f1e:	2100      	movs	r1, #0
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 f8e5 	bl	80070f0 <MSC_BOT_SendCSW>
    break;
 8006f26:	e002      	b.n	8006f2e <MSC_BOT_DataIn+0x5a>

  default:
    break;
 8006f28:	bf00      	nop
 8006f2a:	e000      	b.n	8006f2e <MSC_BOT_DataIn+0x5a>
    break;
 8006f2c:	bf00      	nop
  }
}
 8006f2e:	bf00      	nop
 8006f30:	3710      	adds	r7, #16
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f48:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	7a1b      	ldrb	r3, [r3, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <MSC_BOT_DataOut+0x22>
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d004      	beq.n	8006f60 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8006f56:	e015      	b.n	8006f84 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f817 	bl	8006f8c <MSC_BOT_CBW_Decode>
      break;
 8006f5e:	e011      	b.n	8006f84 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f940 	bl	80071f4 <SCSI_ProcessCmd>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	da03      	bge.n	8006f82 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8006f7a:	2101      	movs	r1, #1
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f8b7 	bl	80070f0 <MSC_BOT_SendCSW>
      break;
 8006f82:	bf00      	nop
  }
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f9a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f002 ff48 	bl	8009e4c <USBD_LL_GetRxDataSize>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b1f      	cmp	r3, #31
 8006fc0:	d114      	bne.n	8006fec <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8006fc8:	4a32      	ldr	r2, [pc, #200]	; (8007094 <MSC_BOT_CBW_Decode+0x108>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d10e      	bne.n	8006fec <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d809      	bhi.n	8006fec <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8006fe8:	2b10      	cmp	r3, #16
 8006fea:	d90e      	bls.n	800700a <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8006ff2:	2320      	movs	r3, #32
 8006ff4:	2205      	movs	r2, #5
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fcc9 	bl	800798e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2202      	movs	r2, #2
 8007000:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f8a0 	bl	8007148 <MSC_BOT_Abort>
 8007008:	e041      	b.n	800708e <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8007016:	461a      	mov	r2, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 f8eb 	bl	80071f4 <SCSI_ProcessCmd>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	da0c      	bge.n	800703e <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	7a1b      	ldrb	r3, [r3, #8]
 8007028:	2b05      	cmp	r3, #5
 800702a:	d104      	bne.n	8007036 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800702c:	2101      	movs	r1, #1
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f85e 	bl	80070f0 <MSC_BOT_SendCSW>
 8007034:	e02b      	b.n	800708e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f886 	bl	8007148 <MSC_BOT_Abort>
 800703c:	e027      	b.n	800708e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	7a1b      	ldrb	r3, [r3, #8]
 8007042:	2b02      	cmp	r3, #2
 8007044:	d022      	beq.n	800708c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800704a:	2b01      	cmp	r3, #1
 800704c:	d01e      	beq.n	800708c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007052:	2b03      	cmp	r3, #3
 8007054:	d01a      	beq.n	800708c <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f103 0110 	add.w	r1, r3, #16
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	461a      	mov	r2, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f814 	bl	8007098 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8007070:	e00d      	b.n	800708e <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d104      	bne.n	8007084 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800707a:	2100      	movs	r1, #0
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f837 	bl	80070f0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8007082:	e004      	b.n	800708e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f85f 	bl	8007148 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800708a:	e000      	b.n	800708e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800708c:	bf00      	nop
    }
  }
}
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	43425355 	.word	0x43425355

08007098 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070aa:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	4293      	cmp	r3, r2
 80070b6:	bf28      	it	cs
 80070b8:	4613      	movcs	r3, r2
 80070ba:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	1ad2      	subs	r2, r2, r3
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2204      	movs	r2, #4
 80070d8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	2181      	movs	r1, #129	; 0x81
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f002 fe71 	bl	8009dc8 <USBD_LL_Transmit>
}
 80070e6:	bf00      	nop
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007102:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4a0f      	ldr	r2, [pc, #60]	; (8007144 <MSC_BOT_SendCSW+0x54>)
 8007108:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	78fa      	ldrb	r2, [r7, #3]
 8007110:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8007120:	230d      	movs	r3, #13
 8007122:	2181      	movs	r1, #129	; 0x81
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f002 fe4f 	bl	8009dc8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8007130:	231f      	movs	r3, #31
 8007132:	2101      	movs	r1, #1
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f002 fe68 	bl	8009e0a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800713a:	bf00      	nop
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	53425355 	.word	0x53425355

08007148 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007156:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10c      	bne.n	800717c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007168:	2b00      	cmp	r3, #0
 800716a:	d007      	beq.n	800717c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007170:	2b00      	cmp	r3, #0
 8007172:	d103      	bne.n	800717c <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007174:	2101      	movs	r1, #1
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f002 fd9d 	bl	8009cb6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800717c:	2181      	movs	r1, #129	; 0x81
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f002 fd99 	bl	8009cb6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	7a5b      	ldrb	r3, [r3, #9]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d107      	bne.n	800719c <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800718c:	2181      	movs	r1, #129	; 0x81
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f002 fd91 	bl	8009cb6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007194:	2101      	movs	r1, #1
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f002 fd8d 	bl	8009cb6 <USBD_LL_StallEP>
  }
}
 800719c:	bf00      	nop
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071b6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	7a5b      	ldrb	r3, [r3, #9]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d108      	bne.n	80071d2 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 80071c0:	2181      	movs	r1, #129	; 0x81
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f002 fd77 	bl	8009cb6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 80071c8:	2101      	movs	r1, #1
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f002 fd73 	bl	8009cb6 <USBD_LL_StallEP>
 80071d0:	e00d      	b.n	80071ee <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80071d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	da08      	bge.n	80071ec <MSC_BOT_CplClrFeature+0x48>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	7a5b      	ldrb	r3, [r3, #9]
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d004      	beq.n	80071ec <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80071e2:	2101      	movs	r1, #1
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff ff83 	bl	80070f0 <MSC_BOT_SendCSW>
 80071ea:	e000      	b.n	80071ee <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 80071ec:	bf00      	nop
  }
}
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	460b      	mov	r3, r1
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007208:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b25      	cmp	r3, #37	; 0x25
 8007210:	d06e      	beq.n	80072f0 <SCSI_ProcessCmd+0xfc>
 8007212:	2b25      	cmp	r3, #37	; 0x25
 8007214:	dc11      	bgt.n	800723a <SCSI_ProcessCmd+0x46>
 8007216:	2b1a      	cmp	r3, #26
 8007218:	d04f      	beq.n	80072ba <SCSI_ProcessCmd+0xc6>
 800721a:	2b1a      	cmp	r3, #26
 800721c:	dc06      	bgt.n	800722c <SCSI_ProcessCmd+0x38>
 800721e:	2b03      	cmp	r3, #3
 8007220:	d027      	beq.n	8007272 <SCSI_ProcessCmd+0x7e>
 8007222:	2b12      	cmp	r3, #18
 8007224:	d02e      	beq.n	8007284 <SCSI_ProcessCmd+0x90>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d01a      	beq.n	8007260 <SCSI_ProcessCmd+0x6c>
 800722a:	e0a0      	b.n	800736e <SCSI_ProcessCmd+0x17a>
 800722c:	2b1e      	cmp	r3, #30
 800722e:	d03b      	beq.n	80072a8 <SCSI_ProcessCmd+0xb4>
 8007230:	2b23      	cmp	r3, #35	; 0x23
 8007232:	d054      	beq.n	80072de <SCSI_ProcessCmd+0xea>
 8007234:	2b1b      	cmp	r3, #27
 8007236:	d02e      	beq.n	8007296 <SCSI_ProcessCmd+0xa2>
 8007238:	e099      	b.n	800736e <SCSI_ProcessCmd+0x17a>
 800723a:	2b5a      	cmp	r3, #90	; 0x5a
 800723c:	d046      	beq.n	80072cc <SCSI_ProcessCmd+0xd8>
 800723e:	2b5a      	cmp	r3, #90	; 0x5a
 8007240:	dc07      	bgt.n	8007252 <SCSI_ProcessCmd+0x5e>
 8007242:	2b2a      	cmp	r3, #42	; 0x2a
 8007244:	d078      	beq.n	8007338 <SCSI_ProcessCmd+0x144>
 8007246:	2b2f      	cmp	r3, #47	; 0x2f
 8007248:	f000 8088 	beq.w	800735c <SCSI_ProcessCmd+0x168>
 800724c:	2b28      	cmp	r3, #40	; 0x28
 800724e:	d061      	beq.n	8007314 <SCSI_ProcessCmd+0x120>
 8007250:	e08d      	b.n	800736e <SCSI_ProcessCmd+0x17a>
 8007252:	2ba8      	cmp	r3, #168	; 0xa8
 8007254:	d067      	beq.n	8007326 <SCSI_ProcessCmd+0x132>
 8007256:	2baa      	cmp	r3, #170	; 0xaa
 8007258:	d077      	beq.n	800734a <SCSI_ProcessCmd+0x156>
 800725a:	2b9e      	cmp	r3, #158	; 0x9e
 800725c:	d051      	beq.n	8007302 <SCSI_ProcessCmd+0x10e>
 800725e:	e086      	b.n	800736e <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8007260:	7afb      	ldrb	r3, [r7, #11]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	4619      	mov	r1, r3
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 f893 	bl	8007392 <SCSI_TestUnitReady>
 800726c:	4603      	mov	r3, r0
 800726e:	75fb      	strb	r3, [r7, #23]
    break;
 8007270:	e089      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8007272:	7afb      	ldrb	r3, [r7, #11]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	4619      	mov	r1, r3
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f000 fb0f 	bl	800789c <SCSI_RequestSense>
 800727e:	4603      	mov	r3, r0
 8007280:	75fb      	strb	r3, [r7, #23]
    break;
 8007282:	e080      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8007284:	7afb      	ldrb	r3, [r7, #11]
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	4619      	mov	r1, r3
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f8cc 	bl	8007428 <SCSI_Inquiry>
 8007290:	4603      	mov	r3, r0
 8007292:	75fb      	strb	r3, [r7, #23]
    break;
 8007294:	e077      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8007296:	7afb      	ldrb	r3, [r7, #11]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	4619      	mov	r1, r3
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fbb9 	bl	8007a14 <SCSI_StartStopUnit>
 80072a2:	4603      	mov	r3, r0
 80072a4:	75fb      	strb	r3, [r7, #23]
    break;
 80072a6:	e06e      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80072a8:	7afb      	ldrb	r3, [r7, #11]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	4619      	mov	r1, r3
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 fbfb 	bl	8007aaa <SCSI_AllowPreventRemovable>
 80072b4:	4603      	mov	r3, r0
 80072b6:	75fb      	strb	r3, [r7, #23]
    break;
 80072b8:	e065      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 80072ba:	7afb      	ldrb	r3, [r7, #11]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	4619      	mov	r1, r3
 80072c0:	68f8      	ldr	r0, [r7, #12]
 80072c2:	f000 fa9f 	bl	8007804 <SCSI_ModeSense6>
 80072c6:	4603      	mov	r3, r0
 80072c8:	75fb      	strb	r3, [r7, #23]
    break;
 80072ca:	e05c      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 80072cc:	7afb      	ldrb	r3, [r7, #11]
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	4619      	mov	r1, r3
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	f000 fabc 	bl	8007850 <SCSI_ModeSense10>
 80072d8:	4603      	mov	r3, r0
 80072da:	75fb      	strb	r3, [r7, #23]
    break;
 80072dc:	e053      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80072de:	7afb      	ldrb	r3, [r7, #11]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	4619      	mov	r1, r3
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fa20 	bl	800772a <SCSI_ReadFormatCapacity>
 80072ea:	4603      	mov	r3, r0
 80072ec:	75fb      	strb	r3, [r7, #23]
    break;
 80072ee:	e04a      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80072f0:	7afb      	ldrb	r3, [r7, #11]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	4619      	mov	r1, r3
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 f904 	bl	8007504 <SCSI_ReadCapacity10>
 80072fc:	4603      	mov	r3, r0
 80072fe:	75fb      	strb	r3, [r7, #23]
    break;
 8007300:	e041      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8007302:	7afb      	ldrb	r3, [r7, #11]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	4619      	mov	r1, r3
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f96a 	bl	80075e2 <SCSI_ReadCapacity16>
 800730e:	4603      	mov	r3, r0
 8007310:	75fb      	strb	r3, [r7, #23]
    break;
 8007312:	e038      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8007314:	7afb      	ldrb	r3, [r7, #11]
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	4619      	mov	r1, r3
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 fbe8 	bl	8007af0 <SCSI_Read10>
 8007320:	4603      	mov	r3, r0
 8007322:	75fb      	strb	r3, [r7, #23]
    break;
 8007324:	e02f      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8007326:	7afb      	ldrb	r3, [r7, #11]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	4619      	mov	r1, r3
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 fc79 	bl	8007c24 <SCSI_Read12>
 8007332:	4603      	mov	r3, r0
 8007334:	75fb      	strb	r3, [r7, #23]
    break;
 8007336:	e026      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8007338:	7afb      	ldrb	r3, [r7, #11]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	4619      	mov	r1, r3
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 fd15 	bl	8007d6e <SCSI_Write10>
 8007344:	4603      	mov	r3, r0
 8007346:	75fb      	strb	r3, [r7, #23]
    break;
 8007348:	e01d      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800734a:	7afb      	ldrb	r3, [r7, #11]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	4619      	mov	r1, r3
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f000 fdcb 	bl	8007eec <SCSI_Write12>
 8007356:	4603      	mov	r3, r0
 8007358:	75fb      	strb	r3, [r7, #23]
    break;
 800735a:	e014      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800735c:	7afb      	ldrb	r3, [r7, #11]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	4619      	mov	r1, r3
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f000 fe91 	bl	800808a <SCSI_Verify10>
 8007368:	4603      	mov	r3, r0
 800736a:	75fb      	strb	r3, [r7, #23]
    break;
 800736c:	e00b      	b.n	8007386 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800736e:	7af9      	ldrb	r1, [r7, #11]
 8007370:	2320      	movs	r3, #32
 8007372:	2205      	movs	r2, #5
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 fb0a 	bl	800798e <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	2202      	movs	r2, #2
 800737e:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8007380:	23ff      	movs	r3, #255	; 0xff
 8007382:	75fb      	strb	r3, [r7, #23]
    break;
 8007384:	bf00      	nop
  }

  return ret;
 8007386:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b086      	sub	sp, #24
 8007396:	af00      	add	r7, sp, #0
 8007398:	60f8      	str	r0, [r7, #12]
 800739a:	460b      	mov	r3, r1
 800739c:	607a      	str	r2, [r7, #4]
 800739e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073a6:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80073b8:	2320      	movs	r3, #32
 80073ba:	2205      	movs	r2, #5
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 fae6 	bl	800798e <SCSI_SenseCode>

    return -1;
 80073c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073c6:	e02a      	b.n	800741e <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d10b      	bne.n	80073ea <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80073d2:	7af9      	ldrb	r1, [r7, #11]
 80073d4:	233a      	movs	r3, #58	; 0x3a
 80073d6:	2202      	movs	r2, #2
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 fad8 	bl	800798e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2205      	movs	r2, #5
 80073e2:	721a      	strb	r2, [r3, #8]
    return -1;
 80073e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073e8:	e019      	b.n	800741e <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	7afa      	ldrb	r2, [r7, #11]
 80073f4:	4610      	mov	r0, r2
 80073f6:	4798      	blx	r3
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80073fe:	7af9      	ldrb	r1, [r7, #11]
 8007400:	233a      	movs	r3, #58	; 0x3a
 8007402:	2202      	movs	r2, #2
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 fac2 	bl	800798e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2205      	movs	r2, #5
 800740e:	721a      	strb	r2, [r3, #8]

    return -1;
 8007410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007414:	e003      	b.n	800741e <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2200      	movs	r2, #0
 800741a:	60da      	str	r2, [r3, #12]

  return 0;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
	...

08007428 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b088      	sub	sp, #32
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	460b      	mov	r3, r1
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800743c:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800744e:	2320      	movs	r3, #32
 8007450:	2205      	movs	r2, #5
 8007452:	68f8      	ldr	r0, [r7, #12]
 8007454:	f000 fa9b 	bl	800798e <SCSI_SenseCode>
    return -1;
 8007458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800745c:	e04a      	b.n	80074f4 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3301      	adds	r3, #1
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d020      	beq.n	80074ae <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	3302      	adds	r3, #2
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d105      	bne.n	8007482 <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8007476:	2206      	movs	r2, #6
 8007478:	4920      	ldr	r1, [pc, #128]	; (80074fc <SCSI_Inquiry+0xd4>)
 800747a:	69b8      	ldr	r0, [r7, #24]
 800747c:	f000 ff50 	bl	8008320 <SCSI_UpdateBotData>
 8007480:	e037      	b.n	80074f2 <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	3302      	adds	r3, #2
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	2b80      	cmp	r3, #128	; 0x80
 800748a:	d105      	bne.n	8007498 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800748c:	2208      	movs	r2, #8
 800748e:	491c      	ldr	r1, [pc, #112]	; (8007500 <SCSI_Inquiry+0xd8>)
 8007490:	69b8      	ldr	r0, [r7, #24]
 8007492:	f000 ff45 	bl	8008320 <SCSI_UpdateBotData>
 8007496:	e02c      	b.n	80074f2 <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800749e:	2324      	movs	r3, #36	; 0x24
 80074a0:	2205      	movs	r2, #5
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	f000 fa73 	bl	800798e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80074a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074ac:	e022      	b.n	80074f4 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074b4:	69d9      	ldr	r1, [r3, #28]
 80074b6:	7afa      	ldrb	r2, [r7, #11]
 80074b8:	4613      	mov	r3, r2
 80074ba:	00db      	lsls	r3, r3, #3
 80074bc:	4413      	add	r3, r2
 80074be:	009b      	lsls	r3, r3, #2
 80074c0:	440b      	add	r3, r1
 80074c2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	3304      	adds	r3, #4
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	3305      	adds	r3, #5
 80074ce:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3304      	adds	r3, #4
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	8bfa      	ldrh	r2, [r7, #30]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d303      	bcc.n	80074e6 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	3304      	adds	r3, #4
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80074e6:	8bfb      	ldrh	r3, [r7, #30]
 80074e8:	461a      	mov	r2, r3
 80074ea:	6979      	ldr	r1, [r7, #20]
 80074ec:	69b8      	ldr	r0, [r7, #24]
 80074ee:	f000 ff17 	bl	8008320 <SCSI_UpdateBotData>
  }

  return 0;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3720      	adds	r7, #32
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	200000b0 	.word	0x200000b0
 8007500:	200000b8 	.word	0x200000b8

08007504 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b086      	sub	sp, #24
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	460b      	mov	r3, r1
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007518:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800752e:	7af8      	ldrb	r0, [r7, #11]
 8007530:	4798      	blx	r3
 8007532:	4603      	mov	r3, r0
 8007534:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007536:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d104      	bne.n	8007548 <SCSI_ReadCapacity10+0x44>
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007544:	2b02      	cmp	r3, #2
 8007546:	d108      	bne.n	800755a <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007548:	7af9      	ldrb	r1, [r7, #11]
 800754a:	233a      	movs	r3, #58	; 0x3a
 800754c:	2202      	movs	r2, #2
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f000 fa1d 	bl	800798e <SCSI_SenseCode>
    return -1;
 8007554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007558:	e03f      	b.n	80075da <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007560:	3b01      	subs	r3, #1
 8007562:	0e1b      	lsrs	r3, r3, #24
 8007564:	b2da      	uxtb	r2, r3
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007570:	3b01      	subs	r3, #1
 8007572:	0c1b      	lsrs	r3, r3, #16
 8007574:	b2da      	uxtb	r2, r3
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007580:	3b01      	subs	r3, #1
 8007582:	0a1b      	lsrs	r3, r3, #8
 8007584:	b2da      	uxtb	r2, r3
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007590:	b2db      	uxtb	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b2da      	uxtb	r2, r3
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80075a0:	161b      	asrs	r3, r3, #24
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80075ae:	141b      	asrs	r3, r3, #16
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80075bc:	0a1b      	lsrs	r3, r3, #8
 80075be:	b29b      	uxth	r3, r3
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2208      	movs	r2, #8
 80075d6:	60da      	str	r2, [r3, #12]

  return 0;
 80075d8:	2300      	movs	r3, #0

}
 80075da:	4618      	mov	r0, r3
 80075dc:	3718      	adds	r7, #24
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b088      	sub	sp, #32
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	460b      	mov	r3, r1
 80075ec:	607a      	str	r2, [r7, #4]
 80075ee:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80075f6:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	69ba      	ldr	r2, [r7, #24]
 8007602:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800760c:	7af8      	ldrb	r0, [r7, #11]
 800760e:	4798      	blx	r3
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007614:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d104      	bne.n	8007626 <SCSI_ReadCapacity16+0x44>
 800761c:	69bb      	ldr	r3, [r7, #24]
 800761e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007622:	2b02      	cmp	r3, #2
 8007624:	d108      	bne.n	8007638 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007626:	7af9      	ldrb	r1, [r7, #11]
 8007628:	233a      	movs	r3, #58	; 0x3a
 800762a:	2202      	movs	r2, #2
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f000 f9ae 	bl	800798e <SCSI_SenseCode>
    return -1;
 8007632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007636:	e074      	b.n	8007722 <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	330a      	adds	r3, #10
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	330b      	adds	r3, #11
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007648:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	330c      	adds	r3, #12
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007652:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	320d      	adds	r2, #13
 8007658:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800765a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007660:	2300      	movs	r3, #0
 8007662:	77fb      	strb	r3, [r7, #31]
 8007664:	e007      	b.n	8007676 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 8007666:	7ffb      	ldrb	r3, [r7, #31]
 8007668:	69ba      	ldr	r2, [r7, #24]
 800766a:	4413      	add	r3, r2
 800766c:	2200      	movs	r2, #0
 800766e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8007670:	7ffb      	ldrb	r3, [r7, #31]
 8007672:	3301      	adds	r3, #1
 8007674:	77fb      	strb	r3, [r7, #31]
 8007676:	7ffa      	ldrb	r2, [r7, #31]
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	429a      	cmp	r2, r3
 800767e:	d3f2      	bcc.n	8007666 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007686:	3b01      	subs	r3, #1
 8007688:	0e1b      	lsrs	r3, r3, #24
 800768a:	b2da      	uxtb	r2, r3
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007696:	3b01      	subs	r3, #1
 8007698:	0c1b      	lsrs	r3, r3, #16
 800769a:	b2da      	uxtb	r2, r3
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80076a6:	3b01      	subs	r3, #1
 80076a8:	0a1b      	lsrs	r3, r3, #8
 80076aa:	b2da      	uxtb	r2, r3
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	3b01      	subs	r3, #1
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80076c6:	161b      	asrs	r3, r3, #24
 80076c8:	b2da      	uxtb	r2, r3
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80076d4:	141b      	asrs	r3, r3, #16
 80076d6:	b2da      	uxtb	r2, r3
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80076e2:	0a1b      	lsrs	r3, r3, #8
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	330a      	adds	r3, #10
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	330b      	adds	r3, #11
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8007708:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	330c      	adds	r3, #12
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8007712:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	320d      	adds	r2, #13
 8007718:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800771a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	60da      	str	r2, [r3, #12]

  return 0;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3720      	adds	r7, #32
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b088      	sub	sp, #32
 800772e:	af00      	add	r7, sp, #0
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	460b      	mov	r3, r1
 8007734:	607a      	str	r2, [r7, #4]
 8007736:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800773e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f107 0214 	add.w	r2, r7, #20
 800774c:	f107 0110 	add.w	r1, r7, #16
 8007750:	7af8      	ldrb	r0, [r7, #11]
 8007752:	4798      	blx	r3
 8007754:	4603      	mov	r3, r0
 8007756:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007758:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d104      	bne.n	800776a <SCSI_ReadFormatCapacity+0x40>
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007766:	2b02      	cmp	r3, #2
 8007768:	d108      	bne.n	800777c <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800776a:	7af9      	ldrb	r1, [r7, #11]
 800776c:	233a      	movs	r3, #58	; 0x3a
 800776e:	2202      	movs	r2, #2
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 f90c 	bl	800798e <SCSI_SenseCode>
    return -1;
 8007776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800777a:	e03e      	b.n	80077fa <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800777c:	2300      	movs	r3, #0
 800777e:	83fb      	strh	r3, [r7, #30]
 8007780:	e007      	b.n	8007792 <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 8007782:	8bfb      	ldrh	r3, [r7, #30]
 8007784:	69ba      	ldr	r2, [r7, #24]
 8007786:	4413      	add	r3, r2
 8007788:	2200      	movs	r2, #0
 800778a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800778c:	8bfb      	ldrh	r3, [r7, #30]
 800778e:	3301      	adds	r3, #1
 8007790:	83fb      	strh	r3, [r7, #30]
 8007792:	8bfb      	ldrh	r3, [r7, #30]
 8007794:	2b0b      	cmp	r3, #11
 8007796:	d9f4      	bls.n	8007782 <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2208      	movs	r2, #8
 800779c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	0e1b      	lsrs	r3, r3, #24
 80077a4:	b2da      	uxtb	r2, r3
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	0c1b      	lsrs	r3, r3, #16
 80077b0:	b2da      	uxtb	r2, r3
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	0a1b      	lsrs	r3, r3, #8
 80077bc:	b2da      	uxtb	r2, r3
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	3b01      	subs	r3, #1
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	2202      	movs	r2, #2
 80077d2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 80077d4:	8abb      	ldrh	r3, [r7, #20]
 80077d6:	141b      	asrs	r3, r3, #16
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 80077de:	8abb      	ldrh	r3, [r7, #20]
 80077e0:	0a1b      	lsrs	r3, r3, #8
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80077ea:	8abb      	ldrh	r3, [r7, #20]
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	220c      	movs	r2, #12
 80077f6:	60da      	str	r2, [r3, #12]

  return 0;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3720      	adds	r7, #32
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	460b      	mov	r3, r1
 800780e:	607a      	str	r2, [r7, #4]
 8007810:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007818:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800781a:	2317      	movs	r3, #23
 800781c:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3304      	adds	r3, #4
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	b29b      	uxth	r3, r3
 8007826:	8afa      	ldrh	r2, [r7, #22]
 8007828:	429a      	cmp	r2, r3
 800782a:	d303      	bcc.n	8007834 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3304      	adds	r3, #4
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8007834:	8afb      	ldrh	r3, [r7, #22]
 8007836:	461a      	mov	r2, r3
 8007838:	4904      	ldr	r1, [pc, #16]	; (800784c <SCSI_ModeSense6+0x48>)
 800783a:	6938      	ldr	r0, [r7, #16]
 800783c:	f000 fd70 	bl	8008320 <SCSI_UpdateBotData>

  return 0;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3718      	adds	r7, #24
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	200000c0 	.word	0x200000c0

08007850 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	460b      	mov	r3, r1
 800785a:	607a      	str	r2, [r7, #4]
 800785c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007864:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8007866:	231b      	movs	r3, #27
 8007868:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3308      	adds	r3, #8
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	b29b      	uxth	r3, r3
 8007872:	8afa      	ldrh	r2, [r7, #22]
 8007874:	429a      	cmp	r2, r3
 8007876:	d303      	bcc.n	8007880 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	3308      	adds	r3, #8
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8007880:	8afb      	ldrh	r3, [r7, #22]
 8007882:	461a      	mov	r2, r3
 8007884:	4904      	ldr	r1, [pc, #16]	; (8007898 <SCSI_ModeSense10+0x48>)
 8007886:	6938      	ldr	r0, [r7, #16]
 8007888:	f000 fd4a 	bl	8008320 <SCSI_UpdateBotData>

  return 0;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	200000d8 	.word	0x200000d8

0800789c <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	460b      	mov	r3, r1
 80078a6:	607a      	str	r2, [r7, #4]
 80078a8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078b0:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10a      	bne.n	80078d2 <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80078c2:	2320      	movs	r3, #32
 80078c4:	2205      	movs	r2, #5
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 f861 	bl	800798e <SCSI_SenseCode>
    return -1;
 80078cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078d0:	e059      	b.n	8007986 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80078d2:	2300      	movs	r3, #0
 80078d4:	75fb      	strb	r3, [r7, #23]
 80078d6:	e007      	b.n	80078e8 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	4413      	add	r3, r2
 80078de:	2200      	movs	r2, #0
 80078e0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
 80078e4:	3301      	adds	r3, #1
 80078e6:	75fb      	strb	r3, [r7, #23]
 80078e8:	7dfb      	ldrb	r3, [r7, #23]
 80078ea:	2b11      	cmp	r3, #17
 80078ec:	d9f4      	bls.n	80078d8 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	2270      	movs	r2, #112	; 0x70
 80078f2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	220c      	movs	r2, #12
 80078f8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8007906:	429a      	cmp	r2, r3
 8007908:	d02e      	beq.n	8007968 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007910:	461a      	mov	r2, r3
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	3248      	adds	r2, #72	; 0x48
 8007916:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	3348      	adds	r3, #72	; 0x48
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	4413      	add	r3, r2
 800792c:	791a      	ldrb	r2, [r3, #4]
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	3348      	adds	r3, #72	; 0x48
 800793c:	00db      	lsls	r3, r3, #3
 800793e:	4413      	add	r3, r2
 8007940:	795a      	ldrb	r2, [r3, #5]
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800794c:	3301      	adds	r3, #1
 800794e:	b2da      	uxtb	r2, r3
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800795c:	2b04      	cmp	r3, #4
 800795e:	d103      	bne.n	8007968 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	2212      	movs	r2, #18
 800796c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3304      	adds	r3, #4
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b12      	cmp	r3, #18
 8007976:	d805      	bhi.n	8007984 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	3304      	adds	r3, #4
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3718      	adds	r7, #24
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800798e:	b480      	push	{r7}
 8007990:	b085      	sub	sp, #20
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	4608      	mov	r0, r1
 8007998:	4611      	mov	r1, r2
 800799a:	461a      	mov	r2, r3
 800799c:	4603      	mov	r3, r0
 800799e:	70fb      	strb	r3, [r7, #3]
 80079a0:	460b      	mov	r3, r1
 80079a2:	70bb      	strb	r3, [r7, #2]
 80079a4:	4613      	mov	r3, r2
 80079a6:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079ae:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80079b6:	461a      	mov	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	3248      	adds	r2, #72	; 0x48
 80079bc:	78b9      	ldrb	r1, [r7, #2]
 80079be:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	3348      	adds	r3, #72	; 0x48
 80079cc:	00db      	lsls	r3, r3, #3
 80079ce:	4413      	add	r3, r2
 80079d0:	787a      	ldrb	r2, [r7, #1]
 80079d2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	3348      	adds	r3, #72	; 0x48
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	4413      	add	r3, r2
 80079e2:	2200      	movs	r2, #0
 80079e4:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80079ec:	3301      	adds	r3, #1
 80079ee:	b2da      	uxtb	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	d103      	bne.n	8007a08 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 8007a08:	bf00      	nop
 8007a0a:	3714      	adds	r7, #20
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr

08007a14 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b086      	sub	sp, #24
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a28:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d10f      	bne.n	8007a54 <SCSI_StartStopUnit+0x40>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	3304      	adds	r3, #4
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	f003 0303 	and.w	r3, r3, #3
 8007a3e:	2b02      	cmp	r3, #2
 8007a40:	d108      	bne.n	8007a54 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007a42:	7af9      	ldrb	r1, [r7, #11]
 8007a44:	2324      	movs	r3, #36	; 0x24
 8007a46:	2205      	movs	r2, #5
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f7ff ffa0 	bl	800798e <SCSI_SenseCode>

    return -1;
 8007a4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a52:	e026      	b.n	8007aa2 <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	3304      	adds	r3, #4
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d104      	bne.n	8007a6c <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007a6a:	e016      	b.n	8007a9a <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	f003 0303 	and.w	r3, r3, #3
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d104      	bne.n	8007a84 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	2202      	movs	r2, #2
 8007a7e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007a82:	e00a      	b.n	8007a9a <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	3304      	adds	r3, #4
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	f003 0303 	and.w	r3, r3, #3
 8007a8e:	2b03      	cmp	r3, #3
 8007a90:	d103      	bne.n	8007a9a <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	60da      	str	r2, [r3, #12]

  return 0;
 8007aa0:	2300      	movs	r3, #0
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b087      	sub	sp, #28
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	607a      	str	r2, [r7, #4]
 8007ab6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007abe:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d104      	bne.n	8007ad4 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2200      	movs	r2, #0
 8007ace:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8007ad2:	e003      	b.n	8007adc <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	60da      	str	r2, [r3, #12]

  return 0;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	371c      	adds	r7, #28
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	460b      	mov	r3, r1
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b04:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	7a1b      	ldrb	r3, [r3, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d17c      	bne.n	8007c08 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007b14:	b25b      	sxtb	r3, r3
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	db0a      	blt.n	8007b30 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007b20:	2320      	movs	r3, #32
 8007b22:	2205      	movs	r2, #5
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f7ff ff32 	bl	800798e <SCSI_SenseCode>
      return -1;
 8007b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b2e:	e075      	b.n	8007c1c <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d108      	bne.n	8007b4c <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b3a:	7af9      	ldrb	r1, [r7, #11]
 8007b3c:	233a      	movs	r3, #58	; 0x3a
 8007b3e:	2202      	movs	r2, #2
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f7ff ff24 	bl	800798e <SCSI_SenseCode>

      return -1;
 8007b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b4a:	e067      	b.n	8007c1c <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	7afa      	ldrb	r2, [r7, #11]
 8007b56:	4610      	mov	r0, r2
 8007b58:	4798      	blx	r3
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007b60:	7af9      	ldrb	r1, [r7, #11]
 8007b62:	233a      	movs	r3, #58	; 0x3a
 8007b64:	2202      	movs	r2, #2
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f7ff ff11 	bl	800798e <SCSI_SenseCode>
      return -1;
 8007b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b70:	e054      	b.n	8007c1c <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	3302      	adds	r3, #2
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	3303      	adds	r3, #3
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b82:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	3304      	adds	r3, #4
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007b8c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	3205      	adds	r2, #5
 8007b92:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007b94:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3307      	adds	r3, #7
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	3208      	adds	r2, #8
 8007ba8:	7812      	ldrb	r2, [r2, #0]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007bbe:	7af9      	ldrb	r1, [r7, #11]
 8007bc0:	68f8      	ldr	r0, [r7, #12]
 8007bc2:	f000 fa95 	bl	80080f0 <SCSI_CheckAddressRange>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	da02      	bge.n	8007bd2 <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007bd0:	e024      	b.n	8007c1c <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007bde:	6979      	ldr	r1, [r7, #20]
 8007be0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8007be4:	fb01 f303 	mul.w	r3, r1, r3
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d00a      	beq.n	8007c02 <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007bf2:	2320      	movs	r3, #32
 8007bf4:	2205      	movs	r2, #5
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f7ff fec9 	bl	800798e <SCSI_SenseCode>
      return -1;
 8007bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c00:	e00c      	b.n	8007c1c <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	2202      	movs	r2, #2
 8007c06:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c0e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007c10:	7afb      	ldrb	r3, [r7, #11]
 8007c12:	4619      	mov	r1, r3
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 fa8d 	bl	8008134 <SCSI_ProcessRead>
 8007c1a:	4603      	mov	r3, r0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3718      	adds	r7, #24
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c38:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	7a1b      	ldrb	r3, [r3, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f040 8087 	bne.w	8007d52 <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007c4a:	b25b      	sxtb	r3, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	db0a      	blt.n	8007c66 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007c56:	2320      	movs	r3, #32
 8007c58:	2205      	movs	r2, #5
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f7ff fe97 	bl	800798e <SCSI_SenseCode>
      return -1;
 8007c60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c64:	e07f      	b.n	8007d66 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d108      	bne.n	8007c82 <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c70:	7af9      	ldrb	r1, [r7, #11]
 8007c72:	233a      	movs	r3, #58	; 0x3a
 8007c74:	2202      	movs	r2, #2
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f7ff fe89 	bl	800798e <SCSI_SenseCode>
      return -1;
 8007c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c80:	e071      	b.n	8007d66 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	7afa      	ldrb	r2, [r7, #11]
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	4798      	blx	r3
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d008      	beq.n	8007ca8 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c96:	7af9      	ldrb	r1, [r7, #11]
 8007c98:	233a      	movs	r3, #58	; 0x3a
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f7ff fe76 	bl	800798e <SCSI_SenseCode>
      return -1;
 8007ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ca6:	e05e      	b.n	8007d66 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	3302      	adds	r3, #2
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	3303      	adds	r3, #3
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007cb8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007cc2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	3205      	adds	r2, #5
 8007cc8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007cca:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3306      	adds	r3, #6
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3307      	adds	r3, #7
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007ce2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007cec:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	3209      	adds	r2, #9
 8007cf2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007cf4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007d08:	7af9      	ldrb	r1, [r7, #11]
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	f000 f9f0 	bl	80080f0 <SCSI_CheckAddressRange>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	da02      	bge.n	8007d1c <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007d16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d1a:	e024      	b.n	8007d66 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007d28:	6979      	ldr	r1, [r7, #20]
 8007d2a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8007d2e:	fb01 f303 	mul.w	r3, r1, r3
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d00a      	beq.n	8007d4c <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007d3c:	2320      	movs	r3, #32
 8007d3e:	2205      	movs	r2, #5
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f7ff fe24 	bl	800798e <SCSI_SenseCode>
      return -1;
 8007d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d4a:	e00c      	b.n	8007d66 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d58:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8007d5a:	7afb      	ldrb	r3, [r7, #11]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 f9e8 	bl	8008134 <SCSI_ProcessRead>
 8007d64:	4603      	mov	r3, r0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3718      	adds	r7, #24
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b086      	sub	sp, #24
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	60f8      	str	r0, [r7, #12]
 8007d76:	460b      	mov	r3, r1
 8007d78:	607a      	str	r2, [r7, #4]
 8007d7a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d82:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	7a1b      	ldrb	r3, [r3, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f040 80a5 	bne.w	8007ed8 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10a      	bne.n	8007dae <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007d9e:	2320      	movs	r3, #32
 8007da0:	2205      	movs	r2, #5
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7ff fdf3 	bl	800798e <SCSI_SenseCode>
      return -1;
 8007da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dac:	e09a      	b.n	8007ee4 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007db4:	b25b      	sxtb	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	da0a      	bge.n	8007dd0 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007dc0:	2320      	movs	r3, #32
 8007dc2:	2205      	movs	r2, #5
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f7ff fde2 	bl	800798e <SCSI_SenseCode>
      return -1;
 8007dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dce:	e089      	b.n	8007ee4 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	7afa      	ldrb	r2, [r7, #11]
 8007dda:	4610      	mov	r0, r2
 8007ddc:	4798      	blx	r3
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d008      	beq.n	8007df6 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007de4:	7af9      	ldrb	r1, [r7, #11]
 8007de6:	233a      	movs	r3, #58	; 0x3a
 8007de8:	2202      	movs	r2, #2
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f7ff fdcf 	bl	800798e <SCSI_SenseCode>
      return -1;
 8007df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007df4:	e076      	b.n	8007ee4 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	7afa      	ldrb	r2, [r7, #11]
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d008      	beq.n	8007e1c <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007e0a:	7af9      	ldrb	r1, [r7, #11]
 8007e0c:	2327      	movs	r3, #39	; 0x27
 8007e0e:	2202      	movs	r2, #2
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f7ff fdbc 	bl	800798e <SCSI_SenseCode>
      return -1;
 8007e16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e1a:	e063      	b.n	8007ee4 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3302      	adds	r3, #2
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3303      	adds	r3, #3
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007e2c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3304      	adds	r3, #4
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007e36:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	3205      	adds	r2, #5
 8007e3c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007e3e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	3307      	adds	r3, #7
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	3208      	adds	r2, #8
 8007e52:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007e54:	431a      	orrs	r2, r3
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007e68:	7af9      	ldrb	r1, [r7, #11]
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f000 f940 	bl	80080f0 <SCSI_CheckAddressRange>
 8007e70:	4603      	mov	r3, r0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	da02      	bge.n	8007e7c <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007e76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e7a:	e033      	b.n	8007ee4 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8007e88:	fb02 f303 	mul.w	r3, r2, r3
 8007e8c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e94:	693a      	ldr	r2, [r7, #16]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d00a      	beq.n	8007eb0 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007ea0:	2320      	movs	r3, #32
 8007ea2:	2205      	movs	r2, #5
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f7ff fd72 	bl	800798e <SCSI_SenseCode>
      return -1;
 8007eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007eae:	e019      	b.n	8007ee4 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eb6:	bf28      	it	cs
 8007eb8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8007ebc:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f103 0210 	add.w	r2, r3, #16
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2101      	movs	r1, #1
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f001 ff9b 	bl	8009e0a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	e005      	b.n	8007ee4 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 8007ed8:	7afb      	ldrb	r3, [r7, #11]
 8007eda:	4619      	mov	r1, r3
 8007edc:	68f8      	ldr	r0, [r7, #12]
 8007ede:	f000 f99c 	bl	800821a <SCSI_ProcessWrite>
 8007ee2:	4603      	mov	r3, r0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3718      	adds	r7, #24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f00:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	7a1b      	ldrb	r3, [r3, #8]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f040 80b5 	bne.w	8008076 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10a      	bne.n	8007f2c <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007f1c:	2320      	movs	r3, #32
 8007f1e:	2205      	movs	r2, #5
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f7ff fd34 	bl	800798e <SCSI_SenseCode>
      return -1;
 8007f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f2a:	e0aa      	b.n	8008082 <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007f32:	b25b      	sxtb	r3, r3
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	da0a      	bge.n	8007f4e <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007f3e:	2320      	movs	r3, #32
 8007f40:	2205      	movs	r2, #5
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f7ff fd23 	bl	800798e <SCSI_SenseCode>
      return -1;
 8007f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f4c:	e099      	b.n	8008082 <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	7afa      	ldrb	r2, [r7, #11]
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4798      	blx	r3
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00b      	beq.n	8007f7a <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007f62:	7af9      	ldrb	r1, [r7, #11]
 8007f64:	233a      	movs	r3, #58	; 0x3a
 8007f66:	2202      	movs	r2, #2
 8007f68:	68f8      	ldr	r0, [r7, #12]
 8007f6a:	f7ff fd10 	bl	800798e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2205      	movs	r2, #5
 8007f72:	721a      	strb	r2, [r3, #8]
      return -1;
 8007f74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f78:	e083      	b.n	8008082 <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	7afa      	ldrb	r2, [r7, #11]
 8007f84:	4610      	mov	r0, r2
 8007f86:	4798      	blx	r3
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00b      	beq.n	8007fa6 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007f8e:	7af9      	ldrb	r1, [r7, #11]
 8007f90:	2327      	movs	r3, #39	; 0x27
 8007f92:	2202      	movs	r2, #2
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f7ff fcfa 	bl	800798e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2205      	movs	r2, #5
 8007f9e:	721a      	strb	r2, [r3, #8]
      return -1;
 8007fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fa4:	e06d      	b.n	8008082 <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	3302      	adds	r3, #2
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3303      	adds	r3, #3
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007fb6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	3304      	adds	r3, #4
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007fc0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	3205      	adds	r2, #5
 8007fc6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007fc8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3306      	adds	r3, #6
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	3307      	adds	r3, #7
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007fe0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8007fea:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	3209      	adds	r2, #9
 8007ff0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8007ff2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008006:	7af9      	ldrb	r1, [r7, #11]
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 f871 	bl	80080f0 <SCSI_CheckAddressRange>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	da02      	bge.n	800801a <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008018:	e033      	b.n	8008082 <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008026:	fb02 f303 	mul.w	r3, r2, r3
 800802a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	429a      	cmp	r2, r3
 8008036:	d00a      	beq.n	800804e <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800803e:	2320      	movs	r3, #32
 8008040:	2205      	movs	r2, #5
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f7ff fca3 	bl	800798e <SCSI_SenseCode>
      return -1;
 8008048:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800804c:	e019      	b.n	8008082 <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008054:	bf28      	it	cs
 8008056:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800805a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	2201      	movs	r2, #1
 8008060:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f103 0210 	add.w	r2, r3, #16
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	2101      	movs	r1, #1
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f001 fecc 	bl	8009e0a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008072:	2300      	movs	r3, #0
 8008074:	e005      	b.n	8008082 <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 8008076:	7afb      	ldrb	r3, [r7, #11]
 8008078:	4619      	mov	r1, r3
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 f8cd 	bl	800821a <SCSI_ProcessWrite>
 8008080:	4603      	mov	r3, r0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3718      	adds	r7, #24
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b086      	sub	sp, #24
 800808e:	af00      	add	r7, sp, #0
 8008090:	60f8      	str	r0, [r7, #12]
 8008092:	460b      	mov	r3, r1
 8008094:	607a      	str	r2, [r7, #4]
 8008096:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800809e:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	3301      	adds	r3, #1
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d008      	beq.n	80080c0 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80080ae:	7af9      	ldrb	r1, [r7, #11]
 80080b0:	2324      	movs	r3, #36	; 0x24
 80080b2:	2205      	movs	r2, #5
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f7ff fc6a 	bl	800798e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80080ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080be:	e013      	b.n	80080e8 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80080cc:	7af9      	ldrb	r1, [r7, #11]
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 f80e 	bl	80080f0 <SCSI_CheckAddressRange>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	da02      	bge.n	80080e0 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 80080da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080de:	e003      	b.n	80080e8 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2200      	movs	r2, #0
 80080e4:	60da      	str	r2, [r3, #12]

  return 0;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	607a      	str	r2, [r7, #4]
 80080fa:	603b      	str	r3, [r7, #0]
 80080fc:	460b      	mov	r3, r1
 80080fe:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008106:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	441a      	add	r2, r3
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008114:	429a      	cmp	r2, r3
 8008116:	d908      	bls.n	800812a <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8008118:	7af9      	ldrb	r1, [r7, #11]
 800811a:	2321      	movs	r3, #33	; 0x21
 800811c:	2205      	movs	r2, #5
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f7ff fc35 	bl	800798e <SCSI_SenseCode>
    return -1;
 8008124:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008128:	e000      	b.n	800812c <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008134:	b590      	push	{r4, r7, lr}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008146:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008154:	fb02 f303 	mul.w	r3, r2, r3
 8008158:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008160:	bf28      	it	cs
 8008162:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008166:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800816e:	691c      	ldr	r4, [r3, #16]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f103 0110 	add.w	r1, r3, #16
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008182:	4618      	mov	r0, r3
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800818a:	b29b      	uxth	r3, r3
 800818c:	78f8      	ldrb	r0, [r7, #3]
 800818e:	47a0      	blx	r4
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	da08      	bge.n	80081a8 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008196:	78f9      	ldrb	r1, [r7, #3]
 8008198:	2311      	movs	r3, #17
 800819a:	2204      	movs	r2, #4
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7ff fbf6 	bl	800798e <SCSI_SenseCode>
    return -1;
 80081a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081a6:	e034      	b.n	8008212 <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f103 0210 	add.w	r2, r3, #16
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2181      	movs	r1, #129	; 0x81
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 fe08 	bl	8009dc8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80081c4:	4619      	mov	r1, r3
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80081cc:	441a      	add	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80081e0:	4619      	mov	r1, r3
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80081e8:	1ad2      	subs	r2, r2, r3
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	1ad2      	subs	r2, r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008206:	2b00      	cmp	r3, #0
 8008208:	d102      	bne.n	8008210 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2203      	movs	r2, #3
 800820e:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	bd90      	pop	{r4, r7, pc}

0800821a <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800821a:	b590      	push	{r4, r7, lr}
 800821c:	b085      	sub	sp, #20
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	460b      	mov	r3, r1
 8008224:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800822c:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800823a:	fb02 f303 	mul.w	r3, r2, r3
 800823e:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008246:	bf28      	it	cs
 8008248:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800824c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008254:	695c      	ldr	r4, [r3, #20]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f103 0110 	add.w	r1, r3, #16
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008268:	4618      	mov	r0, r3
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008270:	b29b      	uxth	r3, r3
 8008272:	78f8      	ldrb	r0, [r7, #3]
 8008274:	47a0      	blx	r4
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	da08      	bge.n	800828e <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800827c:	78f9      	ldrb	r1, [r7, #3]
 800827e:	2303      	movs	r3, #3
 8008280:	2204      	movs	r2, #4
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7ff fb83 	bl	800798e <SCSI_SenseCode>
    return -1;
 8008288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800828c:	e044      	b.n	8008318 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800829a:	4619      	mov	r1, r3
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	fbb3 f3f1 	udiv	r3, r3, r1
 80082a2:	441a      	add	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80082b6:	4619      	mov	r1, r3
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80082be:	1ad2      	subs	r2, r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d104      	bne.n	80082ea <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80082e0:	2100      	movs	r1, #0
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7fe ff04 	bl	80070f0 <MSC_BOT_SendCSW>
 80082e8:	e015      	b.n	8008316 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80082f6:	fb02 f303 	mul.w	r3, r2, r3
 80082fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082fe:	bf28      	it	cs
 8008300:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008304:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f103 0210 	add.w	r2, r3, #16
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2101      	movs	r1, #1
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f001 fd7a 	bl	8009e0a <USBD_LL_PrepareReceive>
  }

  return 0;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3714      	adds	r7, #20
 800831c:	46bd      	mov	sp, r7
 800831e:	bd90      	pop	{r4, r7, pc}

08008320 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8008320:	b480      	push	{r7}
 8008322:	b087      	sub	sp, #28
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	4613      	mov	r3, r2
 800832c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800832e:	88fb      	ldrh	r3, [r7, #6]
 8008330:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 8008332:	8afa      	ldrh	r2, [r7, #22]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8008338:	e00b      	b.n	8008352 <SCSI_UpdateBotData+0x32>
  {
    len--;
 800833a:	8afb      	ldrh	r3, [r7, #22]
 800833c:	3b01      	subs	r3, #1
 800833e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8008340:	8afb      	ldrh	r3, [r7, #22]
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	441a      	add	r2, r3
 8008346:	8afb      	ldrh	r3, [r7, #22]
 8008348:	7811      	ldrb	r1, [r2, #0]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	4413      	add	r3, r2
 800834e:	460a      	mov	r2, r1
 8008350:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8008352:	8afb      	ldrh	r3, [r7, #22]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1f0      	bne.n	800833a <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	371c      	adds	r7, #28
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr

08008366 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b086      	sub	sp, #24
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	60b9      	str	r1, [r7, #8]
 8008370:	4613      	mov	r3, r2
 8008372:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800837a:	2303      	movs	r3, #3
 800837c:	e025      	b.n	80083ca <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008384:	2b00      	cmp	r3, #0
 8008386:	d003      	beq.n	8008390 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008396:	2b00      	cmp	r3, #0
 8008398:	d003      	beq.n	80083a2 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d003      	beq.n	80083b0 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	79fa      	ldrb	r2, [r7, #7]
 80083bc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f001 fbae 	bl	8009b20 <USBD_LL_Init>
 80083c4:	4603      	mov	r3, r0
 80083c6:	75fb      	strb	r3, [r7, #23]

  return ret;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3718      	adds	r7, #24
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}

080083d2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083d2:	b580      	push	{r7, lr}
 80083d4:	b084      	sub	sp, #16
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083dc:	2300      	movs	r3, #0
 80083de:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80083e6:	2303      	movs	r3, #3
 80083e8:	e010      	b.n	800840c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fa:	f107 020e 	add.w	r2, r7, #14
 80083fe:	4610      	mov	r0, r2
 8008400:	4798      	blx	r3
 8008402:	4602      	mov	r2, r0
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f001 fbcb 	bl	8009bb8 <USBD_LL_Start>
 8008422:	4603      	mov	r3, r0
}
 8008424:	4618      	mov	r0, r3
 8008426:	3708      	adds	r7, #8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	370c      	adds	r7, #12
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr

08008442 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b084      	sub	sp, #16
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800844e:	2303      	movs	r3, #3
 8008450:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008458:	2b00      	cmp	r3, #0
 800845a:	d009      	beq.n	8008470 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	78fa      	ldrb	r2, [r7, #3]
 8008466:	4611      	mov	r1, r2
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	4798      	blx	r3
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008470:	7bfb      	ldrb	r3, [r7, #15]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3710      	adds	r7, #16
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b082      	sub	sp, #8
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
 8008482:	460b      	mov	r3, r1
 8008484:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848c:	2b00      	cmp	r3, #0
 800848e:	d007      	beq.n	80084a0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	78fa      	ldrb	r2, [r7, #3]
 800849a:	4611      	mov	r1, r2
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	4798      	blx	r3
  }

  return USBD_OK;
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b084      	sub	sp, #16
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084ba:	6839      	ldr	r1, [r7, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f000 ff2b 	bl	8009318 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80084d0:	461a      	mov	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084de:	f003 031f 	and.w	r3, r3, #31
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d00e      	beq.n	8008504 <USBD_LL_SetupStage+0x5a>
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d302      	bcc.n	80084f0 <USBD_LL_SetupStage+0x46>
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d014      	beq.n	8008518 <USBD_LL_SetupStage+0x6e>
 80084ee:	e01d      	b.n	800852c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fa17 	bl	800892c <USBD_StdDevReq>
 80084fe:	4603      	mov	r3, r0
 8008500:	73fb      	strb	r3, [r7, #15]
      break;
 8008502:	e020      	b.n	8008546 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fa7b 	bl	8008a08 <USBD_StdItfReq>
 8008512:	4603      	mov	r3, r0
 8008514:	73fb      	strb	r3, [r7, #15]
      break;
 8008516:	e016      	b.n	8008546 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800851e:	4619      	mov	r1, r3
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 fab7 	bl	8008a94 <USBD_StdEPReq>
 8008526:	4603      	mov	r3, r0
 8008528:	73fb      	strb	r3, [r7, #15]
      break;
 800852a:	e00c      	b.n	8008546 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008532:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008536:	b2db      	uxtb	r3, r3
 8008538:	4619      	mov	r1, r3
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f001 fbbb 	bl	8009cb6 <USBD_LL_StallEP>
 8008540:	4603      	mov	r3, r0
 8008542:	73fb      	strb	r3, [r7, #15]
      break;
 8008544:	bf00      	nop
  }

  return ret;
 8008546:	7bfb      	ldrb	r3, [r7, #15]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b086      	sub	sp, #24
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	460b      	mov	r3, r1
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800855e:	7afb      	ldrb	r3, [r7, #11]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d137      	bne.n	80085d4 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800856a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008572:	2b03      	cmp	r3, #3
 8008574:	d14a      	bne.n	800860c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	68db      	ldr	r3, [r3, #12]
 800857e:	429a      	cmp	r2, r3
 8008580:	d913      	bls.n	80085aa <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	689a      	ldr	r2, [r3, #8]
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	1ad2      	subs	r2, r2, r3
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	4293      	cmp	r3, r2
 800859a:	bf28      	it	cs
 800859c:	4613      	movcs	r3, r2
 800859e:	461a      	mov	r2, r3
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f000 ff8f 	bl	80094c6 <USBD_CtlContinueRx>
 80085a8:	e030      	b.n	800860c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00a      	beq.n	80085cc <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d105      	bne.n	80085cc <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 ff8b 	bl	80094e8 <USBD_CtlSendStatus>
 80085d2:	e01b      	b.n	800860c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d013      	beq.n	8008608 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80085e6:	2b03      	cmp	r3, #3
 80085e8:	d10e      	bne.n	8008608 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	7afa      	ldrb	r2, [r7, #11]
 80085f4:	4611      	mov	r1, r2
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	4798      	blx	r3
 80085fa:	4603      	mov	r3, r0
 80085fc:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80085fe:	7dfb      	ldrb	r3, [r7, #23]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d003      	beq.n	800860c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008604:	7dfb      	ldrb	r3, [r7, #23]
 8008606:	e002      	b.n	800860e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008608:	2303      	movs	r3, #3
 800860a:	e000      	b.n	800860e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800860c:	2300      	movs	r3, #0
}
 800860e:	4618      	mov	r0, r3
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b086      	sub	sp, #24
 800861a:	af00      	add	r7, sp, #0
 800861c:	60f8      	str	r0, [r7, #12]
 800861e:	460b      	mov	r3, r1
 8008620:	607a      	str	r2, [r7, #4]
 8008622:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008624:	7afb      	ldrb	r3, [r7, #11]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d16a      	bne.n	8008700 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3314      	adds	r3, #20
 800862e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008636:	2b02      	cmp	r3, #2
 8008638:	d155      	bne.n	80086e6 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	689a      	ldr	r2, [r3, #8]
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	68db      	ldr	r3, [r3, #12]
 8008642:	429a      	cmp	r2, r3
 8008644:	d914      	bls.n	8008670 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	689a      	ldr	r2, [r3, #8]
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	1ad2      	subs	r2, r2, r3
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	461a      	mov	r2, r3
 800865a:	6879      	ldr	r1, [r7, #4]
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 ff21 	bl	80094a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008662:	2300      	movs	r3, #0
 8008664:	2200      	movs	r2, #0
 8008666:	2100      	movs	r1, #0
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f001 fbce 	bl	8009e0a <USBD_LL_PrepareReceive>
 800866e:	e03a      	b.n	80086e6 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	429a      	cmp	r2, r3
 800867a:	d11c      	bne.n	80086b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	685a      	ldr	r2, [r3, #4]
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008684:	429a      	cmp	r2, r3
 8008686:	d316      	bcc.n	80086b6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008692:	429a      	cmp	r2, r3
 8008694:	d20f      	bcs.n	80086b6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008696:	2200      	movs	r2, #0
 8008698:	2100      	movs	r1, #0
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 ff02 	bl	80094a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086a8:	2300      	movs	r3, #0
 80086aa:	2200      	movs	r2, #0
 80086ac:	2100      	movs	r1, #0
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	f001 fbab 	bl	8009e0a <USBD_LL_PrepareReceive>
 80086b4:	e017      	b.n	80086e6 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80086c8:	2b03      	cmp	r3, #3
 80086ca:	d105      	bne.n	80086d8 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086d8:	2180      	movs	r1, #128	; 0x80
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f001 faeb 	bl	8009cb6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f000 ff14 	bl	800950e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d123      	bne.n	8008738 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f7ff fe9b 	bl	800842c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086fe:	e01b      	b.n	8008738 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d013      	beq.n	8008734 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008712:	2b03      	cmp	r3, #3
 8008714:	d10e      	bne.n	8008734 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800871c:	695b      	ldr	r3, [r3, #20]
 800871e:	7afa      	ldrb	r2, [r7, #11]
 8008720:	4611      	mov	r1, r2
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	4798      	blx	r3
 8008726:	4603      	mov	r3, r0
 8008728:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d003      	beq.n	8008738 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008730:	7dfb      	ldrb	r3, [r7, #23]
 8008732:	e002      	b.n	800873a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008734:	2303      	movs	r3, #3
 8008736:	e000      	b.n	800873a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b082      	sub	sp, #8
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800876e:	2b00      	cmp	r3, #0
 8008770:	d009      	beq.n	8008786 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	6852      	ldr	r2, [r2, #4]
 800877e:	b2d2      	uxtb	r2, r2
 8008780:	4611      	mov	r1, r2
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008786:	2340      	movs	r3, #64	; 0x40
 8008788:	2200      	movs	r2, #0
 800878a:	2100      	movs	r1, #0
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f001 fa2e 	bl	8009bee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2240      	movs	r2, #64	; 0x40
 800879e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087a2:	2340      	movs	r3, #64	; 0x40
 80087a4:	2200      	movs	r2, #0
 80087a6:	2180      	movs	r1, #128	; 0x80
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f001 fa20 	bl	8009bee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2240      	movs	r2, #64	; 0x40
 80087b8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	78fa      	ldrb	r2, [r7, #3]
 80087d4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087d6:	2300      	movs	r3, #0
}
 80087d8:	4618      	mov	r0, r3
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2204      	movs	r2, #4
 80087fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800881c:	2b04      	cmp	r3, #4
 800881e:	d105      	bne.n	800882c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008848:	2b03      	cmp	r3, #3
 800884a:	d10b      	bne.n	8008864 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d005      	beq.n	8008864 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800885e:	69db      	ldr	r3, [r3, #28]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	460b      	mov	r3, r1
 8008878:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088aa:	2300      	movs	r3, #0
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d009      	beq.n	80088e6 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	6852      	ldr	r2, [r2, #4]
 80088de:	b2d2      	uxtb	r2, r2
 80088e0:	4611      	mov	r1, r2
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	4798      	blx	r3
  }

  return USBD_OK;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	3301      	adds	r3, #1
 8008906:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800890e:	8a3b      	ldrh	r3, [r7, #16]
 8008910:	021b      	lsls	r3, r3, #8
 8008912:	b21a      	sxth	r2, r3
 8008914:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008918:	4313      	orrs	r3, r2
 800891a:	b21b      	sxth	r3, r3
 800891c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800891e:	89fb      	ldrh	r3, [r7, #14]
}
 8008920:	4618      	mov	r0, r3
 8008922:	371c      	adds	r7, #28
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008942:	2b20      	cmp	r3, #32
 8008944:	d004      	beq.n	8008950 <USBD_StdDevReq+0x24>
 8008946:	2b40      	cmp	r3, #64	; 0x40
 8008948:	d002      	beq.n	8008950 <USBD_StdDevReq+0x24>
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00a      	beq.n	8008964 <USBD_StdDevReq+0x38>
 800894e:	e050      	b.n	80089f2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	6839      	ldr	r1, [r7, #0]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	4798      	blx	r3
 800895e:	4603      	mov	r3, r0
 8008960:	73fb      	strb	r3, [r7, #15]
    break;
 8008962:	e04b      	b.n	80089fc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	785b      	ldrb	r3, [r3, #1]
 8008968:	2b09      	cmp	r3, #9
 800896a:	d83c      	bhi.n	80089e6 <USBD_StdDevReq+0xba>
 800896c:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <USBD_StdDevReq+0x48>)
 800896e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008972:	bf00      	nop
 8008974:	080089c9 	.word	0x080089c9
 8008978:	080089dd 	.word	0x080089dd
 800897c:	080089e7 	.word	0x080089e7
 8008980:	080089d3 	.word	0x080089d3
 8008984:	080089e7 	.word	0x080089e7
 8008988:	080089a7 	.word	0x080089a7
 800898c:	0800899d 	.word	0x0800899d
 8008990:	080089e7 	.word	0x080089e7
 8008994:	080089bf 	.word	0x080089bf
 8008998:	080089b1 	.word	0x080089b1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800899c:	6839      	ldr	r1, [r7, #0]
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f9ce 	bl	8008d40 <USBD_GetDescriptor>
      break;
 80089a4:	e024      	b.n	80089f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fb33 	bl	8009014 <USBD_SetAddress>
      break;
 80089ae:	e01f      	b.n	80089f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fb70 	bl	8009098 <USBD_SetConfig>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]
      break;
 80089bc:	e018      	b.n	80089f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fc0d 	bl	80091e0 <USBD_GetConfig>
      break;
 80089c6:	e013      	b.n	80089f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fc3c 	bl	8009248 <USBD_GetStatus>
      break;
 80089d0:	e00e      	b.n	80089f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80089d2:	6839      	ldr	r1, [r7, #0]
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fc6a 	bl	80092ae <USBD_SetFeature>
      break;
 80089da:	e009      	b.n	80089f0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fc79 	bl	80092d6 <USBD_ClrFeature>
      break;
 80089e4:	e004      	b.n	80089f0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fccf 	bl	800938c <USBD_CtlError>
      break;
 80089ee:	bf00      	nop
    }
    break;
 80089f0:	e004      	b.n	80089fc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fcc9 	bl	800938c <USBD_CtlError>
    break;
 80089fa:	bf00      	nop
  }

  return ret;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop

08008a08 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a12:	2300      	movs	r3, #0
 8008a14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a1e:	2b20      	cmp	r3, #32
 8008a20:	d003      	beq.n	8008a2a <USBD_StdItfReq+0x22>
 8008a22:	2b40      	cmp	r3, #64	; 0x40
 8008a24:	d001      	beq.n	8008a2a <USBD_StdItfReq+0x22>
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d12a      	bne.n	8008a80 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a30:	3b01      	subs	r3, #1
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d81d      	bhi.n	8008a72 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	889b      	ldrh	r3, [r3, #4]
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d813      	bhi.n	8008a68 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	4798      	blx	r3
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	88db      	ldrh	r3, [r3, #6]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d110      	bne.n	8008a7c <USBD_StdItfReq+0x74>
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10d      	bne.n	8008a7c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fd41 	bl	80094e8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008a66:	e009      	b.n	8008a7c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008a68:	6839      	ldr	r1, [r7, #0]
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fc8e 	bl	800938c <USBD_CtlError>
      break;
 8008a70:	e004      	b.n	8008a7c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008a72:	6839      	ldr	r1, [r7, #0]
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f000 fc89 	bl	800938c <USBD_CtlError>
      break;
 8008a7a:	e000      	b.n	8008a7e <USBD_StdItfReq+0x76>
      break;
 8008a7c:	bf00      	nop
    }
    break;
 8008a7e:	e004      	b.n	8008a8a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 fc82 	bl	800938c <USBD_CtlError>
    break;
 8008a88:	bf00      	nop
  }

  return ret;
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	889b      	ldrh	r3, [r3, #4]
 8008aa6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ab0:	2b20      	cmp	r3, #32
 8008ab2:	d004      	beq.n	8008abe <USBD_StdEPReq+0x2a>
 8008ab4:	2b40      	cmp	r3, #64	; 0x40
 8008ab6:	d002      	beq.n	8008abe <USBD_StdEPReq+0x2a>
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00a      	beq.n	8008ad2 <USBD_StdEPReq+0x3e>
 8008abc:	e135      	b.n	8008d2a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	6839      	ldr	r1, [r7, #0]
 8008ac8:	6878      	ldr	r0, [r7, #4]
 8008aca:	4798      	blx	r3
 8008acc:	4603      	mov	r3, r0
 8008ace:	73fb      	strb	r3, [r7, #15]
    break;
 8008ad0:	e130      	b.n	8008d34 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	785b      	ldrb	r3, [r3, #1]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d03e      	beq.n	8008b58 <USBD_StdEPReq+0xc4>
 8008ada:	2b03      	cmp	r3, #3
 8008adc:	d002      	beq.n	8008ae4 <USBD_StdEPReq+0x50>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d077      	beq.n	8008bd2 <USBD_StdEPReq+0x13e>
 8008ae2:	e11c      	b.n	8008d1e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d002      	beq.n	8008af4 <USBD_StdEPReq+0x60>
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d015      	beq.n	8008b1e <USBD_StdEPReq+0x8a>
 8008af2:	e02b      	b.n	8008b4c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008af4:	7bbb      	ldrb	r3, [r7, #14]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00c      	beq.n	8008b14 <USBD_StdEPReq+0x80>
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	2b80      	cmp	r3, #128	; 0x80
 8008afe:	d009      	beq.n	8008b14 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 f8d6 	bl	8009cb6 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b0a:	2180      	movs	r1, #128	; 0x80
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f001 f8d2 	bl	8009cb6 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008b12:	e020      	b.n	8008b56 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fc38 	bl	800938c <USBD_CtlError>
        break;
 8008b1c:	e01b      	b.n	8008b56 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	885b      	ldrh	r3, [r3, #2]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d10e      	bne.n	8008b44 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00b      	beq.n	8008b44 <USBD_StdEPReq+0xb0>
 8008b2c:	7bbb      	ldrb	r3, [r7, #14]
 8008b2e:	2b80      	cmp	r3, #128	; 0x80
 8008b30:	d008      	beq.n	8008b44 <USBD_StdEPReq+0xb0>
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	88db      	ldrh	r3, [r3, #6]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d104      	bne.n	8008b44 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b3a:	7bbb      	ldrb	r3, [r7, #14]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f001 f8b9 	bl	8009cb6 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fccf 	bl	80094e8 <USBD_CtlSendStatus>

        break;
 8008b4a:	e004      	b.n	8008b56 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f000 fc1c 	bl	800938c <USBD_CtlError>
        break;
 8008b54:	bf00      	nop
      }
      break;
 8008b56:	e0e7      	b.n	8008d28 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d002      	beq.n	8008b68 <USBD_StdEPReq+0xd4>
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d015      	beq.n	8008b92 <USBD_StdEPReq+0xfe>
 8008b66:	e02d      	b.n	8008bc4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b68:	7bbb      	ldrb	r3, [r7, #14]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00c      	beq.n	8008b88 <USBD_StdEPReq+0xf4>
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	2b80      	cmp	r3, #128	; 0x80
 8008b72:	d009      	beq.n	8008b88 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f001 f89c 	bl	8009cb6 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b7e:	2180      	movs	r1, #128	; 0x80
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f001 f898 	bl	8009cb6 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008b86:	e023      	b.n	8008bd0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fbfe 	bl	800938c <USBD_CtlError>
        break;
 8008b90:	e01e      	b.n	8008bd0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	885b      	ldrh	r3, [r3, #2]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d119      	bne.n	8008bce <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d004      	beq.n	8008bae <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f001 f8a3 	bl	8009cf4 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fc9a 	bl	80094e8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	4798      	blx	r3
        }
        break;
 8008bc2:	e004      	b.n	8008bce <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fbe0 	bl	800938c <USBD_CtlError>
        break;
 8008bcc:	e000      	b.n	8008bd0 <USBD_StdEPReq+0x13c>
        break;
 8008bce:	bf00      	nop
      }
      break;
 8008bd0:	e0aa      	b.n	8008d28 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d002      	beq.n	8008be2 <USBD_StdEPReq+0x14e>
 8008bdc:	2b03      	cmp	r3, #3
 8008bde:	d032      	beq.n	8008c46 <USBD_StdEPReq+0x1b2>
 8008be0:	e097      	b.n	8008d12 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d007      	beq.n	8008bf8 <USBD_StdEPReq+0x164>
 8008be8:	7bbb      	ldrb	r3, [r7, #14]
 8008bea:	2b80      	cmp	r3, #128	; 0x80
 8008bec:	d004      	beq.n	8008bf8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fbcb 	bl	800938c <USBD_CtlError>
          break;
 8008bf6:	e091      	b.n	8008d1c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	da0b      	bge.n	8008c18 <USBD_StdEPReq+0x184>
 8008c00:	7bbb      	ldrb	r3, [r7, #14]
 8008c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c06:	4613      	mov	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	4413      	add	r3, r2
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	3310      	adds	r3, #16
 8008c10:	687a      	ldr	r2, [r7, #4]
 8008c12:	4413      	add	r3, r2
 8008c14:	3304      	adds	r3, #4
 8008c16:	e00b      	b.n	8008c30 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008c18:	7bbb      	ldrb	r3, [r7, #14]
 8008c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c1e:	4613      	mov	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	3304      	adds	r3, #4
 8008c30:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	2200      	movs	r2, #0
 8008c36:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fc15 	bl	800946e <USBD_CtlSendData>
        break;
 8008c44:	e06a      	b.n	8008d1c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	da11      	bge.n	8008c72 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	f003 020f 	and.w	r2, r3, #15
 8008c54:	6879      	ldr	r1, [r7, #4]
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	440b      	add	r3, r1
 8008c60:	3324      	adds	r3, #36	; 0x24
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d117      	bne.n	8008c98 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fb8e 	bl	800938c <USBD_CtlError>
            break;
 8008c70:	e054      	b.n	8008d1c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c72:	7bbb      	ldrb	r3, [r7, #14]
 8008c74:	f003 020f 	and.w	r2, r3, #15
 8008c78:	6879      	ldr	r1, [r7, #4]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	440b      	add	r3, r1
 8008c84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c88:	881b      	ldrh	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d104      	bne.n	8008c98 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f000 fb7b 	bl	800938c <USBD_CtlError>
            break;
 8008c96:	e041      	b.n	8008d1c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	da0b      	bge.n	8008cb8 <USBD_StdEPReq+0x224>
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	3310      	adds	r3, #16
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	e00b      	b.n	8008cd0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	4413      	add	r3, r2
 8008cce:	3304      	adds	r3, #4
 8008cd0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cd2:	7bbb      	ldrb	r3, [r7, #14]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d002      	beq.n	8008cde <USBD_StdEPReq+0x24a>
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	2b80      	cmp	r3, #128	; 0x80
 8008cdc:	d103      	bne.n	8008ce6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	e00e      	b.n	8008d04 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ce6:	7bbb      	ldrb	r3, [r7, #14]
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 f821 	bl	8009d32 <USBD_LL_IsStallEP>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	e002      	b.n	8008d04 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	2202      	movs	r2, #2
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fbaf 	bl	800946e <USBD_CtlSendData>
          break;
 8008d10:	e004      	b.n	8008d1c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fb39 	bl	800938c <USBD_CtlError>
        break;
 8008d1a:	bf00      	nop
      }
      break;
 8008d1c:	e004      	b.n	8008d28 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 fb33 	bl	800938c <USBD_CtlError>
      break;
 8008d26:	bf00      	nop
    }
    break;
 8008d28:	e004      	b.n	8008d34 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fb2d 	bl	800938c <USBD_CtlError>
    break;
 8008d32:	bf00      	nop
  }

  return ret;
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
	...

08008d40 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d52:	2300      	movs	r3, #0
 8008d54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	885b      	ldrh	r3, [r3, #2]
 8008d5a:	0a1b      	lsrs	r3, r3, #8
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	2b06      	cmp	r3, #6
 8008d62:	f200 8128 	bhi.w	8008fb6 <USBD_GetDescriptor+0x276>
 8008d66:	a201      	add	r2, pc, #4	; (adr r2, 8008d6c <USBD_GetDescriptor+0x2c>)
 8008d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6c:	08008d89 	.word	0x08008d89
 8008d70:	08008da1 	.word	0x08008da1
 8008d74:	08008de1 	.word	0x08008de1
 8008d78:	08008fb7 	.word	0x08008fb7
 8008d7c:	08008fb7 	.word	0x08008fb7
 8008d80:	08008f57 	.word	0x08008f57
 8008d84:	08008f83 	.word	0x08008f83
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	7c12      	ldrb	r2, [r2, #16]
 8008d94:	f107 0108 	add.w	r1, r7, #8
 8008d98:	4610      	mov	r0, r2
 8008d9a:	4798      	blx	r3
 8008d9c:	60f8      	str	r0, [r7, #12]
    break;
 8008d9e:	e112      	b.n	8008fc6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	7c1b      	ldrb	r3, [r3, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10d      	bne.n	8008dc4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008db0:	f107 0208 	add.w	r2, r7, #8
 8008db4:	4610      	mov	r0, r2
 8008db6:	4798      	blx	r3
 8008db8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008dc2:	e100      	b.n	8008fc6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dcc:	f107 0208 	add.w	r2, r7, #8
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	4798      	blx	r3
 8008dd4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	3301      	adds	r3, #1
 8008dda:	2202      	movs	r2, #2
 8008ddc:	701a      	strb	r2, [r3, #0]
    break;
 8008dde:	e0f2      	b.n	8008fc6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	885b      	ldrh	r3, [r3, #2]
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b05      	cmp	r3, #5
 8008de8:	f200 80ac 	bhi.w	8008f44 <USBD_GetDescriptor+0x204>
 8008dec:	a201      	add	r2, pc, #4	; (adr r2, 8008df4 <USBD_GetDescriptor+0xb4>)
 8008dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df2:	bf00      	nop
 8008df4:	08008e0d 	.word	0x08008e0d
 8008df8:	08008e41 	.word	0x08008e41
 8008dfc:	08008e75 	.word	0x08008e75
 8008e00:	08008ea9 	.word	0x08008ea9
 8008e04:	08008edd 	.word	0x08008edd
 8008e08:	08008f11 	.word	0x08008f11
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d00b      	beq.n	8008e30 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	7c12      	ldrb	r2, [r2, #16]
 8008e24:	f107 0108 	add.w	r1, r7, #8
 8008e28:	4610      	mov	r0, r2
 8008e2a:	4798      	blx	r3
 8008e2c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e2e:	e091      	b.n	8008f54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 faaa 	bl	800938c <USBD_CtlError>
        err++;
 8008e38:	7afb      	ldrb	r3, [r7, #11]
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	72fb      	strb	r3, [r7, #11]
      break;
 8008e3e:	e089      	b.n	8008f54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00b      	beq.n	8008e64 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	7c12      	ldrb	r2, [r2, #16]
 8008e58:	f107 0108 	add.w	r1, r7, #8
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	4798      	blx	r3
 8008e60:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e62:	e077      	b.n	8008f54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008e64:	6839      	ldr	r1, [r7, #0]
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fa90 	bl	800938c <USBD_CtlError>
        err++;
 8008e6c:	7afb      	ldrb	r3, [r7, #11]
 8008e6e:	3301      	adds	r3, #1
 8008e70:	72fb      	strb	r3, [r7, #11]
      break;
 8008e72:	e06f      	b.n	8008f54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00b      	beq.n	8008e98 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	7c12      	ldrb	r2, [r2, #16]
 8008e8c:	f107 0108 	add.w	r1, r7, #8
 8008e90:	4610      	mov	r0, r2
 8008e92:	4798      	blx	r3
 8008e94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e96:	e05d      	b.n	8008f54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008e98:	6839      	ldr	r1, [r7, #0]
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fa76 	bl	800938c <USBD_CtlError>
        err++;
 8008ea0:	7afb      	ldrb	r3, [r7, #11]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	72fb      	strb	r3, [r7, #11]
      break;
 8008ea6:	e055      	b.n	8008f54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00b      	beq.n	8008ecc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	7c12      	ldrb	r2, [r2, #16]
 8008ec0:	f107 0108 	add.w	r1, r7, #8
 8008ec4:	4610      	mov	r0, r2
 8008ec6:	4798      	blx	r3
 8008ec8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008eca:	e043      	b.n	8008f54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008ecc:	6839      	ldr	r1, [r7, #0]
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 fa5c 	bl	800938c <USBD_CtlError>
        err++;
 8008ed4:	7afb      	ldrb	r3, [r7, #11]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	72fb      	strb	r3, [r7, #11]
      break;
 8008eda:	e03b      	b.n	8008f54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ee2:	695b      	ldr	r3, [r3, #20]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d00b      	beq.n	8008f00 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eee:	695b      	ldr	r3, [r3, #20]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	7c12      	ldrb	r2, [r2, #16]
 8008ef4:	f107 0108 	add.w	r1, r7, #8
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4798      	blx	r3
 8008efc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008efe:	e029      	b.n	8008f54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 fa42 	bl	800938c <USBD_CtlError>
        err++;
 8008f08:	7afb      	ldrb	r3, [r7, #11]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	72fb      	strb	r3, [r7, #11]
      break;
 8008f0e:	e021      	b.n	8008f54 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f16:	699b      	ldr	r3, [r3, #24]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00b      	beq.n	8008f34 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	7c12      	ldrb	r2, [r2, #16]
 8008f28:	f107 0108 	add.w	r1, r7, #8
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4798      	blx	r3
 8008f30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f32:	e00f      	b.n	8008f54 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008f34:	6839      	ldr	r1, [r7, #0]
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fa28 	bl	800938c <USBD_CtlError>
        err++;
 8008f3c:	7afb      	ldrb	r3, [r7, #11]
 8008f3e:	3301      	adds	r3, #1
 8008f40:	72fb      	strb	r3, [r7, #11]
      break;
 8008f42:	e007      	b.n	8008f54 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa20 	bl	800938c <USBD_CtlError>
      err++;
 8008f4c:	7afb      	ldrb	r3, [r7, #11]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008f52:	bf00      	nop
    }
    break;
 8008f54:	e037      	b.n	8008fc6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	7c1b      	ldrb	r3, [r3, #16]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d109      	bne.n	8008f72 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f66:	f107 0208 	add.w	r2, r7, #8
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	4798      	blx	r3
 8008f6e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008f70:	e029      	b.n	8008fc6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008f72:	6839      	ldr	r1, [r7, #0]
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fa09 	bl	800938c <USBD_CtlError>
      err++;
 8008f7a:	7afb      	ldrb	r3, [r7, #11]
 8008f7c:	3301      	adds	r3, #1
 8008f7e:	72fb      	strb	r3, [r7, #11]
    break;
 8008f80:	e021      	b.n	8008fc6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	7c1b      	ldrb	r3, [r3, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d10d      	bne.n	8008fa6 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f92:	f107 0208 	add.w	r2, r7, #8
 8008f96:	4610      	mov	r0, r2
 8008f98:	4798      	blx	r3
 8008f9a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	2207      	movs	r2, #7
 8008fa2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008fa4:	e00f      	b.n	8008fc6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f9ef 	bl	800938c <USBD_CtlError>
      err++;
 8008fae:	7afb      	ldrb	r3, [r7, #11]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	72fb      	strb	r3, [r7, #11]
    break;
 8008fb4:	e007      	b.n	8008fc6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008fb6:	6839      	ldr	r1, [r7, #0]
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f9e7 	bl	800938c <USBD_CtlError>
    err++;
 8008fbe:	7afb      	ldrb	r3, [r7, #11]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	72fb      	strb	r3, [r7, #11]
    break;
 8008fc4:	bf00      	nop
  }

  if (err != 0U)
 8008fc6:	7afb      	ldrb	r3, [r7, #11]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d11e      	bne.n	800900a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	88db      	ldrh	r3, [r3, #6]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d016      	beq.n	8009002 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008fd4:	893b      	ldrh	r3, [r7, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00e      	beq.n	8008ff8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	88da      	ldrh	r2, [r3, #6]
 8008fde:	893b      	ldrh	r3, [r7, #8]
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	bf28      	it	cs
 8008fe4:	4613      	movcs	r3, r2
 8008fe6:	b29b      	uxth	r3, r3
 8008fe8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fea:	893b      	ldrh	r3, [r7, #8]
 8008fec:	461a      	mov	r2, r3
 8008fee:	68f9      	ldr	r1, [r7, #12]
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fa3c 	bl	800946e <USBD_CtlSendData>
 8008ff6:	e009      	b.n	800900c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f9c6 	bl	800938c <USBD_CtlError>
 8009000:	e004      	b.n	800900c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 fa70 	bl	80094e8 <USBD_CtlSendStatus>
 8009008:	e000      	b.n	800900c <USBD_GetDescriptor+0x2cc>
    return;
 800900a:	bf00      	nop
    }
  }
}
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop

08009014 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	889b      	ldrh	r3, [r3, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d130      	bne.n	8009088 <USBD_SetAddress+0x74>
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	88db      	ldrh	r3, [r3, #6]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d12c      	bne.n	8009088 <USBD_SetAddress+0x74>
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	885b      	ldrh	r3, [r3, #2]
 8009032:	2b7f      	cmp	r3, #127	; 0x7f
 8009034:	d828      	bhi.n	8009088 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	885b      	ldrh	r3, [r3, #2]
 800903a:	b2db      	uxtb	r3, r3
 800903c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009040:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009048:	2b03      	cmp	r3, #3
 800904a:	d104      	bne.n	8009056 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800904c:	6839      	ldr	r1, [r7, #0]
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f99c 	bl	800938c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009054:	e01c      	b.n	8009090 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	7bfa      	ldrb	r2, [r7, #15]
 800905a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	4619      	mov	r1, r3
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fe91 	bl	8009d8a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 fa3d 	bl	80094e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d004      	beq.n	800907e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800907c:	e008      	b.n	8009090 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009086:	e003      	b.n	8009090 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f97e 	bl	800938c <USBD_CtlError>
  }
}
 8009090:	bf00      	nop
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	885b      	ldrh	r3, [r3, #2]
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	4b4b      	ldr	r3, [pc, #300]	; (80091dc <USBD_SetConfig+0x144>)
 80090ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80090b0:	4b4a      	ldr	r3, [pc, #296]	; (80091dc <USBD_SetConfig+0x144>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d905      	bls.n	80090c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 f966 	bl	800938c <USBD_CtlError>
    return USBD_FAIL;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e087      	b.n	80091d4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d002      	beq.n	80090d4 <USBD_SetConfig+0x3c>
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	d025      	beq.n	800911e <USBD_SetConfig+0x86>
 80090d2:	e071      	b.n	80091b8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80090d4:	4b41      	ldr	r3, [pc, #260]	; (80091dc <USBD_SetConfig+0x144>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d01c      	beq.n	8009116 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80090dc:	4b3f      	ldr	r3, [pc, #252]	; (80091dc <USBD_SetConfig+0x144>)
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	461a      	mov	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80090e6:	4b3d      	ldr	r3, [pc, #244]	; (80091dc <USBD_SetConfig+0x144>)
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	4619      	mov	r1, r3
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f7ff f9a8 	bl	8008442 <USBD_SetClassConfig>
 80090f2:	4603      	mov	r3, r0
 80090f4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d004      	beq.n	8009106 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f944 	bl	800938c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009104:	e065      	b.n	80091d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f9ee 	bl	80094e8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2203      	movs	r2, #3
 8009110:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009114:	e05d      	b.n	80091d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f9e6 	bl	80094e8 <USBD_CtlSendStatus>
    break;
 800911c:	e059      	b.n	80091d2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800911e:	4b2f      	ldr	r3, [pc, #188]	; (80091dc <USBD_SetConfig+0x144>)
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d112      	bne.n	800914c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2202      	movs	r2, #2
 800912a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800912e:	4b2b      	ldr	r3, [pc, #172]	; (80091dc <USBD_SetConfig+0x144>)
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	461a      	mov	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009138:	4b28      	ldr	r3, [pc, #160]	; (80091dc <USBD_SetConfig+0x144>)
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff f99b 	bl	800847a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 f9cf 	bl	80094e8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800914a:	e042      	b.n	80091d2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800914c:	4b23      	ldr	r3, [pc, #140]	; (80091dc <USBD_SetConfig+0x144>)
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	461a      	mov	r2, r3
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	429a      	cmp	r2, r3
 8009158:	d02a      	beq.n	80091b0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	b2db      	uxtb	r3, r3
 8009160:	4619      	mov	r1, r3
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f7ff f989 	bl	800847a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009168:	4b1c      	ldr	r3, [pc, #112]	; (80091dc <USBD_SetConfig+0x144>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	461a      	mov	r2, r3
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009172:	4b1a      	ldr	r3, [pc, #104]	; (80091dc <USBD_SetConfig+0x144>)
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f7ff f962 	bl	8008442 <USBD_SetClassConfig>
 800917e:	4603      	mov	r3, r0
 8009180:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00f      	beq.n	80091a8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009188:	6839      	ldr	r1, [r7, #0]
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 f8fe 	bl	800938c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	b2db      	uxtb	r3, r3
 8009196:	4619      	mov	r1, r3
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f7ff f96e 	bl	800847a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2202      	movs	r2, #2
 80091a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80091a6:	e014      	b.n	80091d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f99d 	bl	80094e8 <USBD_CtlSendStatus>
    break;
 80091ae:	e010      	b.n	80091d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f999 	bl	80094e8 <USBD_CtlSendStatus>
    break;
 80091b6:	e00c      	b.n	80091d2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f8e6 	bl	800938c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80091c0:	4b06      	ldr	r3, [pc, #24]	; (80091dc <USBD_SetConfig+0x144>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f7ff f957 	bl	800847a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80091cc:	2303      	movs	r3, #3
 80091ce:	73fb      	strb	r3, [r7, #15]
    break;
 80091d0:	bf00      	nop
  }

  return ret;
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	200001e8 	.word	0x200001e8

080091e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	88db      	ldrh	r3, [r3, #6]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d004      	beq.n	80091fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091f2:	6839      	ldr	r1, [r7, #0]
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f8c9 	bl	800938c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80091fa:	e021      	b.n	8009240 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009202:	2b01      	cmp	r3, #1
 8009204:	db17      	blt.n	8009236 <USBD_GetConfig+0x56>
 8009206:	2b02      	cmp	r3, #2
 8009208:	dd02      	ble.n	8009210 <USBD_GetConfig+0x30>
 800920a:	2b03      	cmp	r3, #3
 800920c:	d00b      	beq.n	8009226 <USBD_GetConfig+0x46>
 800920e:	e012      	b.n	8009236 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2200      	movs	r2, #0
 8009214:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	3308      	adds	r3, #8
 800921a:	2201      	movs	r2, #1
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f925 	bl	800946e <USBD_CtlSendData>
      break;
 8009224:	e00c      	b.n	8009240 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3304      	adds	r3, #4
 800922a:	2201      	movs	r2, #1
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f91d 	bl	800946e <USBD_CtlSendData>
      break;
 8009234:	e004      	b.n	8009240 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009236:	6839      	ldr	r1, [r7, #0]
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 f8a7 	bl	800938c <USBD_CtlError>
      break;
 800923e:	bf00      	nop
}
 8009240:	bf00      	nop
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009258:	3b01      	subs	r3, #1
 800925a:	2b02      	cmp	r3, #2
 800925c:	d81e      	bhi.n	800929c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	88db      	ldrh	r3, [r3, #6]
 8009262:	2b02      	cmp	r3, #2
 8009264:	d004      	beq.n	8009270 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f88f 	bl	800938c <USBD_CtlError>
      break;
 800926e:	e01a      	b.n	80092a6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800927c:	2b00      	cmp	r3, #0
 800927e:	d005      	beq.n	800928c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f043 0202 	orr.w	r2, r3, #2
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	330c      	adds	r3, #12
 8009290:	2202      	movs	r2, #2
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f8ea 	bl	800946e <USBD_CtlSendData>
    break;
 800929a:	e004      	b.n	80092a6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800929c:	6839      	ldr	r1, [r7, #0]
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f874 	bl	800938c <USBD_CtlError>
    break;
 80092a4:	bf00      	nop
  }
}
 80092a6:	bf00      	nop
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b082      	sub	sp, #8
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	885b      	ldrh	r3, [r3, #2]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d106      	bne.n	80092ce <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f90d 	bl	80094e8 <USBD_CtlSendStatus>
  }
}
 80092ce:	bf00      	nop
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
 80092de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092e6:	3b01      	subs	r3, #1
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d80b      	bhi.n	8009304 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	885b      	ldrh	r3, [r3, #2]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d10c      	bne.n	800930e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2200      	movs	r2, #0
 80092f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f8f3 	bl	80094e8 <USBD_CtlSendStatus>
      }
      break;
 8009302:	e004      	b.n	800930e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009304:	6839      	ldr	r1, [r7, #0]
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f840 	bl	800938c <USBD_CtlError>
      break;
 800930c:	e000      	b.n	8009310 <USBD_ClrFeature+0x3a>
      break;
 800930e:	bf00      	nop
  }
}
 8009310:	bf00      	nop
 8009312:	3708      	adds	r7, #8
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	781a      	ldrb	r2, [r3, #0]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3301      	adds	r3, #1
 8009332:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	781a      	ldrb	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	3301      	adds	r3, #1
 8009340:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f7ff fad4 	bl	80088f0 <SWAPBYTE>
 8009348:	4603      	mov	r3, r0
 800934a:	461a      	mov	r2, r3
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3301      	adds	r3, #1
 8009354:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	3301      	adds	r3, #1
 800935a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f7ff fac7 	bl	80088f0 <SWAPBYTE>
 8009362:	4603      	mov	r3, r0
 8009364:	461a      	mov	r2, r3
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3301      	adds	r3, #1
 800936e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	3301      	adds	r3, #1
 8009374:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f7ff faba 	bl	80088f0 <SWAPBYTE>
 800937c:	4603      	mov	r3, r0
 800937e:	461a      	mov	r2, r3
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	80da      	strh	r2, [r3, #6]
}
 8009384:	bf00      	nop
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b082      	sub	sp, #8
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009396:	2180      	movs	r1, #128	; 0x80
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fc8c 	bl	8009cb6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800939e:	2100      	movs	r1, #0
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fc88 	bl	8009cb6 <USBD_LL_StallEP>
}
 80093a6:	bf00      	nop
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b086      	sub	sp, #24
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	60b9      	str	r1, [r7, #8]
 80093b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80093ba:	2300      	movs	r3, #0
 80093bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d036      	beq.n	8009432 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80093c8:	6938      	ldr	r0, [r7, #16]
 80093ca:	f000 f836 	bl	800943a <USBD_GetLen>
 80093ce:	4603      	mov	r3, r0
 80093d0:	3301      	adds	r3, #1
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	b29a      	uxth	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	4413      	add	r3, r2
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	7812      	ldrb	r2, [r2, #0]
 80093e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80093e8:	7dfb      	ldrb	r3, [r7, #23]
 80093ea:	3301      	adds	r3, #1
 80093ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	4413      	add	r3, r2
 80093f4:	2203      	movs	r2, #3
 80093f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80093f8:	7dfb      	ldrb	r3, [r7, #23]
 80093fa:	3301      	adds	r3, #1
 80093fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80093fe:	e013      	b.n	8009428 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009400:	7dfb      	ldrb	r3, [r7, #23]
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	4413      	add	r3, r2
 8009406:	693a      	ldr	r2, [r7, #16]
 8009408:	7812      	ldrb	r2, [r2, #0]
 800940a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	3301      	adds	r3, #1
 8009410:	613b      	str	r3, [r7, #16]
    idx++;
 8009412:	7dfb      	ldrb	r3, [r7, #23]
 8009414:	3301      	adds	r3, #1
 8009416:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	4413      	add	r3, r2
 800941e:	2200      	movs	r2, #0
 8009420:	701a      	strb	r2, [r3, #0]
    idx++;
 8009422:	7dfb      	ldrb	r3, [r7, #23]
 8009424:	3301      	adds	r3, #1
 8009426:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1e7      	bne.n	8009400 <USBD_GetString+0x52>
 8009430:	e000      	b.n	8009434 <USBD_GetString+0x86>
    return;
 8009432:	bf00      	nop
  }
}
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009442:	2300      	movs	r3, #0
 8009444:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800944a:	e005      	b.n	8009458 <USBD_GetLen+0x1e>
  {
    len++;
 800944c:	7bfb      	ldrb	r3, [r7, #15]
 800944e:	3301      	adds	r3, #1
 8009450:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	3301      	adds	r3, #1
 8009456:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1f5      	bne.n	800944c <USBD_GetLen+0x12>
  }

  return len;
 8009460:	7bfb      	ldrb	r3, [r7, #15]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3714      	adds	r7, #20
 8009466:	46bd      	mov	sp, r7
 8009468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946c:	4770      	bx	lr

0800946e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	60f8      	str	r0, [r7, #12]
 8009476:	60b9      	str	r1, [r7, #8]
 8009478:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2202      	movs	r2, #2
 800947e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	687a      	ldr	r2, [r7, #4]
 800948c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	2100      	movs	r1, #0
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 fc97 	bl	8009dc8 <USBD_LL_Transmit>

  return USBD_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3710      	adds	r7, #16
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	60f8      	str	r0, [r7, #12]
 80094ac:	60b9      	str	r1, [r7, #8]
 80094ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	2100      	movs	r1, #0
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f000 fc86 	bl	8009dc8 <USBD_LL_Transmit>

  return USBD_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	60f8      	str	r0, [r7, #12]
 80094ce:	60b9      	str	r1, [r7, #8]
 80094d0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	2100      	movs	r1, #0
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 fc96 	bl	8009e0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2204      	movs	r2, #4
 80094f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094f8:	2300      	movs	r3, #0
 80094fa:	2200      	movs	r2, #0
 80094fc:	2100      	movs	r1, #0
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fc62 	bl	8009dc8 <USBD_LL_Transmit>

  return USBD_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3708      	adds	r7, #8
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b082      	sub	sp, #8
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2205      	movs	r2, #5
 800951a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800951e:	2300      	movs	r3, #0
 8009520:	2200      	movs	r2, #0
 8009522:	2100      	movs	r1, #0
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fc70 	bl	8009e0a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3708      	adds	r7, #8
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009538:	2200      	movs	r2, #0
 800953a:	4912      	ldr	r1, [pc, #72]	; (8009584 <MX_USB_DEVICE_Init+0x50>)
 800953c:	4812      	ldr	r0, [pc, #72]	; (8009588 <MX_USB_DEVICE_Init+0x54>)
 800953e:	f7fe ff12 	bl	8008366 <USBD_Init>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d001      	beq.n	800954c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009548:	f7f7 fd58 	bl	8000ffc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800954c:	490f      	ldr	r1, [pc, #60]	; (800958c <MX_USB_DEVICE_Init+0x58>)
 800954e:	480e      	ldr	r0, [pc, #56]	; (8009588 <MX_USB_DEVICE_Init+0x54>)
 8009550:	f7fe ff3f 	bl	80083d2 <USBD_RegisterClass>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800955a:	f7f7 fd4f 	bl	8000ffc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800955e:	490c      	ldr	r1, [pc, #48]	; (8009590 <MX_USB_DEVICE_Init+0x5c>)
 8009560:	4809      	ldr	r0, [pc, #36]	; (8009588 <MX_USB_DEVICE_Init+0x54>)
 8009562:	f7fd fc3b 	bl	8006ddc <USBD_MSC_RegisterStorage>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d001      	beq.n	8009570 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800956c:	f7f7 fd46 	bl	8000ffc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009570:	4805      	ldr	r0, [pc, #20]	; (8009588 <MX_USB_DEVICE_Init+0x54>)
 8009572:	f7fe ff4f 	bl	8008414 <USBD_Start>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800957c:	f7f7 fd3e 	bl	8000ffc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009580:	bf00      	nop
 8009582:	bd80      	pop	{r7, pc}
 8009584:	200000f4 	.word	0x200000f4
 8009588:	200004f0 	.word	0x200004f0
 800958c:	2000000c 	.word	0x2000000c
 8009590:	20000144 	.word	0x20000144

08009594 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	4603      	mov	r3, r0
 800959c:	6039      	str	r1, [r7, #0]
 800959e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2212      	movs	r2, #18
 80095a4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80095a6:	4b03      	ldr	r3, [pc, #12]	; (80095b4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr
 80095b4:	20000110 	.word	0x20000110

080095b8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	6039      	str	r1, [r7, #0]
 80095c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2204      	movs	r2, #4
 80095c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095ca:	4b03      	ldr	r3, [pc, #12]	; (80095d8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr
 80095d8:	20000124 	.word	0x20000124

080095dc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	4603      	mov	r3, r0
 80095e4:	6039      	str	r1, [r7, #0]
 80095e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095e8:	79fb      	ldrb	r3, [r7, #7]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d105      	bne.n	80095fa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	4907      	ldr	r1, [pc, #28]	; (8009610 <USBD_FS_ProductStrDescriptor+0x34>)
 80095f2:	4808      	ldr	r0, [pc, #32]	; (8009614 <USBD_FS_ProductStrDescriptor+0x38>)
 80095f4:	f7ff fedb 	bl	80093ae <USBD_GetString>
 80095f8:	e004      	b.n	8009604 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	4904      	ldr	r1, [pc, #16]	; (8009610 <USBD_FS_ProductStrDescriptor+0x34>)
 80095fe:	4805      	ldr	r0, [pc, #20]	; (8009614 <USBD_FS_ProductStrDescriptor+0x38>)
 8009600:	f7ff fed5 	bl	80093ae <USBD_GetString>
  }
  return USBD_StrDesc;
 8009604:	4b02      	ldr	r3, [pc, #8]	; (8009610 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}
 800960e:	bf00      	nop
 8009610:	200007c0 	.word	0x200007c0
 8009614:	0800a138 	.word	0x0800a138

08009618 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	6039      	str	r1, [r7, #0]
 8009622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	4904      	ldr	r1, [pc, #16]	; (8009638 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009628:	4804      	ldr	r0, [pc, #16]	; (800963c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800962a:	f7ff fec0 	bl	80093ae <USBD_GetString>
  return USBD_StrDesc;
 800962e:	4b02      	ldr	r3, [pc, #8]	; (8009638 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	200007c0 	.word	0x200007c0
 800963c:	0800a14c 	.word	0x0800a14c

08009640 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	4603      	mov	r3, r0
 8009648:	6039      	str	r1, [r7, #0]
 800964a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	221a      	movs	r2, #26
 8009650:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009652:	f000 f843 	bl	80096dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009656:	4b02      	ldr	r3, [pc, #8]	; (8009660 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009658:	4618      	mov	r0, r3
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	20000128 	.word	0x20000128

08009664 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	4603      	mov	r3, r0
 800966c:	6039      	str	r1, [r7, #0]
 800966e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009670:	79fb      	ldrb	r3, [r7, #7]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d105      	bne.n	8009682 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009676:	683a      	ldr	r2, [r7, #0]
 8009678:	4907      	ldr	r1, [pc, #28]	; (8009698 <USBD_FS_ConfigStrDescriptor+0x34>)
 800967a:	4808      	ldr	r0, [pc, #32]	; (800969c <USBD_FS_ConfigStrDescriptor+0x38>)
 800967c:	f7ff fe97 	bl	80093ae <USBD_GetString>
 8009680:	e004      	b.n	800968c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	4904      	ldr	r1, [pc, #16]	; (8009698 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009686:	4805      	ldr	r0, [pc, #20]	; (800969c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009688:	f7ff fe91 	bl	80093ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800968c:	4b02      	ldr	r3, [pc, #8]	; (8009698 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800968e:	4618      	mov	r0, r3
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	200007c0 	.word	0x200007c0
 800969c:	0800a160 	.word	0x0800a160

080096a0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	4603      	mov	r3, r0
 80096a8:	6039      	str	r1, [r7, #0]
 80096aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80096ac:	79fb      	ldrb	r3, [r7, #7]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d105      	bne.n	80096be <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	4907      	ldr	r1, [pc, #28]	; (80096d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096b6:	4808      	ldr	r0, [pc, #32]	; (80096d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096b8:	f7ff fe79 	bl	80093ae <USBD_GetString>
 80096bc:	e004      	b.n	80096c8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	4904      	ldr	r1, [pc, #16]	; (80096d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80096c2:	4805      	ldr	r0, [pc, #20]	; (80096d8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80096c4:	f7ff fe73 	bl	80093ae <USBD_GetString>
  }
  return USBD_StrDesc;
 80096c8:	4b02      	ldr	r3, [pc, #8]	; (80096d4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3708      	adds	r7, #8
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	200007c0 	.word	0x200007c0
 80096d8:	0800a16c 	.word	0x0800a16c

080096dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096e2:	4b0f      	ldr	r3, [pc, #60]	; (8009720 <Get_SerialNum+0x44>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096e8:	4b0e      	ldr	r3, [pc, #56]	; (8009724 <Get_SerialNum+0x48>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096ee:	4b0e      	ldr	r3, [pc, #56]	; (8009728 <Get_SerialNum+0x4c>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096f4:	68fa      	ldr	r2, [r7, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4413      	add	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d009      	beq.n	8009716 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009702:	2208      	movs	r2, #8
 8009704:	4909      	ldr	r1, [pc, #36]	; (800972c <Get_SerialNum+0x50>)
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f000 f814 	bl	8009734 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800970c:	2204      	movs	r2, #4
 800970e:	4908      	ldr	r1, [pc, #32]	; (8009730 <Get_SerialNum+0x54>)
 8009710:	68b8      	ldr	r0, [r7, #8]
 8009712:	f000 f80f 	bl	8009734 <IntToUnicode>
  }
}
 8009716:	bf00      	nop
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	1fff7a10 	.word	0x1fff7a10
 8009724:	1fff7a14 	.word	0x1fff7a14
 8009728:	1fff7a18 	.word	0x1fff7a18
 800972c:	2000012a 	.word	0x2000012a
 8009730:	2000013a 	.word	0x2000013a

08009734 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009734:	b480      	push	{r7}
 8009736:	b087      	sub	sp, #28
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	60b9      	str	r1, [r7, #8]
 800973e:	4613      	mov	r3, r2
 8009740:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009746:	2300      	movs	r3, #0
 8009748:	75fb      	strb	r3, [r7, #23]
 800974a:	e027      	b.n	800979c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	0f1b      	lsrs	r3, r3, #28
 8009750:	2b09      	cmp	r3, #9
 8009752:	d80b      	bhi.n	800976c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	0f1b      	lsrs	r3, r3, #28
 8009758:	b2da      	uxtb	r2, r3
 800975a:	7dfb      	ldrb	r3, [r7, #23]
 800975c:	005b      	lsls	r3, r3, #1
 800975e:	4619      	mov	r1, r3
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	440b      	add	r3, r1
 8009764:	3230      	adds	r2, #48	; 0x30
 8009766:	b2d2      	uxtb	r2, r2
 8009768:	701a      	strb	r2, [r3, #0]
 800976a:	e00a      	b.n	8009782 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	0f1b      	lsrs	r3, r3, #28
 8009770:	b2da      	uxtb	r2, r3
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	005b      	lsls	r3, r3, #1
 8009776:	4619      	mov	r1, r3
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	440b      	add	r3, r1
 800977c:	3237      	adds	r2, #55	; 0x37
 800977e:	b2d2      	uxtb	r2, r2
 8009780:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	011b      	lsls	r3, r3, #4
 8009786:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009788:	7dfb      	ldrb	r3, [r7, #23]
 800978a:	005b      	lsls	r3, r3, #1
 800978c:	3301      	adds	r3, #1
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	4413      	add	r3, r2
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	3301      	adds	r3, #1
 800979a:	75fb      	strb	r3, [r7, #23]
 800979c:	7dfa      	ldrb	r2, [r7, #23]
 800979e:	79fb      	ldrb	r3, [r7, #7]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d3d3      	bcc.n	800974c <IntToUnicode+0x18>
  }
}
 80097a4:	bf00      	nop
 80097a6:	371c      	adds	r7, #28
 80097a8:	46bd      	mov	sp, r7
 80097aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ae:	4770      	bx	lr

080097b0 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	4603      	mov	r3, r0
 80097b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80097ba:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	4603      	mov	r3, r0
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80097dc:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097e4:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 80097e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	4603      	mov	r3, r0
 80097fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80097fe:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009800:	4618      	mov	r0, r3
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	4603      	mov	r3, r0
 8009814:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009816:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	60b9      	str	r1, [r7, #8]
 800982c:	607a      	str	r2, [r7, #4]
 800982e:	461a      	mov	r2, r3
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]
 8009834:	4613      	mov	r3, r2
 8009836:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009838:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8009846:	b480      	push	{r7}
 8009848:	b085      	sub	sp, #20
 800984a:	af00      	add	r7, sp, #0
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
 8009850:	461a      	mov	r2, r3
 8009852:	4603      	mov	r3, r0
 8009854:	73fb      	strb	r3, [r7, #15]
 8009856:	4613      	mov	r3, r2
 8009858:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800985a:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800985c:	4618      	mov	r0, r3
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8009868:	b480      	push	{r7}
 800986a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800986c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800986e:	4618      	mov	r0, r3
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b08a      	sub	sp, #40	; 0x28
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009880:	f107 0314 	add.w	r3, r7, #20
 8009884:	2200      	movs	r2, #0
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	605a      	str	r2, [r3, #4]
 800988a:	609a      	str	r2, [r3, #8]
 800988c:	60da      	str	r2, [r3, #12]
 800988e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009898:	d147      	bne.n	800992a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800989a:	2300      	movs	r3, #0
 800989c:	613b      	str	r3, [r7, #16]
 800989e:	4b25      	ldr	r3, [pc, #148]	; (8009934 <HAL_PCD_MspInit+0xbc>)
 80098a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a2:	4a24      	ldr	r2, [pc, #144]	; (8009934 <HAL_PCD_MspInit+0xbc>)
 80098a4:	f043 0301 	orr.w	r3, r3, #1
 80098a8:	6313      	str	r3, [r2, #48]	; 0x30
 80098aa:	4b22      	ldr	r3, [pc, #136]	; (8009934 <HAL_PCD_MspInit+0xbc>)
 80098ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ae:	f003 0301 	and.w	r3, r3, #1
 80098b2:	613b      	str	r3, [r7, #16]
 80098b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80098b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098bc:	2300      	movs	r3, #0
 80098be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098c0:	2300      	movs	r3, #0
 80098c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098c4:	f107 0314 	add.w	r3, r7, #20
 80098c8:	4619      	mov	r1, r3
 80098ca:	481b      	ldr	r0, [pc, #108]	; (8009938 <HAL_PCD_MspInit+0xc0>)
 80098cc:	f7f8 faba 	bl	8001e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80098d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80098d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098d6:	2302      	movs	r3, #2
 80098d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098da:	2300      	movs	r3, #0
 80098dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098de:	2300      	movs	r3, #0
 80098e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80098e2:	230a      	movs	r3, #10
 80098e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098e6:	f107 0314 	add.w	r3, r7, #20
 80098ea:	4619      	mov	r1, r3
 80098ec:	4812      	ldr	r0, [pc, #72]	; (8009938 <HAL_PCD_MspInit+0xc0>)
 80098ee:	f7f8 faa9 	bl	8001e44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80098f2:	4b10      	ldr	r3, [pc, #64]	; (8009934 <HAL_PCD_MspInit+0xbc>)
 80098f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f6:	4a0f      	ldr	r2, [pc, #60]	; (8009934 <HAL_PCD_MspInit+0xbc>)
 80098f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098fc:	6353      	str	r3, [r2, #52]	; 0x34
 80098fe:	2300      	movs	r3, #0
 8009900:	60fb      	str	r3, [r7, #12]
 8009902:	4b0c      	ldr	r3, [pc, #48]	; (8009934 <HAL_PCD_MspInit+0xbc>)
 8009904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009906:	4a0b      	ldr	r2, [pc, #44]	; (8009934 <HAL_PCD_MspInit+0xbc>)
 8009908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800990c:	6453      	str	r3, [r2, #68]	; 0x44
 800990e:	4b09      	ldr	r3, [pc, #36]	; (8009934 <HAL_PCD_MspInit+0xbc>)
 8009910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009916:	60fb      	str	r3, [r7, #12]
 8009918:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800991a:	2200      	movs	r2, #0
 800991c:	2100      	movs	r1, #0
 800991e:	2043      	movs	r0, #67	; 0x43
 8009920:	f7f8 fa59 	bl	8001dd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009924:	2043      	movs	r0, #67	; 0x43
 8009926:	f7f8 fa72 	bl	8001e0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800992a:	bf00      	nop
 800992c:	3728      	adds	r7, #40	; 0x28
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	40023800 	.word	0x40023800
 8009938:	40020000 	.word	0x40020000

0800993c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009950:	4619      	mov	r1, r3
 8009952:	4610      	mov	r0, r2
 8009954:	f7fe fda9 	bl	80084aa <USBD_LL_SetupStage>
}
 8009958:	bf00      	nop
 800995a:	3708      	adds	r7, #8
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	460b      	mov	r3, r1
 800996a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009972:	78fa      	ldrb	r2, [r7, #3]
 8009974:	6879      	ldr	r1, [r7, #4]
 8009976:	4613      	mov	r3, r2
 8009978:	00db      	lsls	r3, r3, #3
 800997a:	1a9b      	subs	r3, r3, r2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	440b      	add	r3, r1
 8009980:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	78fb      	ldrb	r3, [r7, #3]
 8009988:	4619      	mov	r1, r3
 800998a:	f7fe fde1 	bl	8008550 <USBD_LL_DataOutStage>
}
 800998e:	bf00      	nop
 8009990:	3708      	adds	r7, #8
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	460b      	mov	r3, r1
 80099a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80099a8:	78fa      	ldrb	r2, [r7, #3]
 80099aa:	6879      	ldr	r1, [r7, #4]
 80099ac:	4613      	mov	r3, r2
 80099ae:	00db      	lsls	r3, r3, #3
 80099b0:	1a9b      	subs	r3, r3, r2
 80099b2:	009b      	lsls	r3, r3, #2
 80099b4:	440b      	add	r3, r1
 80099b6:	3348      	adds	r3, #72	; 0x48
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	78fb      	ldrb	r3, [r7, #3]
 80099bc:	4619      	mov	r1, r3
 80099be:	f7fe fe2a 	bl	8008616 <USBD_LL_DataInStage>
}
 80099c2:	bf00      	nop
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b082      	sub	sp, #8
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80099d8:	4618      	mov	r0, r3
 80099da:	f7fe ff2e 	bl	800883a <USBD_LL_SOF>
}
 80099de:	bf00      	nop
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80099ee:	2301      	movs	r3, #1
 80099f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d102      	bne.n	8009a00 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
 80099fe:	e008      	b.n	8009a12 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d102      	bne.n	8009a0e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	73fb      	strb	r3, [r7, #15]
 8009a0c:	e001      	b.n	8009a12 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009a0e:	f7f7 faf5 	bl	8000ffc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a18:	7bfa      	ldrb	r2, [r7, #15]
 8009a1a:	4611      	mov	r1, r2
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe fed1 	bl	80087c4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fe fe8a 	bl	8008742 <USBD_LL_Reset>
}
 8009a2e:	bf00      	nop
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
	...

08009a38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7fe fecc 	bl	80087e4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	6812      	ldr	r2, [r2, #0]
 8009a5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009a5e:	f043 0301 	orr.w	r3, r3, #1
 8009a62:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a1b      	ldr	r3, [r3, #32]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d005      	beq.n	8009a78 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009a6c:	4b04      	ldr	r3, [pc, #16]	; (8009a80 <HAL_PCD_SuspendCallback+0x48>)
 8009a6e:	691b      	ldr	r3, [r3, #16]
 8009a70:	4a03      	ldr	r2, [pc, #12]	; (8009a80 <HAL_PCD_SuspendCallback+0x48>)
 8009a72:	f043 0306 	orr.w	r3, r3, #6
 8009a76:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	e000ed00 	.word	0xe000ed00

08009a84 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fe febb 	bl	800880e <USBD_LL_Resume>
}
 8009a98:	bf00      	nop
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ab2:	78fa      	ldrb	r2, [r7, #3]
 8009ab4:	4611      	mov	r1, r2
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f7fe fee6 	bl	8008888 <USBD_LL_IsoOUTIncomplete>
}
 8009abc:	bf00      	nop
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	460b      	mov	r3, r1
 8009ace:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ad6:	78fa      	ldrb	r2, [r7, #3]
 8009ad8:	4611      	mov	r1, r2
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7fe fec7 	bl	800886e <USBD_LL_IsoINIncomplete>
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fe fed3 	bl	80088a2 <USBD_LL_DevConnected>
}
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fe fed0 	bl	80088b8 <USBD_LL_DevDisconnected>
}
 8009b18:	bf00      	nop
 8009b1a:	3708      	adds	r7, #8
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d13c      	bne.n	8009baa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009b30:	4a20      	ldr	r2, [pc, #128]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a1e      	ldr	r2, [pc, #120]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b3c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b40:	4b1c      	ldr	r3, [pc, #112]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b42:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b46:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009b48:	4b1a      	ldr	r3, [pc, #104]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b4a:	2204      	movs	r2, #4
 8009b4c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009b4e:	4b19      	ldr	r3, [pc, #100]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b50:	2202      	movs	r2, #2
 8009b52:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b54:	4b17      	ldr	r3, [pc, #92]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b56:	2200      	movs	r2, #0
 8009b58:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b5a:	4b16      	ldr	r3, [pc, #88]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b5c:	2202      	movs	r2, #2
 8009b5e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b60:	4b14      	ldr	r3, [pc, #80]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009b66:	4b13      	ldr	r3, [pc, #76]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009b6c:	4b11      	ldr	r3, [pc, #68]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b6e:	2200      	movs	r2, #0
 8009b70:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009b72:	4b10      	ldr	r3, [pc, #64]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b74:	2201      	movs	r2, #1
 8009b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009b78:	4b0e      	ldr	r3, [pc, #56]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b7e:	480d      	ldr	r0, [pc, #52]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b80:	f7f8 ff53 	bl	8002a2a <HAL_PCD_Init>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009b8a:	f7f7 fa37 	bl	8000ffc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009b8e:	2180      	movs	r1, #128	; 0x80
 8009b90:	4808      	ldr	r0, [pc, #32]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b92:	f7fa f8de 	bl	8003d52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009b96:	2240      	movs	r2, #64	; 0x40
 8009b98:	2100      	movs	r1, #0
 8009b9a:	4806      	ldr	r0, [pc, #24]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009b9c:	f7fa f892 	bl	8003cc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009ba0:	2280      	movs	r2, #128	; 0x80
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	4803      	ldr	r0, [pc, #12]	; (8009bb4 <USBD_LL_Init+0x94>)
 8009ba6:	f7fa f88d 	bl	8003cc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}
 8009bb4:	200009c0 	.word	0x200009c0

08009bb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f9 f848 	bl	8002c64 <HAL_PCD_Start>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 f94a 	bl	8009e74 <USBD_Get_USB_Status>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	4608      	mov	r0, r1
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	70fb      	strb	r3, [r7, #3]
 8009c00:	460b      	mov	r3, r1
 8009c02:	70bb      	strb	r3, [r7, #2]
 8009c04:	4613      	mov	r3, r2
 8009c06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009c16:	78bb      	ldrb	r3, [r7, #2]
 8009c18:	883a      	ldrh	r2, [r7, #0]
 8009c1a:	78f9      	ldrb	r1, [r7, #3]
 8009c1c:	f7f9 fc2c 	bl	8003478 <HAL_PCD_EP_Open>
 8009c20:	4603      	mov	r3, r0
 8009c22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 f924 	bl	8009e74 <USBD_Get_USB_Status>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	460b      	mov	r3, r1
 8009c44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c54:	78fa      	ldrb	r2, [r7, #3]
 8009c56:	4611      	mov	r1, r2
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7f9 fc75 	bl	8003548 <HAL_PCD_EP_Close>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c62:	7bfb      	ldrb	r3, [r7, #15]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 f905 	bl	8009e74 <USBD_Get_USB_Status>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	460b      	mov	r3, r1
 8009c82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c92:	78fa      	ldrb	r2, [r7, #3]
 8009c94:	4611      	mov	r1, r2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7f9 fe07 	bl	80038aa <HAL_PCD_EP_Flush>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 f8e6 	bl	8009e74 <USBD_Get_USB_Status>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b084      	sub	sp, #16
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009cd0:	78fa      	ldrb	r2, [r7, #3]
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7f9 fd2e 	bl	8003736 <HAL_PCD_EP_SetStall>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cde:	7bfb      	ldrb	r3, [r7, #15]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 f8c7 	bl	8009e74 <USBD_Get_USB_Status>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cea:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d00:	2300      	movs	r3, #0
 8009d02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d0e:	78fa      	ldrb	r2, [r7, #3]
 8009d10:	4611      	mov	r1, r2
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7f9 fd73 	bl	80037fe <HAL_PCD_EP_ClrStall>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f000 f8a8 	bl	8009e74 <USBD_Get_USB_Status>
 8009d24:	4603      	mov	r3, r0
 8009d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b085      	sub	sp, #20
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d44:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	da0b      	bge.n	8009d66 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d4e:	78fb      	ldrb	r3, [r7, #3]
 8009d50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d54:	68f9      	ldr	r1, [r7, #12]
 8009d56:	4613      	mov	r3, r2
 8009d58:	00db      	lsls	r3, r3, #3
 8009d5a:	1a9b      	subs	r3, r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	440b      	add	r3, r1
 8009d60:	333e      	adds	r3, #62	; 0x3e
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	e00b      	b.n	8009d7e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d66:	78fb      	ldrb	r3, [r7, #3]
 8009d68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d6c:	68f9      	ldr	r1, [r7, #12]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	00db      	lsls	r3, r3, #3
 8009d72:	1a9b      	subs	r3, r3, r2
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	440b      	add	r3, r1
 8009d78:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009d7c:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	460b      	mov	r3, r1
 8009d94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009da4:	78fa      	ldrb	r2, [r7, #3]
 8009da6:	4611      	mov	r1, r2
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7f9 fb40 	bl	800342e <HAL_PCD_SetAddress>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 f85d 	bl	8009e74 <USBD_Get_USB_Status>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	607a      	str	r2, [r7, #4]
 8009dd2:	603b      	str	r3, [r7, #0]
 8009dd4:	460b      	mov	r3, r1
 8009dd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009de6:	7af9      	ldrb	r1, [r7, #11]
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	f7f9 fc59 	bl	80036a2 <HAL_PCD_EP_Transmit>
 8009df0:	4603      	mov	r3, r0
 8009df2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009df4:	7dfb      	ldrb	r3, [r7, #23]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 f83c 	bl	8009e74 <USBD_Get_USB_Status>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e00:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3718      	adds	r7, #24
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b086      	sub	sp, #24
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	60f8      	str	r0, [r7, #12]
 8009e12:	607a      	str	r2, [r7, #4]
 8009e14:	603b      	str	r3, [r7, #0]
 8009e16:	460b      	mov	r3, r1
 8009e18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e28:	7af9      	ldrb	r1, [r7, #11]
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	f7f9 fbd5 	bl	80035dc <HAL_PCD_EP_Receive>
 8009e32:	4603      	mov	r3, r0
 8009e34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e36:	7dfb      	ldrb	r3, [r7, #23]
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f000 f81b 	bl	8009e74 <USBD_Get_USB_Status>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e42:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	460b      	mov	r3, r1
 8009e56:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e5e:	78fa      	ldrb	r2, [r7, #3]
 8009e60:	4611      	mov	r1, r2
 8009e62:	4618      	mov	r0, r3
 8009e64:	f7f9 fc05 	bl	8003672 <HAL_PCD_EP_GetRxCount>
 8009e68:	4603      	mov	r3, r0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3708      	adds	r7, #8
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
	...

08009e74 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e82:	79fb      	ldrb	r3, [r7, #7]
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d817      	bhi.n	8009eb8 <USBD_Get_USB_Status+0x44>
 8009e88:	a201      	add	r2, pc, #4	; (adr r2, 8009e90 <USBD_Get_USB_Status+0x1c>)
 8009e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e8e:	bf00      	nop
 8009e90:	08009ea1 	.word	0x08009ea1
 8009e94:	08009ea7 	.word	0x08009ea7
 8009e98:	08009ead 	.word	0x08009ead
 8009e9c:	08009eb3 	.word	0x08009eb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea4:	e00b      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8009eaa:	e008      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009eac:	2301      	movs	r3, #1
 8009eae:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb0:	e005      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb6:	e002      	b.n	8009ebe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	73fb      	strb	r3, [r7, #15]
    break;
 8009ebc:	bf00      	nop
  }
  return usb_status;
 8009ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <__errno>:
 8009ecc:	4b01      	ldr	r3, [pc, #4]	; (8009ed4 <__errno+0x8>)
 8009ece:	6818      	ldr	r0, [r3, #0]
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	20000164 	.word	0x20000164

08009ed8 <__libc_init_array>:
 8009ed8:	b570      	push	{r4, r5, r6, lr}
 8009eda:	4e0d      	ldr	r6, [pc, #52]	; (8009f10 <__libc_init_array+0x38>)
 8009edc:	4c0d      	ldr	r4, [pc, #52]	; (8009f14 <__libc_init_array+0x3c>)
 8009ede:	1ba4      	subs	r4, r4, r6
 8009ee0:	10a4      	asrs	r4, r4, #2
 8009ee2:	2500      	movs	r5, #0
 8009ee4:	42a5      	cmp	r5, r4
 8009ee6:	d109      	bne.n	8009efc <__libc_init_array+0x24>
 8009ee8:	4e0b      	ldr	r6, [pc, #44]	; (8009f18 <__libc_init_array+0x40>)
 8009eea:	4c0c      	ldr	r4, [pc, #48]	; (8009f1c <__libc_init_array+0x44>)
 8009eec:	f000 f8ea 	bl	800a0c4 <_init>
 8009ef0:	1ba4      	subs	r4, r4, r6
 8009ef2:	10a4      	asrs	r4, r4, #2
 8009ef4:	2500      	movs	r5, #0
 8009ef6:	42a5      	cmp	r5, r4
 8009ef8:	d105      	bne.n	8009f06 <__libc_init_array+0x2e>
 8009efa:	bd70      	pop	{r4, r5, r6, pc}
 8009efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f00:	4798      	blx	r3
 8009f02:	3501      	adds	r5, #1
 8009f04:	e7ee      	b.n	8009ee4 <__libc_init_array+0xc>
 8009f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f0a:	4798      	blx	r3
 8009f0c:	3501      	adds	r5, #1
 8009f0e:	e7f2      	b.n	8009ef6 <__libc_init_array+0x1e>
 8009f10:	0800a1c0 	.word	0x0800a1c0
 8009f14:	0800a1c0 	.word	0x0800a1c0
 8009f18:	0800a1c0 	.word	0x0800a1c0
 8009f1c:	0800a1c4 	.word	0x0800a1c4

08009f20 <malloc>:
 8009f20:	4b02      	ldr	r3, [pc, #8]	; (8009f2c <malloc+0xc>)
 8009f22:	4601      	mov	r1, r0
 8009f24:	6818      	ldr	r0, [r3, #0]
 8009f26:	f000 b861 	b.w	8009fec <_malloc_r>
 8009f2a:	bf00      	nop
 8009f2c:	20000164 	.word	0x20000164

08009f30 <free>:
 8009f30:	4b02      	ldr	r3, [pc, #8]	; (8009f3c <free+0xc>)
 8009f32:	4601      	mov	r1, r0
 8009f34:	6818      	ldr	r0, [r3, #0]
 8009f36:	f000 b80b 	b.w	8009f50 <_free_r>
 8009f3a:	bf00      	nop
 8009f3c:	20000164 	.word	0x20000164

08009f40 <memset>:
 8009f40:	4402      	add	r2, r0
 8009f42:	4603      	mov	r3, r0
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d100      	bne.n	8009f4a <memset+0xa>
 8009f48:	4770      	bx	lr
 8009f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f4e:	e7f9      	b.n	8009f44 <memset+0x4>

08009f50 <_free_r>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	4605      	mov	r5, r0
 8009f54:	2900      	cmp	r1, #0
 8009f56:	d045      	beq.n	8009fe4 <_free_r+0x94>
 8009f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f5c:	1f0c      	subs	r4, r1, #4
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	bfb8      	it	lt
 8009f62:	18e4      	addlt	r4, r4, r3
 8009f64:	f000 f8ac 	bl	800a0c0 <__malloc_lock>
 8009f68:	4a1f      	ldr	r2, [pc, #124]	; (8009fe8 <_free_r+0x98>)
 8009f6a:	6813      	ldr	r3, [r2, #0]
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	b933      	cbnz	r3, 8009f7e <_free_r+0x2e>
 8009f70:	6063      	str	r3, [r4, #4]
 8009f72:	6014      	str	r4, [r2, #0]
 8009f74:	4628      	mov	r0, r5
 8009f76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f7a:	f000 b8a2 	b.w	800a0c2 <__malloc_unlock>
 8009f7e:	42a3      	cmp	r3, r4
 8009f80:	d90c      	bls.n	8009f9c <_free_r+0x4c>
 8009f82:	6821      	ldr	r1, [r4, #0]
 8009f84:	1862      	adds	r2, r4, r1
 8009f86:	4293      	cmp	r3, r2
 8009f88:	bf04      	itt	eq
 8009f8a:	681a      	ldreq	r2, [r3, #0]
 8009f8c:	685b      	ldreq	r3, [r3, #4]
 8009f8e:	6063      	str	r3, [r4, #4]
 8009f90:	bf04      	itt	eq
 8009f92:	1852      	addeq	r2, r2, r1
 8009f94:	6022      	streq	r2, [r4, #0]
 8009f96:	6004      	str	r4, [r0, #0]
 8009f98:	e7ec      	b.n	8009f74 <_free_r+0x24>
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	685a      	ldr	r2, [r3, #4]
 8009f9e:	b10a      	cbz	r2, 8009fa4 <_free_r+0x54>
 8009fa0:	42a2      	cmp	r2, r4
 8009fa2:	d9fa      	bls.n	8009f9a <_free_r+0x4a>
 8009fa4:	6819      	ldr	r1, [r3, #0]
 8009fa6:	1858      	adds	r0, r3, r1
 8009fa8:	42a0      	cmp	r0, r4
 8009faa:	d10b      	bne.n	8009fc4 <_free_r+0x74>
 8009fac:	6820      	ldr	r0, [r4, #0]
 8009fae:	4401      	add	r1, r0
 8009fb0:	1858      	adds	r0, r3, r1
 8009fb2:	4282      	cmp	r2, r0
 8009fb4:	6019      	str	r1, [r3, #0]
 8009fb6:	d1dd      	bne.n	8009f74 <_free_r+0x24>
 8009fb8:	6810      	ldr	r0, [r2, #0]
 8009fba:	6852      	ldr	r2, [r2, #4]
 8009fbc:	605a      	str	r2, [r3, #4]
 8009fbe:	4401      	add	r1, r0
 8009fc0:	6019      	str	r1, [r3, #0]
 8009fc2:	e7d7      	b.n	8009f74 <_free_r+0x24>
 8009fc4:	d902      	bls.n	8009fcc <_free_r+0x7c>
 8009fc6:	230c      	movs	r3, #12
 8009fc8:	602b      	str	r3, [r5, #0]
 8009fca:	e7d3      	b.n	8009f74 <_free_r+0x24>
 8009fcc:	6820      	ldr	r0, [r4, #0]
 8009fce:	1821      	adds	r1, r4, r0
 8009fd0:	428a      	cmp	r2, r1
 8009fd2:	bf04      	itt	eq
 8009fd4:	6811      	ldreq	r1, [r2, #0]
 8009fd6:	6852      	ldreq	r2, [r2, #4]
 8009fd8:	6062      	str	r2, [r4, #4]
 8009fda:	bf04      	itt	eq
 8009fdc:	1809      	addeq	r1, r1, r0
 8009fde:	6021      	streq	r1, [r4, #0]
 8009fe0:	605c      	str	r4, [r3, #4]
 8009fe2:	e7c7      	b.n	8009f74 <_free_r+0x24>
 8009fe4:	bd38      	pop	{r3, r4, r5, pc}
 8009fe6:	bf00      	nop
 8009fe8:	200001ec 	.word	0x200001ec

08009fec <_malloc_r>:
 8009fec:	b570      	push	{r4, r5, r6, lr}
 8009fee:	1ccd      	adds	r5, r1, #3
 8009ff0:	f025 0503 	bic.w	r5, r5, #3
 8009ff4:	3508      	adds	r5, #8
 8009ff6:	2d0c      	cmp	r5, #12
 8009ff8:	bf38      	it	cc
 8009ffa:	250c      	movcc	r5, #12
 8009ffc:	2d00      	cmp	r5, #0
 8009ffe:	4606      	mov	r6, r0
 800a000:	db01      	blt.n	800a006 <_malloc_r+0x1a>
 800a002:	42a9      	cmp	r1, r5
 800a004:	d903      	bls.n	800a00e <_malloc_r+0x22>
 800a006:	230c      	movs	r3, #12
 800a008:	6033      	str	r3, [r6, #0]
 800a00a:	2000      	movs	r0, #0
 800a00c:	bd70      	pop	{r4, r5, r6, pc}
 800a00e:	f000 f857 	bl	800a0c0 <__malloc_lock>
 800a012:	4a21      	ldr	r2, [pc, #132]	; (800a098 <_malloc_r+0xac>)
 800a014:	6814      	ldr	r4, [r2, #0]
 800a016:	4621      	mov	r1, r4
 800a018:	b991      	cbnz	r1, 800a040 <_malloc_r+0x54>
 800a01a:	4c20      	ldr	r4, [pc, #128]	; (800a09c <_malloc_r+0xb0>)
 800a01c:	6823      	ldr	r3, [r4, #0]
 800a01e:	b91b      	cbnz	r3, 800a028 <_malloc_r+0x3c>
 800a020:	4630      	mov	r0, r6
 800a022:	f000 f83d 	bl	800a0a0 <_sbrk_r>
 800a026:	6020      	str	r0, [r4, #0]
 800a028:	4629      	mov	r1, r5
 800a02a:	4630      	mov	r0, r6
 800a02c:	f000 f838 	bl	800a0a0 <_sbrk_r>
 800a030:	1c43      	adds	r3, r0, #1
 800a032:	d124      	bne.n	800a07e <_malloc_r+0x92>
 800a034:	230c      	movs	r3, #12
 800a036:	6033      	str	r3, [r6, #0]
 800a038:	4630      	mov	r0, r6
 800a03a:	f000 f842 	bl	800a0c2 <__malloc_unlock>
 800a03e:	e7e4      	b.n	800a00a <_malloc_r+0x1e>
 800a040:	680b      	ldr	r3, [r1, #0]
 800a042:	1b5b      	subs	r3, r3, r5
 800a044:	d418      	bmi.n	800a078 <_malloc_r+0x8c>
 800a046:	2b0b      	cmp	r3, #11
 800a048:	d90f      	bls.n	800a06a <_malloc_r+0x7e>
 800a04a:	600b      	str	r3, [r1, #0]
 800a04c:	50cd      	str	r5, [r1, r3]
 800a04e:	18cc      	adds	r4, r1, r3
 800a050:	4630      	mov	r0, r6
 800a052:	f000 f836 	bl	800a0c2 <__malloc_unlock>
 800a056:	f104 000b 	add.w	r0, r4, #11
 800a05a:	1d23      	adds	r3, r4, #4
 800a05c:	f020 0007 	bic.w	r0, r0, #7
 800a060:	1ac3      	subs	r3, r0, r3
 800a062:	d0d3      	beq.n	800a00c <_malloc_r+0x20>
 800a064:	425a      	negs	r2, r3
 800a066:	50e2      	str	r2, [r4, r3]
 800a068:	e7d0      	b.n	800a00c <_malloc_r+0x20>
 800a06a:	428c      	cmp	r4, r1
 800a06c:	684b      	ldr	r3, [r1, #4]
 800a06e:	bf16      	itet	ne
 800a070:	6063      	strne	r3, [r4, #4]
 800a072:	6013      	streq	r3, [r2, #0]
 800a074:	460c      	movne	r4, r1
 800a076:	e7eb      	b.n	800a050 <_malloc_r+0x64>
 800a078:	460c      	mov	r4, r1
 800a07a:	6849      	ldr	r1, [r1, #4]
 800a07c:	e7cc      	b.n	800a018 <_malloc_r+0x2c>
 800a07e:	1cc4      	adds	r4, r0, #3
 800a080:	f024 0403 	bic.w	r4, r4, #3
 800a084:	42a0      	cmp	r0, r4
 800a086:	d005      	beq.n	800a094 <_malloc_r+0xa8>
 800a088:	1a21      	subs	r1, r4, r0
 800a08a:	4630      	mov	r0, r6
 800a08c:	f000 f808 	bl	800a0a0 <_sbrk_r>
 800a090:	3001      	adds	r0, #1
 800a092:	d0cf      	beq.n	800a034 <_malloc_r+0x48>
 800a094:	6025      	str	r5, [r4, #0]
 800a096:	e7db      	b.n	800a050 <_malloc_r+0x64>
 800a098:	200001ec 	.word	0x200001ec
 800a09c:	200001f0 	.word	0x200001f0

0800a0a0 <_sbrk_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4c06      	ldr	r4, [pc, #24]	; (800a0bc <_sbrk_r+0x1c>)
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4605      	mov	r5, r0
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	6023      	str	r3, [r4, #0]
 800a0ac:	f7f7 fa4c 	bl	8001548 <_sbrk>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d102      	bne.n	800a0ba <_sbrk_r+0x1a>
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	b103      	cbz	r3, 800a0ba <_sbrk_r+0x1a>
 800a0b8:	602b      	str	r3, [r5, #0]
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	20000dc8 	.word	0x20000dc8

0800a0c0 <__malloc_lock>:
 800a0c0:	4770      	bx	lr

0800a0c2 <__malloc_unlock>:
 800a0c2:	4770      	bx	lr

0800a0c4 <_init>:
 800a0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c6:	bf00      	nop
 800a0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ca:	bc08      	pop	{r3}
 800a0cc:	469e      	mov	lr, r3
 800a0ce:	4770      	bx	lr

0800a0d0 <_fini>:
 800a0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d2:	bf00      	nop
 800a0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d6:	bc08      	pop	{r3}
 800a0d8:	469e      	mov	lr, r3
 800a0da:	4770      	bx	lr
